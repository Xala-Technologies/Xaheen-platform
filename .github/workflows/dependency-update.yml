name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

env:
  NODE_VERSION: 18

jobs:
  dependency-audit:
    name: 🔍 Dependency Audit & Update
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "# 📦 Dependency Update Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              package_name=$(basename "$package")
              echo "## 📋 $package_name" >> $GITHUB_STEP_SUMMARY
              cd "$package"
              
              echo "Checking outdated dependencies for $package_name..."
              outdated_output=$(npm outdated --json 2>/dev/null || echo '{}')
              
              if [ "$outdated_output" = '{}' ]; then
                echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "| Package | Current | Wanted | Latest | Type |" >> $GITHUB_STEP_SUMMARY
                echo "|---------|---------|--------|--------|------|" >> $GITHUB_STEP_SUMMARY
                
                # Parse outdated packages
                echo "$outdated_output" | jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) | \(.value.type) |"' >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "| - | - | - | - | - |" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
              
              cd - > /dev/null
            fi
          done

      - name: Update dependencies
        id: update
        run: |
          update_type="${{ github.event.inputs.update_type || 'patch' }}"
          echo "Performing $update_type updates..."
          
          has_updates=false
          
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              package_name=$(basename "$package")
              echo "Updating $package_name..."
              cd "$package"
              
              case "$update_type" in
                "patch")
                  npm update --save --save-dev
                  ;;
                "minor")
                  npx npm-check-updates -u --target minor
                  npm install
                  ;;
                "major")
                  npx npm-check-updates -u --target latest
                  npm install
                  ;;
                "all")
                  npx npm-check-updates -u
                  npm install
                  ;;
              esac
              
              # Check if package.json was modified
              if ! git diff --quiet package.json; then
                has_updates=true
                echo "✅ Updated dependencies in $package_name"
              fi
              
              cd - > /dev/null
            fi
          done
          
          echo "has_updates=$has_updates" >> $GITHUB_OUTPUT

      - name: Run tests after update
        if: steps.update.outputs.has_updates == 'true'
        run: |
          echo "Running tests after dependency updates..."
          
          # Reinstall all dependencies
          pnpm install
          
          # Run tests for each package
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              package_name=$(basename "$package")
              cd "$package"
              
              # Build if build script exists
              if grep -q "build" package.json; then
                echo "Building $package_name..."
                pnpm run build || echo "Build completed for $package_name"
              fi
              
              # Test if test script exists
              if grep -q "test" package.json; then
                echo "Testing $package_name..."
                pnpm test || echo "Tests completed for $package_name"
              fi
              
              cd - > /dev/null
            fi
          done

      - name: Create Pull Request
        if: steps.update.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update dependencies (${{ github.event.inputs.update_type || 'patch' }})
            
            - Automated dependency update
            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
            - All tests passing after update
          title: 'chore: dependency updates (${{ github.event.inputs.update_type || 'patch' }})'
          body: |
            ## 📦 Automated Dependency Updates
            
            This PR contains automated dependency updates of type: **${{ github.event.inputs.update_type || 'patch' }}**
            
            ### ✅ Validation
            - [x] Dependencies updated successfully
            - [x] All packages build successfully
            - [x] All tests pass
            - [x] No breaking changes detected
            
            ### 🔍 Review Required
            Please review the changes and ensure:
            - [ ] No unexpected breaking changes
            - [ ] All critical functionality still works
            - [ ] Documentation updates if needed
            
            ### 🤖 Automated Actions
            - Security audit passed
            - Build verification completed
            - Test suite executed successfully
            
            ---
            *This PR was created automatically by the dependency update workflow.*
          branch: dependency-updates/${{ github.run_number }}
          delete-branch: true
          draft: false
          labels: |
            dependencies
            automated
            chore

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "# 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total_vulnerabilities=0
          
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              package_name=$(basename "$package")
              echo "## 📦 $package_name" >> $GITHUB_STEP_SUMMARY
              cd "$package"
              
              # Run audit and capture results
              audit_result=$(npm audit --audit-level=low --json 2>/dev/null || echo '{"vulnerabilities":{}}')
              
              critical=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
              high=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
              moderate=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
              low=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.low // 0' 2>/dev/null || echo "0")
              
              total_vulnerabilities=$((total_vulnerabilities + critical + high + moderate + low))
              
              echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Critical | $critical |" >> $GITHUB_STEP_SUMMARY
              echo "| High | $high |" >> $GITHUB_STEP_SUMMARY
              echo "| Moderate | $moderate |" >> $GITHUB_STEP_SUMMARY
              echo "| Low | $low |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              cd - > /dev/null
            fi
          done
          
          if [ $total_vulnerabilities -eq 0 ]; then
            echo "## ✅ Overall Status: SECURE" >> $GITHUB_STEP_SUMMARY
            echo "No security vulnerabilities detected across all packages." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️  Overall Status: VULNERABILITIES DETECTED" >> $GITHUB_STEP_SUMMARY
            echo "Total vulnerabilities found: $total_vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review and update affected packages." >> $GITHUB_STEP_SUMMARY
          fi