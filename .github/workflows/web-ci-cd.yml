name: 🚀 Web App CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**', 'hotfix/**']
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/web-ci-cd.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/web-ci-cd.yml'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: xaheen/web-app

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # CODE QUALITY AND SECURITY
  # =============================================================================
  quality-check:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Lint Code
        run: |
          cd apps/web
          pnpm lint
          
      - name: 🎨 Check Formatting
        run: |
          cd apps/web
          pnpm prettier --check .
          
      - name: 🔒 Security Audit
        run: |
          cd apps/web
          pnpm audit --audit-level=moderate
          
      - name: 🔐 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml
          
      - name: 🔐 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: 🛡️ Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=apps/web/package.json
          
      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: apps/web

  # =============================================================================
  # TYPE CHECKING AND TESTING
  # =============================================================================
  type-check-and-test:
    name: 🧪 Type Check & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: 🎯 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            
      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 TypeScript Type Check
        run: |
          cd apps/web
          pnpm type-check
          
      - name: 🧪 Run Tests - ${{ matrix.test-type }}
        run: |
          cd apps/web
          case \"${{ matrix.test-type }}\" in
            \"unit\")
              pnpm test:unit --coverage
              ;;
            \"integration\")
              pnpm test:integration
              ;;
            \"e2e\")
              pnpm test:e2e
              ;;
          esac
          
      - name: 📊 Upload Coverage Reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/web/coverage/lcov.info
          flags: web-app
          name: web-app-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # =============================================================================
  # BUILD APPLICATION
  # =============================================================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [quality-check, type-check-and-test]
    timeout-minutes: 25
    
    outputs:
      image-digest: ${{ steps.build-image.outputs.digest }}
      build-metadata: ${{ steps.build-metadata.outputs.metadata }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: 🎯 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            
      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏗️ Build Application
        run: |
          cd apps/web
          pnpm build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          
      - name: 📊 Analyze Bundle Size
        run: |
          cd apps/web
          pnpm analyze
          
      - name: 📦 Cache Build Output
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            apps/web/out
          key: ${{ runner.os }}-build-${{ github.sha }}
          
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Extract Metadata
        id: build-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.build-metadata.outputs.tags }}
          labels: ${{ steps.build-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=${{ fromJSON(steps.build-metadata.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_SHA=${{ github.sha }}
            GIT_REF=${{ github.ref }}

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔐 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔒 Container Structure Test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          container-structure-test test --image ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --config ./apps/web/container-structure-test.yaml

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment:
      name: staging
      url: https://staging.xaheen.no
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Cloudflare CLI
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/
          
      - name: 🚀 Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: xaheen-web-staging
          directory: apps/web/.next
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏥 Health Check
        run: |
          sleep 30
          curl -f https://staging.xaheen.no/api/health || exit 1
          
      - name: 📊 Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://staging.xaheen.no
          configPath: ./apps/web/.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment == 'production'
    environment:
      name: production
      url: https://xaheen.no
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Cloudflare CLI
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/
          
      - name: 🚀 Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: xaheen-web-production
          directory: apps/web/.next
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏥 Health Check
        run: |
          sleep 30
          curl -f https://xaheen.no/api/health || exit 1
          
      - name: 📊 Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://xaheen.no
          configPath: ./apps/web/.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 🔔 Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '🚀 Xaheen Web App successfully deployed to production!'

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 🧹 Clean up old images
        run: |
          # Keep only the 10 most recent images
          echo \"Cleaning up old container images...\"
          # This would typically involve API calls to the registry
          # Implementation depends on your registry cleanup policies