/**
 * @fileoverview  Component - CVA Design System Compliant
 * @description A web component built with Xala UI System using CVA pattern
 * @version 5.0.0
 * @compliance CVA-based, SSR-safe, Token-based styling
 */

import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@xaheen-ai/design-system/utils';

// =============================================================================
//  VARIANTS USING CVA
// =============================================================================

const Variants = cva(
  // Base classes using semantic tokens
  'relative inline-flex items-center justify-center gap-2 rounded-lg border bg-card text-card-foreground transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'border-border bg-background hover:bg-accent hover:text-accent-foreground',
        primary: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/90',
        secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        outline: 'border-border bg-transparent hover:bg-accent hover:text-accent-foreground',
        ghost: 'border-transparent bg-transparent hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        sm: 'h-9 px-3 text-sm',
        md: 'h-10 px-4 py-2',
        lg: 'h-11 px-8',
        xl: 'h-12 px-12 text-base',
      },
      fullWidth: {
        true: 'w-full',
        false: 'w-auto',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
      fullWidth: false,
    },
  }
);

// =============================================================================
//  COMPONENT INTERFACE
// =============================================================================

export interface Props
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof Variants> {
  
  readonly web?: ;
  
  readonly loading?: boolean;
  readonly disabled?: boolean;
  readonly 'data-testid'?: string;
}

// =============================================================================
//  COMPONENT
// =============================================================================

export const  = React.forwardRef<HTMLDivElement, Props>(
  ({
    className,
    variant = 'default',
    size = 'md',
    fullWidth = false,
    loading = false,
    disabled = false,
    
    web,
    
    children,
    'data-testid': testId,
    ...props
  }, ref) => {
    const isDisabled = disabled || loading;

    return (
      <div
        className={cn(Variants({ variant, size, fullWidth }), className)}
        ref={ref}
        data-testid={testId}
        aria-disabled={isDisabled}
        {...props}
      >
        
        {loading && (
          <div className="animate-spin rounded-full border-2 border-transparent border-t-current h-4 w-4" />
        )}
        
        
        
        
        <div className="flex-1">
          {web}
        </div>
        
        
        
        {!loading && children}
      </div>
    );
  }
);

.displayName = '';