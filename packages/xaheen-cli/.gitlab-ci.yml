# GitLab CI/CD Pipeline for Xaheen CLI - Production Deployment
# Comprehensive pipeline with Norwegian compliance, security scanning, and multi-environment deployment

variables:
  # Container Registry
  REGISTRY: "registry.gitlab.com"
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}/xaheen-cli"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # Node.js Configuration
  NODE_VERSION: "20"
  NPM_CACHE_FOLDER: ".npm"
  
  # Security and Compliance
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  SAST_EXCLUDED_ANALYZERS: "nodejs-scan,retire-js"
  
  # Norwegian Compliance
  NSM_CLASSIFICATION: "RESTRICTED"
  GDPR_COMPLIANCE_CHECK: "true"
  NORWEGIAN_LOCALE_VALIDATION: "true"
  
  # Performance Monitoring
  OTEL_EXPORTER_OTLP_ENDPOINT: "${OBSERVABILITY_ENDPOINT}"
  REDIS_URL: "${REDIS_CONNECTION_STRING}"
  
  # Feature Flags
  FEATURE_FLAG_SERVICE: "launchdarkly"
  ENVIRONMENT_SPECIFIC_CONFIG: "true"

# Pipeline Stages
stages:
  - validate
  - security
  - test
  - compliance
  - build
  - container-security
  - deploy-staging
  - integration-tests
  - compliance-validation
  - deploy-production
  - post-deployment
  - monitoring

# Global Rules
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

# Cache Configuration
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - node_modules/
    - .npm/
    - dist/
    - coverage/

# Templates
.node_template: &node_template
  image: node:${NODE_VERSION}-alpine
  before_script:
    - apk add --no-cache git python3 make g++
    - npm ci --cache ${NPM_CACHE_FOLDER} --prefer-offline

.docker_template: &docker_template
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"

.kubectl_template: &kubectl_template
  image: bitnami/kubectl:latest
  before_script:
    - kubectl version --client

# Stage 1: Validation
validate:code-quality:
  <<: *node_template
  stage: validate
  script:
    - npm run lint
    - npm run type-check
    - npm run format -- --check
  artifacts:
    reports:
      codequality: gl-codequality.json
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

validate:dependencies:
  <<: *node_template
  stage: validate
  script:
    - npm audit --audit-level=moderate
    - npm run test:security
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    expire_in: 1 week
  allow_failure: false

# Stage 2: Security Scanning
security:sast:
  stage: security
  image: registry.gitlab.com/security-products/sast:latest
  variables:
    SAST_CONFIDENCE_LEVEL: 2
  script:
    - /analyzer run
  artifacts:
    reports:
      sast: gl-sast-report.json
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

security:secret-detection:
  stage: security
  image: registry.gitlab.com/security-products/secrets:latest
  script:
    - /analyzer run
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

security:license-scanning:
  <<: *node_template
  stage: security
  script:
    - npm run compliance-report -- --format=gitlab
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json
    expire_in: 1 week
  only:
    - main
    - develop

# Stage 3: Testing
test:unit:
  <<: *node_template
  stage: test
  script:
    - npm run test:unit
  coverage: '/Coverage: \d+\.\d+%/'
  artifacts:
    reports:
      junit: coverage/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    expire_in: 1 week
  parallel:
    matrix:
      - NODE_VERSION: ["18", "20", "22"]

test:integration:
  <<: *node_template
  stage: test
  services:
    - redis:7-alpine
    - postgres:15-alpine
  variables:
    REDIS_URL: "redis://redis:6379"
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/test"
  script:
    - npm run test:integration
  artifacts:
    reports:
      junit: coverage/integration-junit.xml
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

test:e2e:
  <<: *node_template
  stage: test
  script:
    - npm run test:e2e
  artifacts:
    reports:
      junit: coverage/e2e-junit.xml
    expire_in: 1 week
    paths:
      - test-results/
  only:
    - main
    - develop

test:performance:
  <<: *node_template
  stage: test
  script:
    - npm run test:performance
  artifacts:
    reports:
      performance: performance-report.json
    expire_in: 1 week
  only:
    - main
    - develop

# Stage 4: Norwegian Compliance
compliance:nsm-security:
  <<: *node_template
  stage: compliance
  script:
    - npm run security-audit -- --nsm-classification=${NSM_CLASSIFICATION}
    - npm run compliance-report -- --nsm --output=nsm-compliance-report.json
  artifacts:
    reports:
      compliance: nsm-compliance-report.json
    expire_in: 1 month
  only:
    - main
    - develop

compliance:gdpr:
  <<: *node_template
  stage: compliance
  script:
    - npm run compliance-report -- --gdpr --privacy-impact-assessment
  artifacts:
    reports:
      compliance: gdpr-compliance-report.json
    expire_in: 1 month
  only:
    - main
    - develop

compliance:accessibility:
  <<: *node_template
  stage: compliance
  script:
    - npm run test -- --run src/**/*.accessibility.test.ts
  artifacts:
    reports:
      accessibility: accessibility-report.json
    expire_in: 1 week
  only:
    - main
    - develop

compliance:localization:
  <<: *node_template
  stage: compliance
  script:
    - npm run validate -- --norwegian-locale
    - npm run test -- --run src/**/*.i18n.test.ts
  artifacts:
    reports:
      localization: localization-report.json
    expire_in: 1 week
  only:
    - main
    - develop

# Stage 5: Build
build:application:
  <<: *node_template
  stage: build
  script:
    - npm run build
    - npm pack
  artifacts:
    paths:
      - dist/
      - "*.tgz"
    expire_in: 1 week
  only:
    - main
    - develop
    - tags

build:container:
  <<: *docker_template
  stage: build
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        IMAGE_TAG="latest"
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        IMAGE_TAG="develop"
      elif [[ -n "$CI_COMMIT_TAG" ]]; then
        IMAGE_TAG="$CI_COMMIT_TAG"
      else
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
      fi
    - docker build --target production -t ${IMAGE_NAME}:${IMAGE_TAG} .
    - docker build --target development -t ${IMAGE_NAME}:${IMAGE_TAG}-dev .
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}-dev
  dependencies:
    - build:application
  only:
    - main
    - develop
    - tags

# Stage 6: Container Security
container-security:trivy-scan:
  <<: *docker_template
  stage: container-security
  script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - trivy image --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 1 week
  dependencies:
    - build:container
  only:
    - main
    - develop

container-security:grype-scan:
  <<: *docker_template
  stage: container-security
  script:
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    - grype ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} -o json > grype-report.json
  artifacts:
    paths:
      - grype-report.json
    expire_in: 1 week
  dependencies:
    - build:container
  only:
    - main
    - develop

# Stage 7: Deploy Staging
deploy:staging:
  <<: *kubectl_template
  stage: deploy-staging
  environment:
    name: staging
    url: https://xaheen-cli-staging.xala.no
  script:
    - kubectl config use-context $KUBE_CONTEXT_STAGING
    - helm upgrade --install xaheen-cli-staging ./helm/xaheen-cli 
        --namespace xaheen-staging 
        --create-namespace
        --set image.tag=${CI_COMMIT_SHORT_SHA}
        --set environment=staging
        --set nsmClassification=${NSM_CLASSIFICATION}
        --set redis.enabled=true
        --set monitoring.enabled=true
        --set-string podAnnotations."prometheus\.io/scrape"="true"
        --wait --timeout=300s
  dependencies:
    - build:container
    - container-security:trivy-scan
  only:
    - develop
    - main

# Stage 8: Integration Tests (Staging)
integration-tests:staging:
  <<: *node_template
  stage: integration-tests
  environment:
    name: staging
  variables:
    TEST_ENDPOINT: "https://xaheen-cli-staging.xala.no"
  script:
    - npm run test:integration -- --endpoint=${TEST_ENDPOINT}
    - npm run test:e2e -- --endpoint=${TEST_ENDPOINT}
  dependencies:
    - deploy:staging
  only:
    - develop
    - main

integration-tests:load-testing:
  image: grafana/k6:latest
  stage: integration-tests
  environment:
    name: staging
  script:
    - k6 run --out influxdb=http://influxdb:8086/k6 tests/load-test.js
  artifacts:
    reports:
      load_performance: load-test-report.json
    expire_in: 1 week
  dependencies:
    - deploy:staging
  only:
    - main

# Stage 9: Compliance Validation (Staging)
compliance-validation:staging:
  <<: *node_template
  stage: compliance-validation
  environment:
    name: staging
  script:
    - npm run compliance-report -- --endpoint=${TEST_ENDPOINT} --environment=staging
    - npm run security-audit -- --endpoint=${TEST_ENDPOINT} --runtime-check
  artifacts:
    reports:
      compliance: staging-compliance-validation.json
    expire_in: 1 month
  dependencies:
    - deploy:staging
  only:
    - main

# Stage 10: Deploy Production
deploy:production:
  <<: *kubectl_template
  stage: deploy-production
  environment:
    name: production
    url: https://xaheen-cli.xala.no
  script:
    - kubectl config use-context $KUBE_CONTEXT_PRODUCTION
    # Blue-Green Deployment Strategy
    - |
      if kubectl get deployment xaheen-cli-green -n xaheen-production >/dev/null 2>&1; then
        ACTIVE_COLOR="green"
        INACTIVE_COLOR="blue"
      else
        ACTIVE_COLOR="blue" 
        INACTIVE_COLOR="green"
      fi
    - echo "Deploying to ${INACTIVE_COLOR} environment"
    - helm upgrade --install xaheen-cli-${INACTIVE_COLOR} ./helm/xaheen-cli 
        --namespace xaheen-production 
        --create-namespace
        --set image.tag=${CI_COMMIT_SHORT_SHA}
        --set environment=production
        --set color=${INACTIVE_COLOR}
        --set nsmClassification=${NSM_CLASSIFICATION}
        --set redis.enabled=true
        --set monitoring.enabled=true
        --set security.networkPolicies.enabled=true
        --set autoscaling.enabled=true
        --set-string podAnnotations."prometheus\.io/scrape"="true"
        --wait --timeout=600s
    # Health Check
    - kubectl wait --for=condition=ready pod -l app=xaheen-cli,color=${INACTIVE_COLOR} -n xaheen-production --timeout=300s
    # Switch Traffic (Blue-Green)
    - kubectl patch service xaheen-cli -n xaheen-production -p '{"spec":{"selector":{"color":"'${INACTIVE_COLOR}'"}}}'
    # Clean up old deployment after successful switch
    - sleep 30
    - helm uninstall xaheen-cli-${ACTIVE_COLOR} -n xaheen-production || true
  dependencies:
    - integration-tests:staging
    - compliance-validation:staging
  when: manual
  only:
    - main

deploy:production:canary:
  <<: *kubectl_template
  stage: deploy-production
  environment:
    name: production-canary
    url: https://xaheen-cli-canary.xala.no
  script:
    - kubectl config use-context $KUBE_CONTEXT_PRODUCTION
    - helm upgrade --install xaheen-cli-canary ./helm/xaheen-cli 
        --namespace xaheen-production 
        --set image.tag=${CI_COMMIT_SHORT_SHA}
        --set environment=production
        --set canary.enabled=true
        --set canary.weight=10
        --set replicaCount=1
        --wait --timeout=300s
  dependencies:
    - integration-tests:staging
  when: manual
  only:
    - main

# Stage 11: Post-Deployment
post-deployment:health-check:
  <<: *kubectl_template
  stage: post-deployment
  environment:
    name: production
  script:
    - kubectl get pods -n xaheen-production -l app=xaheen-cli
    - kubectl top pods -n xaheen-production -l app=xaheen-cli
    - curl -f https://xaheen-cli.xala.no/health || exit 1
    - npm run test -- --run tests/smoke/**/*.test.ts --endpoint=https://xaheen-cli.xala.no
  dependencies:
    - deploy:production
  only:
    - main

post-deployment:database-migration:
  <<: *kubectl_template
  stage: post-deployment
  environment:
    name: production
  script:
    - kubectl config use-context $KUBE_CONTEXT_PRODUCTION
    - kubectl create job --from=cronjob/database-migration migration-${CI_COMMIT_SHORT_SHA} -n xaheen-production
    - kubectl wait --for=condition=complete job/migration-${CI_COMMIT_SHORT_SHA} -n xaheen-production --timeout=300s
  dependencies:
    - deploy:production
  when: manual
  only:
    - main

post-deployment:cache-warming:
  <<: *node_template
  stage: post-deployment
  environment:
    name: production
  script:
    - npm run cache-warm -- --endpoint=https://xaheen-cli.xala.no
  dependencies:
    - deploy:production
  only:
    - main

# Stage 12: Monitoring
monitoring:prometheus-rules:
  <<: *kubectl_template
  stage: monitoring
  environment:
    name: production
  script:
    - kubectl apply -f monitoring/prometheus-rules.yaml -n xaheen-production
    - kubectl apply -f monitoring/service-monitor.yaml -n xaheen-production
  dependencies:
    - deploy:production
  only:
    - main

monitoring:grafana-dashboard:
  <<: *kubectl_template
  stage: monitoring
  environment:
    name: production
  script:
    - kubectl create configmap grafana-dashboard-xaheen --from-file=monitoring/grafana-dashboard.json -n monitoring --dry-run=client -o yaml | kubectl apply -f -
  dependencies:
    - deploy:production
  only:
    - main

monitoring:alert-validation:
  <<: *node_template
  stage: monitoring
  environment:
    name: production
  script:
    - npm run monitoring-validate -- --endpoint=https://xaheen-cli.xala.no --prometheus=${PROMETHEUS_ENDPOINT}
  dependencies:
    - monitoring:prometheus-rules
  only:
    - main

# Notification Templates
.slack_notification: &slack_notification
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"${NOTIFICATION_MESSAGE}\"}" \
        ${SLACK_WEBHOOK_URL}

# On Success
notify:success:
  <<: *slack_notification
  stage: post-deployment
  variables:
    NOTIFICATION_MESSAGE: "✅ Xaheen CLI ${CI_COMMIT_SHORT_SHA} successfully deployed to production!"
  dependencies:
    - deploy:production
  when: on_success
  only:
    - main

# On Failure
notify:failure:
  <<: *slack_notification
  stage: post-deployment
  variables:
    NOTIFICATION_MESSAGE: "❌ Xaheen CLI ${CI_COMMIT_SHORT_SHA} deployment failed! Check pipeline: ${CI_PIPELINE_URL}"
  when: on_failure
  only:
    - main

# Cleanup Jobs
cleanup:staging:
  <<: *kubectl_template
  stage: post-deployment
  environment:
    name: staging
  script:
    - kubectl delete pods --field-selector=status.phase=Succeeded -n xaheen-staging
    - kubectl delete pods --field-selector=status.phase=Failed -n xaheen-staging
  when: always
  only:
    - develop
    - main

cleanup:registry:
  <<: *docker_template
  stage: post-deployment
  script:
    - echo "Cleaning up old container images..."
    # Keep only the last 10 images
    - |
      TAGS=$(curl -s -H "Authorization: Bearer ${CI_REGISTRY_TOKEN}" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/${REPOSITORY_ID}/tags" | \
        jq -r '.[10:] | .[].name')
      for tag in $TAGS; do
        curl -X DELETE -H "Authorization: Bearer ${CI_REGISTRY_TOKEN}" \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/${REPOSITORY_ID}/tags/${tag}"
      done
  when: always
  only:
    - main