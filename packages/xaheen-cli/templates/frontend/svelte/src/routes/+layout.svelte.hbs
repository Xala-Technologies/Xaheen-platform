<script lang="ts">
  import '../app.css';
  import { onMount, onDestroy } from 'svelte';
  import { writable } from 'svelte/store';

  interface AppError {
    readonly message: string;
    readonly timestamp: Date;
  }

  // Global error store
  const errorStore = writable<AppError | null>(null);

  let mounted = false;

  onMount(() => {
    mounted = true;
    
    // Global error handler
    window.addEventListener('error', handleGlobalError);
    window.addEventListener('unhandledrejection', handleUnhandledRejection);
  });

  onDestroy(() => {
    if (typeof window !== 'undefined') {
      window.removeEventListener('error', handleGlobalError);
      window.removeEventListener('unhandledrejection', handleUnhandledRejection);
    }
  });

  function handleGlobalError(event: ErrorEvent): void {
    console.error('Global error:', event.error);
    errorStore.set({
      message: event.error?.message || 'An unexpected error occurred',
      timestamp: new Date()
    });
  }

  function handleUnhandledRejection(event: PromiseRejectionEvent): void {
    console.error('Unhandled promise rejection:', event.reason);
    errorStore.set({
      message: event.reason?.message || 'An unexpected error occurred',
      timestamp: new Date()
    });
  }

  function clearError(): void {
    errorStore.set(null);
  }

  $: error = $errorStore;
</script>

<div class="min-h-screen bg-gray-50">
  {#if error}
    <!-- Global Error Boundary -->
    <div class="min-h-screen flex items-center justify-center px-6">
      <div class="max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center">
        <h1 class="text-2xl font-bold text-red-600 mb-4">
          Application Error
        </h1>
        <p class="text-gray-600 mb-6" role="alert">
          {error.message}
        </p>
        <p class="text-sm text-gray-500 mb-6">
          Occurred at: {error.timestamp.toLocaleString('nb-NO')}
        </p>
        <div class="flex items-center justify-center space-x-4">
          <button
            on:click={clearError}
            class="h-12 px-6 bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
            aria-label="Dismiss error"
          >
            Dismiss
          </button>
          <button
            on:click={() => window.location.reload()}
            class="h-12 px-6 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            aria-label="Reload application"
          >
            Reload
          </button>
        </div>
      </div>
    </div>
  {:else}
    <!-- Main Application -->
    <slot />
  {/if}
</div>