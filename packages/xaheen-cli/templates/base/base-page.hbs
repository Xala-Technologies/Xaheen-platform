{{!-- Base Page Template - Foundation for all page components with SEO and metadata --}}
import React, { type JSX } from 'react';
import Head from 'next/head';
import { Container, Stack } from '@xala-ui/components';
import { cn } from '@xala-ui/utils';
{{#slot imports}}{{/slot}}

{{#slot interfaces}}
interface {{componentName}}Props {
  readonly title?: string;
  readonly description?: string;
  readonly keywords?: string;
  readonly canonicalUrl?: string;
  readonly ogImage?: string;
  readonly className?: string;
  readonly children?: React.ReactNode;
  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';
}
{{/slot}}

/**
 * {{componentName}} Page Component
 * 
 * @description Base page component with SEO optimization and metadata
 * @author Xaheen CLI Template Generator
 * @wcag AAA compliant
 * @nsm-classification {{nsmClassification}}
 */
export const {{componentName}} = ({
  title = '{{componentName}}',
  description = 'Page generated by Xaheen CLI',
  keywords = 'xaheen, xala-ui, react, nextjs',
  canonicalUrl,
  ogImage,
  className,
  children,
  nsmClassification = 'OPEN',
  ...props
}: {{componentName}}Props): JSX.Element => {
  const pageTitle = `${title} | Your App Name`;
  const pageUrl = canonicalUrl || `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yourapp.no'}`;
  const imageUrl = ogImage || `${pageUrl}/og-image.jpg`;

  const pageStyles = cn(
    'min-h-screen',
    'bg-background text-foreground',
    'antialiased',
    className
  );

  try {
    return (
      <>
        <Head>
          {/* Basic metadata */}
          <title>{pageTitle}</title>
          <meta name="description" content={description} />
          <meta name="keywords" content={keywords} />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <meta charSet="utf-8" />
          
          {/* Canonical URL */}
          {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
          
          {/* Open Graph */}
          <meta property="og:title" content={title} />
          <meta property="og:description" content={description} />
          <meta property="og:image" content={imageUrl} />
          <meta property="og:url" content={pageUrl} />
          <meta property="og:type" content="website" />
          <meta property="og:site_name" content="Your App Name" />
          
          {/* Twitter Card */}
          <meta name="twitter:card" content="summary_large_image" />
          <meta name="twitter:title" content={title} />
          <meta name="twitter:description" content={description} />
          <meta name="twitter:image" content={imageUrl} />
          
          {/* Norwegian compliance */}
          <meta name="language" content="nb-NO" />
          <meta name="geo.region" content="NO" />
          <meta name="geo.country" content="Norway" />
          
          {/* NSM Classification */}
          <meta name="classification" content={nsmClassification} />
          
          {/* Accessibility */}
          <meta name="color-scheme" content="light dark" />
          <meta name="theme-color" content="#ffffff" />
          
          {{#slot seo-head}}{{/slot}}
        </Head>

        <div className={pageStyles} {...props}>
          {{#slot page-header}}
          <header role="banner">
            {{>header}}
          </header>
          {{/slot}}

          <main role="main" id="main-content">
            <Container maxWidth="7xl" className="py-8">
              <Stack spacing="lg">
                {{#slot page-content}}
                {children}
                {{/slot}}
              </Stack>
            </Container>
          </main>

          {{#slot page-footer}}
          <footer role="contentinfo">
            {{>footer}}
          </footer>
          {{/slot}}
        </div>
        
        {{>mixins}}
      </>
    );
  } catch (error) {
    console.error(`${componentName} page render error:`, error);
    return (
      <div className="min-h-screen flex items-center justify-center bg-destructive/10">
        <Container maxWidth="md" className="text-center">
          <h1 className="text-2xl font-bold text-destructive mb-4">
            Page Loading Error
          </h1>
          <p className="text-destructive/80">
            Unable to load {{componentName}} page. Please try again later.
          </p>
        </Container>
      </div>
    );
  }
};

{{#slot helpers}}
// Page-specific helper functions
export const generateStructuredData = (props: {{componentName}}Props) => {
  return {
    "@context": "https://schema.org",
    "@type": "WebPage",
    "name": props.title,
    "description": props.description,
    "url": props.canonicalUrl,
    "inLanguage": "nb-NO",
    "isAccessibleForFree": true
  };
};
{{/slot}}

{{componentName}}.displayName = '{{componentName}}';

export type { {{componentName}}Props };