# {{modelName}} API Documentation

Generated by Xaheen CLI Controller Generator

## Overview

This document describes the REST API endpoints for the {{modelName}} resource.

**Base URL:** `/api/{{name}}`

**Authentication:** Bearer Token (JWT)

**Content Type:** `application/json`

## Endpoints

{{#each actions}}
{{#if (eq name 'index')}}
### GET /api/{{../name}}

Get all {{../name}}s with optional filtering and pagination.

**Parameters:**
- `page` (query, optional): Page number (default: 1)
- `limit` (query, optional): Items per page (default: 10, max: 100)
- `sortBy` (query, optional): Field to sort by (default: createdAt)
- `sortOrder` (query, optional): Sort order - asc|desc (default: desc)
- `search` (query, optional): Search query string

**Response (200):**
```json
{
  "success": true,
  "data": {
    "data": [
      {
        "id": "uuid",
        "name": "string",
        "createdAt": "2023-01-01T00:00:00.000Z",
        "updatedAt": "2023-01-01T00:00:00.000Z"
      }
    ],
    "total": 100,
    "page": 1,
    "limit": 10,
    "hasNext": true,
    "hasPrev": false
  },
  "message": "Items retrieved successfully"
}
```

**Example Request:**
```bash
GET /api/{{../name}}?page=1&limit=20&sortBy=name&sortOrder=asc&search=test
Authorization: Bearer <token>
```
{{else if (eq name 'show')}}

### GET /api/{{../name}}/:id

Get a specific {{../name}} by ID.

**Parameters:**
- `id` (path, required): {{../modelName}} ID (UUID format)

**Response (200):**
```json
{
  "success": true,
  "data": {
    "id": "uuid",
    "name": "string",
    "createdAt": "2023-01-01T00:00:00.000Z",
    "updatedAt": "2023-01-01T00:00:00.000Z"
  },
  "message": "{{../modelName}} retrieved successfully"
}
```

**Response (404):**
```json
{
  "success": false,
  "error": "{{../modelName}} not found"
}
```

**Example Request:**
```bash
GET /api/{{../name}}/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer <token>
```
{{else if (eq name 'create')}}

### POST /api/{{../name}}

Create a new {{../name}}.

**Request Body:**
```json
{
  "name": "string"
  // Add other required fields based on your model
}
```

**Response (201):**
```json
{
  "success": true,
  "data": {
    "id": "uuid",
    "name": "string",
    "createdAt": "2023-01-01T00:00:00.000Z",
    "updatedAt": "2023-01-01T00:00:00.000Z"
  },
  "message": "{{../modelName}} created successfully"
}
```

**Response (400):**
```json
{
  "success": false,
  "error": "Validation error message"
}
```

**Example Request:**
```bash
POST /api/{{../name}}
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "New {{../modelName}}"
}
```
{{else if (eq name 'update')}}

### PUT /api/{{../name}}/:id

Update an existing {{../name}}.

**Parameters:**
- `id` (path, required): {{../modelName}} ID (UUID format)

**Request Body:**
```json
{
  "name": "string"
  // Add other fields that can be updated
}
```

**Response (200):**
```json
{
  "success": true,
  "data": {
    "id": "uuid",
    "name": "string",
    "createdAt": "2023-01-01T00:00:00.000Z",
    "updatedAt": "2023-01-01T00:00:00.000Z"
  },
  "message": "{{../modelName}} updated successfully"
}
```

**Response (404):**
```json
{
  "success": false,
  "error": "{{../modelName}} not found"
}
```

**Example Request:**
```bash
PUT /api/{{../name}}/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "Updated {{../modelName}}"
}
```
{{else if (eq name 'destroy')}}

### DELETE /api/{{../name}}/:id

Delete a {{../name}} by ID.

**Parameters:**
- `id` (path, required): {{../modelName}} ID (UUID format)

**Response (200):**
```json
{
  "success": true,
  "data": null,
  "message": "{{../modelName}} deleted successfully"
}
```

**Response (404):**
```json
{
  "success": false,
  "error": "{{../modelName}} not found"
}
```

**Example Request:**
```bash
DELETE /api/{{../name}}/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer <token>
```
{{else}}

### {{toUpperCase method}} /api/{{../name}}/{{name}}

{{description}}.

**Response (200):**
```json
{
  "success": true,
  "message": "{{name}} action executed"
}
```

**Example Request:**
```bash
{{toUpperCase method}} /api/{{../name}}/{{name}}
Authorization: Bearer <token>
```
{{/if}}

{{/each}}

### GET /api/{{name}}/health

Health check endpoint for the {{modelName}} controller.

**Response (200):**
```json
{
  "success": true,
  "data": {
    "status": "healthy",
    "timestamp": "2023-01-01T00:00:00.000Z",
    "service": "{{className}}"
  },
  "message": "Controller is healthy"
}
```

### GET /api/{{name}}/stats

Get statistics for the {{modelName}} resource.

**Response (200):**
```json
{
  "success": true,
  "data": {
    "total": 100,
    "active": 90,
    "inactive": 10
  },
  "message": "Statistics retrieved successfully"
}
```

## Error Responses

All endpoints may return the following error responses:

### 400 Bad Request
```json
{
  "success": false,
  "error": "Validation error message"
}
```

### 401 Unauthorized
```json
{
  "success": false,
  "error": "Unauthorized - Invalid or missing token"
}
```

### 403 Forbidden
```json
{
  "success": false,
  "error": "Forbidden - Insufficient permissions"
}
```

### 404 Not Found
```json
{
  "success": false,
  "error": "Resource not found"
}
```

### 500 Internal Server Error
```json
{
  "success": false,
  "error": "Internal server error"
}
```

## Rate Limiting

- **POST** endpoints: 100 requests per minute per IP
- **GET** endpoints: 1000 requests per minute per IP
- **PUT/DELETE** endpoints: 200 requests per minute per IP

## Authentication

All endpoints require a valid JWT token in the Authorization header:

```
Authorization: Bearer <your-jwt-token>
```

## Pagination

List endpoints (`GET /api/{{name}}`) support pagination:

- `page`: Page number (starts from 1)
- `limit`: Number of items per page (1-100)
- `sortBy`: Field to sort by
- `sortOrder`: `asc` or `desc`

## Filtering and Search

The list endpoint supports filtering and search:

- `search`: Full-text search across multiple fields
- Individual field filters can be added as query parameters

## Data Validation

{{#if validation}}
Request data is validated using Zod schemas. Common validation rules:

- Required fields must be provided
- Email fields must be valid email addresses
- String fields have minimum/maximum length requirements
- Numeric fields have range validations
- UUID fields must be valid UUID format
{{else}}
Basic data validation is applied. For production use, consider implementing comprehensive validation schemas.
{{/if}}

## Examples

### Create, Read, Update, Delete Flow

```bash
# 1. Create a new {{name}}
POST /api/{{name}}
{
  "name": "Test {{modelName}}"
}

# Response: { "success": true, "data": { "id": "abc-123", ... } }

# 2. Get the created {{name}}
GET /api/{{name}}/abc-123

# 3. Update the {{name}}
PUT /api/{{name}}/abc-123
{
  "name": "Updated {{modelName}}"
}

# 4. List all {{name}}s
GET /api/{{name}}?page=1&limit=10

# 5. Delete the {{name}}
DELETE /api/{{name}}/abc-123
```

## SDK and Client Libraries

Consider generating client libraries for your API using tools like:

- OpenAPI Generator
- Swagger Codegen
- Custom SDK generators

## Testing

Use tools like Postman, Insomnia, or curl to test the API endpoints. Example Postman collection can be generated from this documentation.

## Support

For issues or questions about this API, please refer to the project documentation or contact the development team.