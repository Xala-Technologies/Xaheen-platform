/**
 * {{className}} - Fastify Controller
 *
 * Generated by Xaheen CLI Controller Generator
 * @since {{generatedAt}}
 */

import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import { {{serviceName}} } from '../services/{{name}}.service.js';
{{#if validation}}
import {
  create{{modelName}}Schema,
  update{{modelName}}Schema,
  {{name}}QuerySchema,
  {{name}}ParamsSchema,
} from '../schemas/{{name}}.schema.js';
{{/if}}

/**
 * {{className}} - Fastify Route Handler
 * 
 * Provides HTTP endpoints for {{modelName}} operations using Fastify.
 * Includes built-in validation, serialization, and error handling.
 */
export class {{className}} {
  constructor(
    private readonly {{camelCase serviceName}}: {{serviceName}},
  ) {}

  /**
   * Register all routes for this controller
   */
  async registerRoutes(fastify: FastifyInstance): Promise<void> {
    {{#each actions}}
    {{#if (eq name 'index')}}
    // GET /api/{{../name}} - Get all {{../name}}s
    fastify.get('/api/{{../name}}', {
      {{#if ../validation}}
      schema: {
        querystring: {{../name}}QuerySchema,
        response: {
          200: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              data: {
                type: 'object',
                properties: {
                  data: { type: 'array' },
                  total: { type: 'number' },
                  page: { type: 'number' },
                  limit: { type: 'number' },
                  hasNext: { type: 'boolean' },
                  hasPrev: { type: 'boolean' },
                },
              },
              message: { type: 'string' },
            },
          },
        },
      },
      {{/if}}
      preHandler: [
        // Add middleware/hooks here
      ],
    }, this.findAll.bind(this));
    {{else if (eq name 'show')}}

    // GET /api/{{../name}}/:id - Get {{../name}} by ID
    fastify.get('/api/{{../name}}/:id', {
      {{#if ../validation}}
      schema: {
        params: {{../name}}ParamsSchema,
        response: {
          200: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              data: { type: 'object' },
              message: { type: 'string' },
            },
          },
          404: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              error: { type: 'string' },
            },
          },
        },
      },
      {{/if}}
    }, this.findOne.bind(this));
    {{else if (eq name 'create')}}

    // POST /api/{{../name}} - Create new {{../name}}
    fastify.post('/api/{{../name}}', {
      {{#if ../validation}}
      schema: {
        body: create{{../modelName}}Schema,
        response: {
          201: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              data: { type: 'object' },
              message: { type: 'string' },
            },
          },
          400: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              error: { type: 'string' },
            },
          },
        },
      },
      {{/if}}
    }, this.create.bind(this));
    {{else if (eq name 'update')}}

    // PUT /api/{{../name}}/:id - Update {{../name}} by ID
    fastify.put('/api/{{../name}}/:id', {
      {{#if ../validation}}
      schema: {
        params: {{../name}}ParamsSchema,
        body: update{{../modelName}}Schema,
        response: {
          200: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              data: { type: 'object' },
              message: { type: 'string' },
            },
          },
          404: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              error: { type: 'string' },
            },
          },
        },
      },
      {{/if}}
    }, this.update.bind(this));
    {{else if (eq name 'destroy')}}

    // DELETE /api/{{../name}}/:id - Delete {{../name}} by ID
    fastify.delete('/api/{{../name}}/:id', {
      {{#if ../validation}}
      schema: {
        params: {{../name}}ParamsSchema,
        response: {
          200: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              message: { type: 'string' },
            },
          },
          404: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              error: { type: 'string' },
            },
          },
        },
      },
      {{/if}}
    }, this.remove.bind(this));
    {{else}}

    // Custom route for {{name}} action
    fastify.get('/api/{{../name}}/{{name}}', {
      schema: {
        response: {
          200: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              message: { type: 'string' },
            },
          },
        },
      },
    }, this.{{name}}.bind(this));
    {{/if}}
    {{/each}}

    // Health check endpoint
    fastify.get('/api/{{name}}/health', {
      schema: {
        response: {
          200: {
            type: 'object',
            properties: {
              success: { type: 'boolean' },
              data: {
                type: 'object',
                properties: {
                  status: { type: 'string' },
                  timestamp: { type: 'string' },
                  service: { type: 'string' },
                },
              },
            },
          },
        },
      },
    }, this.health.bind(this));

    // Statistics endpoint
    fastify.get('/api/{{name}}/stats', this.stats.bind(this));
  }

{{#each actions}}
  {{#if (eq name 'index')}}
  /**
   * Get all {{../name}}s with pagination and filtering
   */
  async findAll(
    request: FastifyRequest<{ Querystring: any }>,
    reply: FastifyReply,
  ): Promise<void> {
    try {
      const result = await this.{{../camelCase serviceName}}.findMany(request.query);
      
      reply.status(200).send({
        success: true,
        data: result,
        message: 'Items retrieved successfully',
      });
    } catch (error) {
      reply.status(500).send({
        success: false,
        error: 'Failed to retrieve items',
      });
    }
  }
  {{else if (eq name 'show')}}

  /**
   * Get {{../name}} by ID
   */
  async findOne(
    request: FastifyRequest<{ Params: { id: string } }>,
    reply: FastifyReply,
  ): Promise<void> {
    try {
      const { id } = request.params;
      const {{../camelCase name}} = await this.{{../camelCase serviceName}}.findById(id);

      if (!{{../camelCase name}}) {
        return reply.status(404).send({
          success: false,
          error: '{{../modelName}} not found',
        });
      }

      reply.status(200).send({
        success: true,
        data: {{../camelCase name}},
        message: '{{../modelName}} retrieved successfully',
      });
    } catch (error) {
      reply.status(500).send({
        success: false,
        error: 'Failed to retrieve {{../name}}',
      });
    }
  }
  {{else if (eq name 'create')}}

  /**
   * Create new {{../name}}
   */
  async create(
    request: FastifyRequest<{ Body: any }>,
    reply: FastifyReply,
  ): Promise<void> {
    try {
      const {{../camelCase name}} = await this.{{../camelCase serviceName}}.create(request.body);

      reply.status(201).send({
        success: true,
        data: {{../camelCase name}},
        message: '{{../modelName}} created successfully',
      });
    } catch (error) {
      reply.status(400).send({
        success: false,
        error: 'Failed to create {{../name}}',
      });
    }
  }
  {{else if (eq name 'update')}}

  /**
   * Update {{../name}} by ID
   */
  async update(
    request: FastifyRequest<{ Params: { id: string }; Body: any }>,
    reply: FastifyReply,
  ): Promise<void> {
    try {
      const { id } = request.params;
      const {{../camelCase name}} = await this.{{../camelCase serviceName}}.update(id, request.body);

      if (!{{../camelCase name}}) {
        return reply.status(404).send({
          success: false,
          error: '{{../modelName}} not found',
        });
      }

      reply.status(200).send({
        success: true,
        data: {{../camelCase name}},
        message: '{{../modelName}} updated successfully',
      });
    } catch (error) {
      reply.status(400).send({
        success: false,
        error: 'Failed to update {{../name}}',
      });
    }
  }
  {{else if (eq name 'destroy')}}

  /**
   * Delete {{../name}} by ID
   */
  async remove(
    request: FastifyRequest<{ Params: { id: string } }>,
    reply: FastifyReply,
  ): Promise<void> {
    try {
      const { id } = request.params;
      const deleted = await this.{{../camelCase serviceName}}.delete(id);

      if (!deleted) {
        return reply.status(404).send({
          success: false,
          error: '{{../modelName}} not found',
        });
      }

      reply.status(200).send({
        success: true,
        message: '{{../modelName}} deleted successfully',
      });
    } catch (error) {
      reply.status(500).send({
        success: false,
        error: 'Failed to delete {{../name}}',
      });
    }
  }
  {{else}}

  /**
   * {{description}}
   */
  async {{name}}(
    request: FastifyRequest,
    reply: FastifyReply,
  ): Promise<void> {
    try {
      // TODO: Implement {{name}} action logic
      reply.status(200).send({
        success: true,
        message: '{{name}} action executed',
      });
    } catch (error) {
      reply.status(500).send({
        success: false,
        error: 'Failed to execute {{name}} action',
      });
    }
  }
  {{/if}}
{{/each}}

  /**
   * Health check endpoint
   */
  async health(request: FastifyRequest, reply: FastifyReply): Promise<void> {
    reply.status(200).send({
      success: true,
      data: {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        service: '{{className}}',
      },
    });
  }

  /**
   * Get controller statistics
   */
  async stats(request: FastifyRequest, reply: FastifyReply): Promise<void> {
    try {
      const stats = await this.{{camelCase serviceName}}.getStats();
      reply.status(200).send({
        success: true,
        data: stats,
        message: 'Statistics retrieved successfully',
      });
    } catch (error) {
      reply.status(500).send({
        success: false,
        error: 'Failed to retrieve statistics',
      });
    }
  }
}

/**
 * Create and export controller instance
 */
const {{camelCase serviceName}} = new {{serviceName}}();
export const {{camelCase name}}Controller = new {{className}}({{camelCase serviceName}});