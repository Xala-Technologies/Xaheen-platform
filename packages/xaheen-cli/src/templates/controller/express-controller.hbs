/**
 * {{className}} - Express Controller
 *
 * Generated by Xaheen CLI Controller Generator
 * @since {{generatedAt}}
 */

import { Request, Response, NextFunction } from 'express';
import { {{serviceName}} } from '../services/{{name}}.service.js';
{{#if validation}}
import { validate{{modelName}} } from '../validation/{{name}}.validation.js';
{{/if}}
import { AppError } from '../utils/app-error.js';
import { catchAsync } from '../utils/catch-async.js';
import { successResponse, errorResponse } from '../utils/response.js';

/**
 * {{className}} - Express REST API Controller
 * 
 * Provides HTTP endpoints for {{modelName}} operations.
 * Follows RESTful conventions and includes proper error handling.
 */
export class {{className}} {
  constructor(
    private readonly {{camelCase serviceName}}: {{serviceName}},
  ) {}

{{#each actions}}
  /**
   * {{description}}
   * {{method}} {{../name}}{{path}}
   */
  {{name}} = catchAsync(async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    {{#if (eq name 'index')}}
    // Get query parameters with defaults
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    const sortBy = req.query.sortBy as string || 'createdAt';
    const sortOrder = (req.query.sortOrder as string) || 'desc';
    const search = req.query.search as string;

    // Build filters from query parameters
    const filters: any = {};
    if (search) {
      // Add search logic based on your model fields
      filters.search = search;
    }

    const result = await this.{{../camelCase serviceName}}.findMany({
      page,
      limit,
      sortBy,
      sortOrder: sortOrder as 'asc' | 'desc',
      filters,
    });

    res.status(200).json(successResponse(result, 'Items retrieved successfully'));
    {{else if (eq name 'show')}}
    const { id } = req.params;

    {{#if ../validation}}
    // Validate ID parameter
    const validatedId = validate{{../modelName}}.id({ id });
    {{/if}}

    const {{../camelCase name}} = await this.{{../camelCase serviceName}}.findById({{#if ../validation}}validatedId.id{{else}}id{{/if}});

    if (!{{../camelCase name}}) {
      return next(new AppError('{{../modelName}} not found', 404));
    }

    res.status(200).json(successResponse({{../camelCase name}}, '{{../modelName}} retrieved successfully'));
    {{else if (eq name 'create')}}
    {{#if ../validation}}
    // Validate request body
    const validatedData = validate{{../modelName}}.create(req.body);
    {{/if}}

    const {{../camelCase name}} = await this.{{../camelCase serviceName}}.create({{#if ../validation}}validatedData{{else}}req.body{{/if}});

    res.status(201).json(successResponse({{../camelCase name}}, '{{../modelName}} created successfully'));
    {{else if (eq name 'update')}}
    const { id } = req.params;

    {{#if ../validation}}
    // Validate ID parameter and request body
    const validatedId = validate{{../modelName}}.id({ id });
    const validatedData = validate{{../modelName}}.update(req.body);
    {{/if}}

    const {{../camelCase name}} = await this.{{../camelCase serviceName}}.update(
      {{#if ../validation}}validatedId.id{{else}}id{{/if}},
      {{#if ../validation}}validatedData{{else}}req.body{{/if}}
    );

    if (!{{../camelCase name}}) {
      return next(new AppError('{{../modelName}} not found', 404));
    }

    res.status(200).json(successResponse({{../camelCase name}}, '{{../modelName}} updated successfully'));
    {{else if (eq name 'destroy')}}
    const { id } = req.params;

    {{#if ../validation}}
    // Validate ID parameter
    const validatedId = validate{{../modelName}}.id({ id });
    {{/if}}

    const deleted = await this.{{../camelCase serviceName}}.delete({{#if ../validation}}validatedId.id{{else}}id{{/if}});

    if (!deleted) {
      return next(new AppError('{{../modelName}} not found', 404));
    }

    res.status(200).json(successResponse(null, '{{../modelName}} deleted successfully'));
    {{else}}
    // Custom action implementation
    // TODO: Implement {{name}} action logic
    res.status(200).json(successResponse(null, '{{name}} action executed'));
    {{/if}}
  });

{{/each}}
  /**
   * Health check endpoint
   */
  health = catchAsync(async (req: Request, res: Response): Promise<void> => {
    res.status(200).json(successResponse({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      service: '{{className}}',
    }, 'Controller is healthy'));
  });

  /**
   * Get controller statistics
   */
  stats = catchAsync(async (req: Request, res: Response): Promise<void> => {
    const stats = await this.{{camelCase serviceName}}.getStats();
    res.status(200).json(successResponse(stats, 'Statistics retrieved successfully'));
  });
}

/**
 * Create and export controller instance
 */
const {{camelCase serviceName}} = new {{serviceName}}();
export const {{camelCase name}}Controller = new {{className}}({{camelCase serviceName}});