/**
 * {{className}} Tests
 *
 * Generated by Xaheen CLI Controller Generator
 * @since {{generatedAt}}
 */

import { describe, it, expect, beforeEach, afterEach, vi, Mock } from 'vitest';
import { {{className}} } from '../{{name}}.controller.js';
import { {{serviceName}} } from '../../services/{{name}}.service.js';

// Mock the service
vi.mock('../../services/{{name}}.service.js');

describe('{{className}}', () => {
  let controller: {{className}};
  let mockService: {
    findMany: Mock;
    findById: Mock;
    create: Mock;
    update: Mock;
    delete: Mock;
    getStats: Mock;
  };

  beforeEach(() => {
    // Create mock service instance
    mockService = {
      findMany: vi.fn(),
      findById: vi.fn(),
      create: vi.fn(),
      update: vi.fn(),
      delete: vi.fn(),
      getStats: vi.fn(),
    };

    // Create controller instance with mocked service
    controller = new {{className}}(mockService as any);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  {{#each actions}}
  {{#if (eq name 'index')}}
  describe('findAll / index', () => {
    it('should return paginated list of {{../name}}s', async () => {
      // Arrange
      const mockResult = {
        data: [
          { id: '1', name: 'Test {{../modelName}} 1' },
          { id: '2', name: 'Test {{../modelName}} 2' },
        ],
        total: 2,
        page: 1,
        limit: 10,
        hasNext: false,
        hasPrev: false,
      };
      
      mockService.findMany.mockResolvedValue(mockResult);

      const mockReq = {
        query: { page: '1', limit: '10' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.index(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockService.findMany).toHaveBeenCalledWith({
        page: 1,
        limit: 10,
        sortBy: 'createdAt',
        sortOrder: 'desc',
        filters: {},
      });
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: mockResult,
        message: 'Items retrieved successfully',
      });
    });

    it('should handle search query parameter', async () => {
      // Arrange
      const mockResult = {
        data: [],
        total: 0,
        page: 1,
        limit: 10,
        hasNext: false,
        hasPrev: false,
      };
      
      mockService.findMany.mockResolvedValue(mockResult);

      const mockReq = {
        query: { search: 'test search' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.index(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockService.findMany).toHaveBeenCalledWith({
        page: 1,
        limit: 10,
        sortBy: 'createdAt',
        sortOrder: 'desc',
        filters: { search: 'test search' },
      });
    });
  });
  {{else if (eq name 'show')}}

  describe('findOne / show', () => {
    it('should return {{../name}} by ID', async () => {
      // Arrange
      const mockItem = { id: '123', name: 'Test {{../modelName}}' };
      mockService.findById.mockResolvedValue(mockItem);

      const mockReq = {
        params: { id: '123' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.show(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockService.findById).toHaveBeenCalledWith('123');
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: mockItem,
        message: '{{../modelName}} retrieved successfully',
      });
    });

    it('should return 404 when {{../name}} not found', async () => {
      // Arrange
      mockService.findById.mockResolvedValue(null);

      const mockReq = {
        params: { id: '123' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.show(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockNext).toHaveBeenCalledWith(
        expect.objectContaining({
          message: '{{../modelName}} not found',
          statusCode: 404,
        })
      );
    });
  });
  {{else if (eq name 'create')}}

  describe('create', () => {
    it('should create new {{../name}}', async () => {
      // Arrange
      const createData = { name: 'New {{../modelName}}' };
      const mockCreated = { id: '123', ...createData };
      mockService.create.mockResolvedValue(mockCreated);

      const mockReq = {
        body: createData,
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.create(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockService.create).toHaveBeenCalledWith(createData);
      expect(mockRes.status).toHaveBeenCalledWith(201);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: mockCreated,
        message: '{{../modelName}} created successfully',
      });
    });
  });
  {{else if (eq name 'update')}}

  describe('update', () => {
    it('should update {{../name}} by ID', async () => {
      // Arrange
      const updateData = { name: 'Updated {{../modelName}}' };
      const mockUpdated = { id: '123', ...updateData };
      mockService.update.mockResolvedValue(mockUpdated);

      const mockReq = {
        params: { id: '123' },
        body: updateData,
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.update(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockService.update).toHaveBeenCalledWith('123', updateData);
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: mockUpdated,
        message: '{{../modelName}} updated successfully',
      });
    });

    it('should return 404 when {{../name}} not found for update', async () => {
      // Arrange
      mockService.update.mockResolvedValue(null);

      const mockReq = {
        params: { id: '123' },
        body: { name: 'Updated {{../modelName}}' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.update(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockNext).toHaveBeenCalledWith(
        expect.objectContaining({
          message: '{{../modelName}} not found',
          statusCode: 404,
        })
      );
    });
  });
  {{else if (eq name 'destroy')}}

  describe('destroy / remove', () => {
    it('should delete {{../name}} by ID', async () => {
      // Arrange
      mockService.delete.mockResolvedValue(true);

      const mockReq = {
        params: { id: '123' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.destroy(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockService.delete).toHaveBeenCalledWith('123');
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: null,
        message: '{{../modelName}} deleted successfully',
      });
    });

    it('should return 404 when {{../name}} not found for deletion', async () => {
      // Arrange
      mockService.delete.mockResolvedValue(false);

      const mockReq = {
        params: { id: '123' },
      };
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };
      const mockNext = vi.fn();

      // Act
      await controller.destroy(mockReq as any, mockRes as any, mockNext);

      // Assert
      expect(mockNext).toHaveBeenCalledWith(
        expect.objectContaining({
          message: '{{../modelName}} not found',
          statusCode: 404,
        })
      );
    });
  });
  {{/if}}
  {{/each}}

  describe('health', () => {
    it('should return health status', async () => {
      // Arrange
      const mockReq = {};
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };

      // Act
      await controller.health(mockReq as any, mockRes as any);

      // Assert
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: {
          status: 'healthy',
          timestamp: expect.any(String),
          service: '{{className}}',
        },
        message: 'Controller is healthy',
      });
    });
  });

  describe('stats', () => {
    it('should return statistics', async () => {
      // Arrange
      const mockStats = { count: 10, active: 8 };
      mockService.getStats.mockResolvedValue(mockStats);

      const mockReq = {};
      const mockRes = {
        status: vi.fn().mockReturnThis(),
        json: vi.fn(),
      };

      // Act
      await controller.stats(mockReq as any, mockRes as any);

      // Assert
      expect(mockService.getStats).toHaveBeenCalled();
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        data: mockStats,
        message: 'Statistics retrieved successfully',
      });
    });
  });
});