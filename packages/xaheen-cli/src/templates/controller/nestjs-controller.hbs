/**
 * {{className}} - NestJS Controller
 *
 * Generated by Xaheen CLI Controller Generator
 * @since {{generatedAt}}
 */

import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpStatus,
  HttpCode,
  UseGuards,
  UseInterceptors,
  ParseUUIDPipe,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { {{serviceName}} } from '../services/{{name}}.service.js';
{{#if validation}}
import {
  Create{{modelName}}Dto,
  Update{{modelName}}Dto,
  {{modelName}}QueryDto,
} from '../dto/{{name}}.dto.js';
{{/if}}
import { JwtAuthGuard } from '../guards/jwt-auth.guard.js';
import { LoggingInterceptor } from '../interceptors/logging.interceptor.js';
import { TransformInterceptor } from '../interceptors/transform.interceptor.js';
import { {{modelName}}Entity } from '../entities/{{name}}.entity.js';

@ApiTags('{{name}}')
@Controller('{{name}}')
@UseGuards(JwtAuthGuard)
@UseInterceptors(LoggingInterceptor, TransformInterceptor)
@ApiBearerAuth()
export class {{className}} {
  constructor(
    private readonly {{camelCase serviceName}}: {{serviceName}},
  ) {}

{{#each actions}}
  {{#if (eq name 'index')}}
  @Get()
  @ApiOperation({ summary: 'Get all {{../name}}s' })
  @ApiResponse({
    status: 200,
    description: 'List of {{../name}}s retrieved successfully',
    type: [{{../modelName}}Entity],
  })
  @ApiQuery({ name: 'page', required: false, type: Number })
  @ApiQuery({ name: 'limit', required: false, type: Number })
  @ApiQuery({ name: 'sortBy', required: false, type: String })
  @ApiQuery({ name: 'sortOrder', required: false, enum: ['asc', 'desc'] })
  @ApiQuery({ name: 'search', required: false, type: String })
  async findAll(
    {{#if ../validation}}@Query() query: {{../modelName}}QueryDto{{else}}@Query() query: any{{/if}},
  ) {
    return await this.{{../camelCase serviceName}}.findMany(query);
  }
  {{else if (eq name 'show')}}

  @Get(':id')
  @ApiOperation({ summary: 'Get {{../name}} by ID' })
  @ApiParam({ name: 'id', type: 'string', format: 'uuid' })
  @ApiResponse({
    status: 200,
    description: '{{../modelName}} retrieved successfully',
    type: {{../modelName}}Entity,
  })
  @ApiResponse({ status: 404, description: '{{../modelName}} not found' })
  async findOne(@Param('id', ParseUUIDPipe) id: string) {
    return await this.{{../camelCase serviceName}}.findById(id);
  }
  {{else if (eq name 'create')}}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ summary: 'Create new {{../name}}' })
  @ApiResponse({
    status: 201,
    description: '{{../modelName}} created successfully',
    type: {{../modelName}}Entity,
  })
  @ApiResponse({ status: 400, description: 'Bad request' })
  async create(
    {{#if ../validation}}@Body() createDto: Create{{../modelName}}Dto{{else}}@Body() createData: any{{/if}},
  ) {
    return await this.{{../camelCase serviceName}}.create({{#if ../validation}}createDto{{else}}createData{{/if}});
  }
  {{else if (eq name 'update')}}

  @Put(':id')
  @ApiOperation({ summary: 'Update {{../name}} by ID' })
  @ApiParam({ name: 'id', type: 'string', format: 'uuid' })
  @ApiResponse({
    status: 200,
    description: '{{../modelName}} updated successfully',
    type: {{../modelName}}Entity,
  })
  @ApiResponse({ status: 404, description: '{{../modelName}} not found' })
  @ApiResponse({ status: 400, description: 'Bad request' })
  async update(
    @Param('id', ParseUUIDPipe) id: string,
    {{#if ../validation}}@Body() updateDto: Update{{../modelName}}Dto{{else}}@Body() updateData: any{{/if}},
  ) {
    return await this.{{../camelCase serviceName}}.update(id, {{#if ../validation}}updateDto{{else}}updateData{{/if}});
  }
  {{else if (eq name 'destroy')}}

  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({ summary: 'Delete {{../name}} by ID' })
  @ApiParam({ name: 'id', type: 'string', format: 'uuid' })
  @ApiResponse({ status: 204, description: '{{../modelName}} deleted successfully' })
  @ApiResponse({ status: 404, description: '{{../modelName}} not found' })
  async remove(@Param('id', ParseUUIDPipe) id: string) {
    return await this.{{../camelCase serviceName}}.delete(id);
  }
  {{else}}

  @Get('{{name}}')
  @ApiOperation({ summary: '{{description}}' })
  @ApiResponse({ status: 200, description: '{{name}} action executed successfully' })
  async {{name}}() {
    // TODO: Implement {{name}} action logic
    return { message: '{{name}} action executed' };
  }
  {{/if}}
{{/each}}

  @Get('health')
  @ApiOperation({ summary: 'Health check' })
  @ApiResponse({ status: 200, description: 'Controller health status' })
  async health() {
    return {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      service: '{{className}}',
    };
  }

  @Get('stats')
  @ApiOperation({ summary: 'Get statistics' })
  @ApiResponse({ status: 200, description: 'Statistics retrieved successfully' })
  async stats() {
    return await this.{{camelCase serviceName}}.getStats();
  }
}