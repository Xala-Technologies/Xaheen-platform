#================================
# VARIABLES FOR GCP INFRASTRUCTURE
# Generated by Xaheen CLI - Infrastructure Specialist
#================================

variable "project_id" {
  description = "The GCP project ID"
  type        = string
  validation {
    condition     = can(regex("^[a-z][a-z0-9-]{4,28}[a-z0-9]$", var.project_id))
    error_message = "Project ID must be 6-30 characters, start with a letter, and contain only lowercase letters, numbers, and hyphens."
  }
}

variable "region" {
  description = "The GCP region for regional resources"
  type        = string
  default     = "{{region}}"
  validation {
    condition = contains([
      "us-central1", "us-east1", "us-east4", "us-west1", "us-west2", "us-west3", "us-west4",
      "europe-north1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west6",
      "asia-east1", "asia-east2", "asia-northeast1", "asia-northeast2", "asia-northeast3",
      "asia-south1", "asia-south2", "asia-southeast1", "asia-southeast2"
    ], var.region)
    error_message = "Region must be a valid GCP region."
  }
}

variable "zone" {
  description = "The GCP zone for zonal resources"
  type        = string
  default     = "{{zone}}"
}

variable "environment" {
  description = "Environment name (dev, staging, prod)"
  type        = string
  default     = "{{environment}}"
  validation {
    condition     = contains(["dev", "staging", "prod"], var.environment)
    error_message = "Environment must be one of: dev, staging, prod."
  }
}

variable "cost_center" {
  description = "Cost center for billing and resource allocation"
  type        = string
  default     = "{{costCenter}}"
}

variable "team" {
  description = "Team responsible for the infrastructure"
  type        = string
  default     = "{{team}}"
}

variable "compliance_level" {
  description = "Compliance level (basic, enhanced, strict)"
  type        = string
  default     = "{{complianceLevel}}"
  validation {
    condition     = contains(["basic", "enhanced", "strict"], var.compliance_level)
    error_message = "Compliance level must be one of: basic, enhanced, strict."
  }
}

#================================
# STORAGE CONFIGURATION
#================================

variable "storage_location" {
  description = "Location for Cloud Storage buckets"
  type        = string
  default     = "{{storageLocation}}"
}

variable "enable_versioning" {
  description = "Enable versioning on storage buckets"
  type        = bool
  default     = {{enableVersioning}}
}

variable "enable_public_access" {
  description = "Enable public access to storage buckets"
  type        = bool
  default     = {{enablePublicAccess}}
}

variable "retention_policy_seconds" {
  description = "Retention policy for storage buckets in seconds"
  type        = number
  default     = {{retentionPolicySeconds}}
}

variable "storage_lifecycle_rules" {
  description = "Lifecycle rules for main storage bucket"
  type = list(object({
    age                   = optional(number)
    created_before        = optional(string)
    with_state           = optional(string)
    matches_storage_class = optional(list(string))
    num_newer_versions   = optional(number)
    action_type          = string
    storage_class        = optional(string)
  }))
  default = [
    {
      age           = 30
      action_type   = "SetStorageClass"
      storage_class = "NEARLINE"
    },
    {
      age           = 90
      action_type   = "SetStorageClass"
      storage_class = "COLDLINE"
    },
    {
      age           = 365
      action_type   = "SetStorageClass"
      storage_class = "ARCHIVE"
    },
    {
      age         = {{dataRetentionDays}}
      action_type = "Delete"
    }
  ]
}

variable "storage_buckets" {
  description = "Additional storage buckets configuration"
  type = map(object({
    versioning     = bool
    public_access  = bool
    cors_origins   = list(string)
    lifecycle_rules = list(object({
      age           = number
      action        = string
      storage_class = optional(string)
    }))
  }))
  default = {
    {{#each storageBuckets}}
    "{{name}}" = {
      versioning     = {{versioning}}
      public_access  = {{publicAccess}}
      cors_origins   = [{{#each corsOrigins}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]
      lifecycle_rules = [
        {{#each lifecycleRules}}
        {
          age           = {{age}}
          action        = "{{action}}"
          {{#if storageClass}}storage_class = "{{storageClass}}"{{/if}}
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ]
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

variable "cors_origins" {
  description = "CORS origins for storage buckets"
  type        = list(string)
  default     = [{{#each corsOrigins}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]
}

#================================
# FIRESTORE CONFIGURATION
#================================

variable "firestore_location" {
  description = "Location for Firestore database"
  type        = string
  default     = "{{firestoreLocation}}"
}

variable "enable_firestore_pitr" {
  description = "Enable Point-in-Time Recovery for Firestore"
  type        = bool
  default     = {{enableFirestorePitr}}
}

variable "firestore_collections" {
  description = "Firestore collections configuration"
  type = map(object({
    description = string
    fields = list(object({
      name = string
      type = string
    }))
  }))
  default = {
    {{#each firestoreCollections}}
    "{{name}}" = {
      description = "{{description}}"
      fields = [
        {{#each fields}}
        {
          name = "{{name}}"
          type = "{{type}}"
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ]
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

variable "firestore_indexes" {
  description = "Firestore composite indexes"
  type = map(object({
    collection   = string
    query_scope  = string
    fields = list(object({
      field_path = string
      order      = string
    }))
  }))
  default = {
    {{#each firestoreIndexes}}
    "{{name}}" = {
      collection  = "{{collection}}"
      query_scope = "{{queryScope}}"
      fields = [
        {{#each fields}}
        {
          field_path = "{{fieldPath}}"
          order      = "{{order}}"
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ]
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

#================================
# PUB/SUB CONFIGURATION
#================================

variable "pubsub_topics" {
  description = "Pub/Sub topics configuration"
  type = map(object({
    message_retention  = string
    schema            = optional(string)
    schema_encoding   = optional(string)
    enable_dlq       = optional(bool)
  }))
  default = {
    {{#each pubsubTopics}}
    "{{name}}" = {
      message_retention = "{{messageRetention}}"
      {{#if schema}}schema = "{{schema}}"{{/if}}
      {{#if schemaEncoding}}schema_encoding = "{{schemaEncoding}}"{{/if}}
      {{#if enableDlq}}enable_dlq = {{enableDlq}}{{/if}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

variable "pubsub_schemas" {
  description = "Pub/Sub message schemas"
  type = map(object({
    type       = string
    definition = string
  }))
  default = {
    {{#each pubsubSchemas}}
    "{{name}}" = {
      type       = "{{type}}"
      definition = "{{definition}}"
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

variable "pubsub_subscriptions" {
  description = "Pub/Sub subscriptions configuration"
  type = map(object({
    topic                    = string
    ack_deadline            = number
    message_retention       = string
    exactly_once_delivery   = optional(bool)
    dead_letter_topic       = optional(string)
    max_delivery_attempts   = optional(number)
    push_endpoint          = optional(string)
    push_attributes        = optional(map(string))
    push_service_account   = optional(string)
    bigquery_table         = optional(string)
    retry_policy = optional(object({
      minimum_backoff = string
      maximum_backoff = string
    }))
  }))
  default = {
    {{#each pubsubSubscriptions}}
    "{{name}}" = {
      topic                  = "{{topic}}"
      ack_deadline          = {{ackDeadline}}
      message_retention     = "{{messageRetention}}"
      {{#if exactlyOnceDelivery}}exactly_once_delivery = {{exactlyOnceDelivery}}{{/if}}
      {{#if deadLetterTopic}}dead_letter_topic = "{{deadLetterTopic}}"{{/if}}
      {{#if maxDeliveryAttempts}}max_delivery_attempts = {{maxDeliveryAttempts}}{{/if}}
      {{#if pushEndpoint}}push_endpoint = "{{pushEndpoint}}"{{/if}}
      {{#if pushServiceAccount}}push_service_account = "{{pushServiceAccount}}"{{/if}}
      {{#if bigqueryTable}}bigquery_table = "{{bigqueryTable}}"{{/if}}
      {{#if retryPolicy}}
      retry_policy = {
        minimum_backoff = "{{retryPolicy.minimumBackoff}}"
        maximum_backoff = "{{retryPolicy.maximumBackoff}}"
      }
      {{/if}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

#================================
# SECRET MANAGER CONFIGURATION
#================================

variable "secrets" {
  description = "Secret Manager secrets configuration"
  type = map(object({
    data              = string
    enabled           = optional(bool, true)
    rotation_period   = optional(string)
    next_rotation_time = optional(string)
  }))
  default = {
    {{#each secrets}}
    "{{name}}" = {
      data    = "{{data}}"
      enabled = {{enabled}}
      {{#if rotationPeriod}}rotation_period = "{{rotationPeriod}}"{{/if}}
      {{#if nextRotationTime}}next_rotation_time = "{{nextRotationTime}}"{{/if}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
  sensitive = true
}

#================================
# CLOUD TASKS CONFIGURATION
#================================

variable "cloud_tasks_queues" {
  description = "Cloud Tasks queues configuration"
  type = map(object({
    max_concurrent_dispatches = number
    max_dispatches_per_second = number
    max_attempts             = number
    max_retry_duration       = string
    max_backoff             = string
    min_backoff             = string
    max_doublings           = number
    logging_sampling_ratio  = number
  }))
  default = {
    {{#each cloudTasksQueues}}
    "{{name}}" = {
      max_concurrent_dispatches = {{maxConcurrentDispatches}}
      max_dispatches_per_second = {{maxDispatchesPerSecond}}
      max_attempts             = {{maxAttempts}}
      max_retry_duration       = "{{maxRetryDuration}}"
      max_backoff             = "{{maxBackoff}}"
      min_backoff             = "{{minBackoff}}"
      max_doublings           = {{maxDoublings}}
      logging_sampling_ratio  = {{loggingSamplingRatio}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

#================================
# CLOUD SCHEDULER CONFIGURATION
#================================

variable "scheduled_jobs" {
  description = "Cloud Scheduler jobs configuration"
  type = map(object({
    schedule         = string
    timezone         = string
    description      = string
    attempt_deadline = string
    retry_count      = number
    max_retry_duration = string
    min_backoff_duration = string
    max_backoff_duration = string
    max_doublings    = number
    http_target = optional(object({
      method          = string
      uri             = string
      headers         = map(string)
      body            = map(string)
      service_account = optional(string)
      audience        = optional(string)
    }))
    pubsub_target = optional(object({
      topic      = string
      data       = map(string)
      attributes = map(string)
    }))
  }))
  default = {
    {{#each scheduledJobs}}
    "{{name}}" = {
      schedule         = "{{schedule}}"
      timezone         = "{{timezone}}"
      description      = "{{description}}"
      attempt_deadline = "{{attemptDeadline}}"
      retry_count      = {{retryCount}}
      max_retry_duration = "{{maxRetryDuration}}"
      min_backoff_duration = "{{minBackoffDuration}}"
      max_backoff_duration = "{{maxBackoffDuration}}"
      max_doublings    = {{maxDoublings}}
      {{#if httpTarget}}
      http_target = {
        method          = "{{httpTarget.method}}"
        uri             = "{{httpTarget.uri}}"
        headers         = {{json httpTarget.headers}}
        body            = {{json httpTarget.body}}
        {{#if httpTarget.serviceAccount}}service_account = "{{httpTarget.serviceAccount}}"{{/if}}
        {{#if httpTarget.audience}}audience = "{{httpTarget.audience}}"{{/if}}
      }
      {{/if}}
      {{#if pubsubTarget}}
      pubsub_target = {
        topic      = "{{pubsubTarget.topic}}"
        data       = {{json pubsubTarget.data}}
        attributes = {{json pubsubTarget.attributes}}
      }
      {{/if}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

#================================
# MONITORING & ALERTING
#================================

variable "notification_emails" {
  description = "Email addresses for monitoring notifications"
  type        = map(string)
  default = {
    {{#each notificationEmails}}
    "{{name}}" = "{{email}}"{{#unless @last}},{{/unless}}
    {{/each}}
  }
}

variable "slack_webhooks" {
  description = "Slack webhook URLs for notifications"
  type        = map(string)
  default = {
    {{#each slackWebhooks}}
    "{{name}}" = "{{url}}"{{#unless @last}},{{/unless}}
    {{/each}}
  }
  sensitive = true
}

variable "alert_thresholds" {
  description = "Alert thresholds for monitoring"
  type = object({
    function_error_rate = number
    storage_usage_gb   = number
    memory_usage       = number
    cpu_usage         = number
    latency_ms        = number
  })
  default = {
    function_error_rate = {{alertThresholds.functionErrorRate}}
    storage_usage_gb   = {{alertThresholds.storageUsageGb}}
    memory_usage       = {{alertThresholds.memoryUsage}}
    cpu_usage         = {{alertThresholds.cpuUsage}}
    latency_ms        = {{alertThresholds.latencyMs}}
  }
}

#================================
# NETWORKING CONFIGURATION
#================================

variable "create_vpc" {
  description = "Whether to create a VPC network"
  type        = bool
  default     = {{createVpc}}
}

variable "subnet_cidr" {
  description = "CIDR range for the subnet"
  type        = string
  default     = "{{subnetCidr}}"
  validation {
    condition     = can(cidrhost(var.subnet_cidr, 0))
    error_message = "Subnet CIDR must be a valid CIDR block."
  }
}

variable "enable_nat" {
  description = "Enable Cloud NAT for private instances"
  type        = bool
  default     = {{enableNat}}
}

variable "enable_gke" {
  description = "Enable GKE secondary ranges"
  type        = bool
  default     = {{enableGke}}
}

variable "pods_cidr" {
  description = "CIDR range for GKE pods"
  type        = string
  default     = "{{podsCidr}}"
}

variable "services_cidr" {
  description = "CIDR range for GKE services"
  type        = string
  default     = "{{servicesCidr}}"
}

variable "nat_rules" {
  description = "Custom NAT rules"
  type = list(object({
    rule_number           = number
    description          = string
    match               = string
    source_nat_active_ips = list(string)
  }))
  default = []
}

#================================
# SECURITY CONFIGURATION
#================================

variable "kms_protection_level" {
  description = "KMS key protection level (SOFTWARE, HSM)"
  type        = string
  default     = "{{kmsProtectionLevel}}"
  validation {
    condition     = contains(["SOFTWARE", "HSM"], var.kms_protection_level)
    error_message = "KMS protection level must be either SOFTWARE or HSM."
  }
}

variable "enable_cloud_armor" {
  description = "Enable Cloud Armor security policies"
  type        = bool
  default     = {{enableCloudArmor}}
}

variable "rate_limit_threshold" {
  description = "Rate limit threshold for Cloud Armor"
  type        = number
  default     = {{rateLimitThreshold}}
}

variable "blocked_countries" {
  description = "Country codes to block in Cloud Armor"
  type        = list(string)
  default     = [{{#each blockedCountries}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]
}

#================================
# BUDGET & BILLING
#================================

variable "enable_budget_alerts" {
  description = "Enable budget alerts"
  type        = bool
  default     = {{enableBudgetAlerts}}
}

variable "billing_account" {
  description = "Billing account ID"
  type        = string
  default     = "{{billingAccount}}"
}

variable "monthly_budget_usd" {
  description = "Monthly budget in USD"
  type        = number
  default     = {{monthlyBudgetUsd}}
}

variable "budget_pubsub_topic" {
  description = "Pub/Sub topic for budget alerts"
  type        = string
  default     = "{{budgetPubsubTopic}}"
}

#================================
# FIREBASE CONFIGURATION
#================================

variable "firebase_admin_emails" {
  description = "Email addresses for Firebase admin access"
  type        = set(string)
  default     = [{{#each firebaseAdminEmails}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]
}