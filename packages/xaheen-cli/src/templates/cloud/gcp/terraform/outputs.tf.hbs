#================================
# OUTPUTS FOR GCP INFRASTRUCTURE
# Generated by Xaheen CLI - Infrastructure Specialist
#================================

#================================
# PROJECT INFORMATION
#================================

output "project_id" {
  description = "The GCP project ID"
  value       = var.project_id
}

output "project_number" {
  description = "The GCP project number"
  value       = data.google_project.current.number
}

output "region" {
  description = "The deployment region"
  value       = var.region
}

output "zone" {
  description = "The deployment zone"
  value       = var.zone
}

output "environment" {
  description = "The environment name"
  value       = var.environment
}

#================================
# SERVICE ACCOUNTS
#================================

output "service_accounts" {
  description = "Service account information"
  value = {
    functions = {
      email        = google_service_account.cloud_functions_sa.email
      unique_id    = google_service_account.cloud_functions_sa.unique_id
      member       = "serviceAccount:${google_service_account.cloud_functions_sa.email}"
    }
    run = {
      email        = google_service_account.cloud_run_sa.email
      unique_id    = google_service_account.cloud_run_sa.unique_id
      member       = "serviceAccount:${google_service_account.cloud_run_sa.email}"
    }
    admin = {
      email        = google_service_account.admin_sa.email
      unique_id    = google_service_account.admin_sa.unique_id
      member       = "serviceAccount:${google_service_account.admin_sa.email}"
    }
    monitoring = {
      email        = google_service_account.monitoring_sa.email
      unique_id    = google_service_account.monitoring_sa.unique_id
      member       = "serviceAccount:${google_service_account.monitoring_sa.email}"
    }
  }
  sensitive = false
}

#================================
# KMS ENCRYPTION
#================================

output "kms_keys" {
  description = "KMS encryption keys information"
  value = {
    key_ring = {
      id       = google_kms_key_ring.main.id
      name     = google_kms_key_ring.main.name
      location = google_kms_key_ring.main.location
    }
    storage_key = {
      id   = google_kms_crypto_key.storage_key.id
      name = google_kms_crypto_key.storage_key.name
    }
    secrets_key = {
      id   = google_kms_crypto_key.secrets_key.id
      name = google_kms_crypto_key.secrets_key.name
    }
  }
}

#================================
# CLOUD STORAGE
#================================

output "storage_buckets" {
  description = "Cloud Storage bucket information"
  value = {
    main = {
      name                = google_storage_bucket.main_storage.name
      url                 = google_storage_bucket.main_storage.url
      self_link          = google_storage_bucket.main_storage.self_link
      location           = google_storage_bucket.main_storage.location
      storage_class      = google_storage_bucket.main_storage.storage_class
      versioning_enabled = google_storage_bucket.main_storage.versioning[0].enabled
    }
    access_logs = {
      name      = google_storage_bucket.access_logs.name
      url       = google_storage_bucket.access_logs.url
      self_link = google_storage_bucket.access_logs.self_link
    }
    environment_buckets = {
      for k, v in google_storage_bucket.environment_buckets : k => {
        name      = v.name
        url       = v.url
        self_link = v.self_link
        location  = v.location
      }
    }
  }
}

#================================
# FIRESTORE DATABASE
#================================

output "firestore_database" {
  description = "Firestore database information"
  value = {
    name                              = google_firestore_database.main.name
    location_id                       = google_firestore_database.main.location_id
    type                             = google_firestore_database.main.type
    concurrency_mode                 = google_firestore_database.main.concurrency_mode
    app_engine_integration_mode      = google_firestore_database.main.app_engine_integration_mode
    point_in_time_recovery_enablement = google_firestore_database.main.point_in_time_recovery_enablement
    delete_protection_state          = google_firestore_database.main.delete_protection_state
    uid                             = google_firestore_database.main.uid
    create_time                     = google_firestore_database.main.create_time
  }
}

output "firestore_indexes" {
  description = "Firestore composite indexes"
  value = {
    for k, v in google_firestore_index.composite_indexes : k => {
      name       = v.name
      collection = v.collection
      query_scope = v.query_scope
      fields     = v.fields
    }
  }
}

#================================
# PUB/SUB MESSAGING
#================================

output "pubsub_resources" {
  description = "Pub/Sub topics and subscriptions information"
  value = {
    topics = {
      for k, v in google_pubsub_topic.main_topics : k => {
        name                       = v.name
        id                        = v.id
        message_retention_duration = v.message_retention_duration
        kms_key_name              = v.kms_key_name
        schema_settings           = v.schema_settings
      }
    }
    dlq_topics = {
      for k, v in google_pubsub_topic.dlq_topics : k => {
        name                       = v.name
        id                        = v.id
        message_retention_duration = v.message_retention_duration
      }
    }
    schemas = {
      for k, v in google_pubsub_schema.schemas : k => {
        name       = v.name
        type       = v.type
        definition = v.definition
      }
    }
    subscriptions = {
      for k, v in google_pubsub_subscription.main_subscriptions : k => {
        name                       = v.name
        id                        = v.id
        topic                     = v.topic
        ack_deadline_seconds      = v.ack_deadline_seconds
        message_retention_duration = v.message_retention_duration
        enable_exactly_once_delivery = v.enable_exactly_once_delivery
        dead_letter_policy        = v.dead_letter_policy
        retry_policy             = v.retry_policy
        push_config              = v.push_config
        bigquery_config          = v.bigquery_config
      }
    }
  }
  sensitive = false
}

#================================
# SECRET MANAGER
#================================

output "secret_manager" {
  description = "Secret Manager secrets information"
  value = {
    for k, v in google_secret_manager_secret.secrets : k => {
      name         = v.name
      secret_id    = v.secret_id
      replication  = v.replication
      rotation     = v.rotation
      create_time  = v.create_time
    }
  }
  sensitive = false
}

#================================
# CLOUD TASKS
#================================

output "cloud_tasks_queues" {
  description = "Cloud Tasks queues information"
  value = {
    for k, v in google_cloud_tasks_queue.task_queues : k => {
      name         = v.name
      location     = v.location
      rate_limits  = v.rate_limits
      retry_config = v.retry_config
      stackdriver_logging_config = v.stackdriver_logging_config
    }
  }
}

#================================
# CLOUD SCHEDULER
#================================

output "cloud_scheduler_jobs" {
  description = "Cloud Scheduler jobs information"
  value = {
    for k, v in google_cloud_scheduler_job.scheduled_jobs : k => {
      name             = v.name
      region           = v.region
      schedule         = v.schedule
      timezone         = v.timezone
      description      = v.description
      attempt_deadline = v.attempt_deadline
      http_target      = v.http_target
      pubsub_target    = v.pubsub_target
      retry_config     = v.retry_config
      state           = v.state
    }
  }
  sensitive = true
}

#================================
# MONITORING & ALERTING
#================================

output "monitoring_notification_channels" {
  description = "Monitoring notification channels"
  value = {
    email_channels = {
      for k, v in google_monitoring_notification_channel.email_channels : k => {
        name         = v.name
        display_name = v.display_name
        type         = v.type
        enabled      = v.enabled
      }
    }
    slack_channels = {
      for k, v in google_monitoring_notification_channel.slack_channels : k => {
        name         = v.name
        display_name = v.display_name
        type         = v.type
        enabled      = v.enabled
      }
    }
  }
  sensitive = false
}

output "monitoring_alert_policies" {
  description = "Monitoring alert policies"
  value = {
    function_errors = {
      name         = google_monitoring_alert_policy.function_errors.name
      display_name = google_monitoring_alert_policy.function_errors.display_name
      enabled      = google_monitoring_alert_policy.function_errors.enabled
    }
    storage_usage = {
      name         = google_monitoring_alert_policy.storage_usage.name
      display_name = google_monitoring_alert_policy.storage_usage.display_name
      enabled      = google_monitoring_alert_policy.storage_usage.enabled
    }
  }
}

output "monitoring_dashboard" {
  description = "Monitoring dashboard information"
  value = {
    id   = google_monitoring_dashboard.main_dashboard.id
    url  = "https://console.cloud.google.com/monitoring/dashboards/custom/${google_monitoring_dashboard.main_dashboard.id}?project=${var.project_id}"
  }
}

output "log_based_metrics" {
  description = "Custom log-based metrics"
  value = {
    function_cold_starts = {
      name         = google_logging_metric.function_cold_starts.name
      filter       = google_logging_metric.function_cold_starts.filter
      metric_descriptor = google_logging_metric.function_cold_starts.metric_descriptor
    }
  }
}

#================================
# NETWORKING (VPC)
#================================

output "vpc_network" {
  description = "VPC network information"
  value = var.create_vpc ? {
    network = {
      name         = google_compute_network.vpc_network[0].name
      id           = google_compute_network.vpc_network[0].id
      self_link    = google_compute_network.vpc_network[0].self_link
      gateway_ipv4 = google_compute_network.vpc_network[0].gateway_ipv4
      mtu          = google_compute_network.vpc_network[0].mtu
    }
    subnet = {
      name                     = google_compute_subnetwork.subnet[0].name
      id                      = google_compute_subnetwork.subnet[0].id
      self_link               = google_compute_subnetwork.subnet[0].self_link
      ip_cidr_range           = google_compute_subnetwork.subnet[0].ip_cidr_range
      gateway_address         = google_compute_subnetwork.subnet[0].gateway_address
      private_ip_google_access = google_compute_subnetwork.subnet[0].private_ip_google_access
      secondary_ip_range      = google_compute_subnetwork.subnet[0].secondary_ip_range
    }
    router = var.enable_nat ? {
      name      = google_compute_router.router[0].name
      region    = google_compute_router.router[0].region
      network   = google_compute_router.router[0].network
      bgp       = google_compute_router.router[0].bgp
    } : null
    nat = var.enable_nat ? {
      name                               = google_compute_router_nat.nat[0].name
      router                             = google_compute_router_nat.nat[0].router
      region                             = google_compute_router_nat.nat[0].region
      nat_ip_allocate_option             = google_compute_router_nat.nat[0].nat_ip_allocate_option
      source_subnetwork_ip_ranges_to_nat = google_compute_router_nat.nat[0].source_subnetwork_ip_ranges_to_nat
    } : null
    firewall_rules = {
      allow_internal = {
        name = google_compute_firewall.allow_internal[0].name
        id   = google_compute_firewall.allow_internal[0].id
      }
      deny_all = {
        name = google_compute_firewall.deny_all[0].name
        id   = google_compute_firewall.deny_all[0].id
      }
    }
  } : null
}

#================================
# ARTIFACT REGISTRY
#================================

output "artifact_registry" {
  description = "Artifact Registry repository information"
  value = {
    repository_id = google_artifact_registry_repository.docker_repo.repository_id
    name         = google_artifact_registry_repository.docker_repo.name
    location     = google_artifact_registry_repository.docker_repo.location
    format       = google_artifact_registry_repository.docker_repo.format
    description  = google_artifact_registry_repository.docker_repo.description
    kms_key_name = google_artifact_registry_repository.docker_repo.kms_key_name
    create_time  = google_artifact_registry_repository.docker_repo.create_time
    update_time  = google_artifact_registry_repository.docker_repo.update_time
    docker_config = {
      immutable_tags = google_artifact_registry_repository.docker_repo.docker_config[0].immutable_tags
    }
    cleanup_policies = google_artifact_registry_repository.docker_repo.cleanup_policies
    url = "${var.region}-docker.pkg.dev/${var.project_id}/${google_artifact_registry_repository.docker_repo.repository_id}"
  }
}

#================================
# CLOUD ARMOR SECURITY
#================================

output "cloud_armor_security_policy" {
  description = "Cloud Armor security policy information"
  value = var.enable_cloud_armor ? {
    name        = google_compute_security_policy.security_policy[0].name
    id          = google_compute_security_policy.security_policy[0].id
    description = google_compute_security_policy.security_policy[0].description
    rules       = google_compute_security_policy.security_policy[0].rule
    adaptive_protection_config = google_compute_security_policy.security_policy[0].adaptive_protection_config
  } : null
}

#================================
# BUDGET & BILLING
#================================

output "billing_budget" {
  description = "Billing budget information"
  value = var.enable_budget_alerts ? {
    name            = google_billing_budget.project_budget[0].name
    display_name    = google_billing_budget.project_budget[0].display_name
    billing_account = google_billing_budget.project_budget[0].billing_account
    budget_filter   = google_billing_budget.project_budget[0].budget_filter
    amount          = google_billing_budget.project_budget[0].amount
    threshold_rules = google_billing_budget.project_budget[0].threshold_rules
    all_updates_rule = google_billing_budget.project_budget[0].all_updates_rule
  } : null
}

#================================
# ENABLED APIS
#================================

output "enabled_apis" {
  description = "List of enabled Google Cloud APIs"
  value = [
    for api in google_project_service.required_apis : api.service
  ]
}

#================================
# DEPLOYMENT INFORMATION
#================================

output "deployment_info" {
  description = "Deployment information and next steps"
  value = {
    terraform_version = "~> 1.5"
    google_provider_version = "~> 5.0"
    deployment_timestamp = timestamp()
    
    next_steps = [
      "Deploy Cloud Functions using: gcloud functions deploy",
      "Configure Firestore security rules: firebase deploy --only firestore:rules",
      "Set up monitoring dashboards: https://console.cloud.google.com/monitoring",
      "Configure budget alerts: https://console.cloud.google.com/billing/budgets",
      "Review security policies: https://console.cloud.google.com/security/policy"
    ]
    
    important_urls = {
      cloud_console     = "https://console.cloud.google.com/home/dashboard?project=${var.project_id}"
      firestore_console = "https://console.firebase.google.com/project/${var.project_id}/firestore"
      storage_console   = "https://console.cloud.google.com/storage/browser?project=${var.project_id}"
      monitoring_console = "https://console.cloud.google.com/monitoring?project=${var.project_id}"
      logging_console   = "https://console.cloud.google.com/logs?project=${var.project_id}"
      iam_console      = "https://console.cloud.google.com/iam-admin?project=${var.project_id}"
      billing_console  = "https://console.cloud.google.com/billing?project=${var.project_id}"
    }
    
    security_recommendations = [
      "Regularly rotate KMS keys and secrets",
      "Monitor access logs and audit trails",
      "Review IAM permissions quarterly",
      "Enable security scanning for container images",
      "Implement least privilege access principles",
      "Configure proper firewall rules and network segmentation"
    ]
    
    cost_optimization_tips = [
      "Use lifecycle policies for storage cost optimization",
      "Monitor resource usage with budget alerts",
      "Implement auto-scaling for Cloud Run services",
      "Use committed use discounts for predictable workloads",
      "Regularly review and cleanup unused resources",
      "Optimize Cloud Function memory allocation based on usage"
    ]
  }
}

#================================
# DATA SOURCES
#================================

data "google_project" "current" {
  project_id = var.project_id
}

data "google_client_config" "current" {}

data "google_client_openid_userinfo" "current" {}

#================================
# LOCALS FOR COMPUTED VALUES
#================================

locals {
  project_services = [
    for service in google_project_service.required_apis : service.service
  ]
  
  total_storage_buckets = 1 + length(var.storage_buckets)
  total_pubsub_topics = length(var.pubsub_topics) + length({
    for topic_name, config in var.pubsub_topics : "${topic_name}-dlq" => config 
    if try(config.enable_dlq, false)
  })
  
  deployment_summary = {
    project_id = var.project_id
    region     = var.region
    environment = var.environment
    services_enabled = length(local.project_services)
    storage_buckets  = local.total_storage_buckets
    pubsub_topics   = local.total_pubsub_topics
    secrets_count   = length(var.secrets)
    alert_policies  = 2 # function_errors + storage_usage
    service_accounts = 4 # functions, run, admin, monitoring
  }
}

output "deployment_summary" {
  description = "Summary of deployed resources"
  value = local.deployment_summary
}