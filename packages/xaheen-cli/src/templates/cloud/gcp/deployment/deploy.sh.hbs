#!/bin/bash
# Deployment script for {{projectName}} GCP Infrastructure
# This script automates the deployment of all GCP services

set -euo pipefail

# Configuration
PROJECT_ID="{{projectId}}"
REGION="{{region}}"
ENVIRONMENT="${ENVIRONMENT:-production}"
TERRAFORM_VERSION="1.5.0"
NODE_VERSION="20"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if required tools are installed
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check gcloud CLI
    if ! command -v gcloud &> /dev/null; then
        log_error "gcloud CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check Terraform
    if ! command -v terraform &> /dev/null; then
        log_error "Terraform is not installed. Please install version $TERRAFORM_VERSION or later."
        exit 1
    fi
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js is not installed. Please install version $NODE_VERSION or later."
        exit 1
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        log_error "npm is not installed."
        exit 1
    fi
    
    # Check Firebase CLI
    if ! command -v firebase &> /dev/null; then
        log_warning "Firebase CLI is not installed. Installing..."
        npm install -g firebase-tools
    fi
    
    log_success "All prerequisites are installed"
}

# Authenticate with Google Cloud
authenticate_gcloud() {
    log_info "Authenticating with Google Cloud..."
    
    # Check if already authenticated
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
        log_info "No active authentication found. Please authenticate:"
        gcloud auth login
        gcloud auth application-default login
    fi
    
    # Set project
    gcloud config set project "$PROJECT_ID"
    gcloud config set compute/region "$REGION"
    
    log_success "Google Cloud authentication completed"
}

# Enable required APIs
enable_apis() {
    log_info "Enabling required Google Cloud APIs..."
    
    local apis=(
        "cloudfunctions.googleapis.com"
        "firestore.googleapis.com"
        "storage.googleapis.com"
        "pubsub.googleapis.com"
        "secretmanager.googleapis.com"
        "logging.googleapis.com"
        "monitoring.googleapis.com"
        "cloudkms.googleapis.com"
        "iam.googleapis.com"
        "cloudbuild.googleapis.com"
        "container.googleapis.com"
        "run.googleapis.com"
        "firebase.googleapis.com"
        "cloudresourcemanager.googleapis.com"
        "serviceusage.googleapis.com"
    )
    
    for api in "${apis[@]}"; do
        log_info "Enabling $api..."
        gcloud services enable "$api" --project="$PROJECT_ID"
    done
    
    log_success "All APIs enabled"
}

# Create Terraform state bucket
create_terraform_state_bucket() {
    log_info "Creating Terraform state bucket..."
    
    local bucket_name="${PROJECT_ID}-terraform-state"
    
    # Check if bucket exists
    if gsutil ls -b "gs://$bucket_name" &> /dev/null; then
        log_info "Terraform state bucket already exists"
    else
        # Create bucket
        gsutil mb -p "$PROJECT_ID" -l "$REGION" "gs://$bucket_name"
        
        # Enable versioning
        gsutil versioning set on "gs://$bucket_name"
        
        # Set lifecycle policy
        cat > lifecycle.json << EOF
{
  "lifecycle": {
    "rule": [
      {
        "action": {"type": "Delete"},
        "condition": {"numNewerVersions": 5}
      }
    ]
  }
}
EOF
        gsutil lifecycle set lifecycle.json "gs://$bucket_name"
        rm lifecycle.json
        
        log_success "Terraform state bucket created: gs://$bucket_name"
    fi
}

# Initialize and apply Terraform
deploy_terraform() {
    log_info "Deploying infrastructure with Terraform..."
    
    # Navigate to terraform directory
    cd terraform
    
    # Initialize Terraform
    log_info "Initializing Terraform..."
    terraform init -backend-config="bucket=${PROJECT_ID}-terraform-state"
    
    # Create terraform.tfvars if it doesn't exist
    if [[ ! -f "terraform.tfvars" ]]; then
        log_info "Creating terraform.tfvars file..."
        cat > terraform.tfvars << EOF
project_id = "$PROJECT_ID"
region = "$REGION"
environment = "$ENVIRONMENT"
enable_versioning = true
cors_origins = ["https://{{projectName}}.com", "https://app.{{projectName}}.com"]
firestore_location = "$REGION"
github_owner = "{{githubOwner}}"
github_repo = "{{githubRepo}}"
labels = {
  project = "{{projectName}}"
  environment = "$ENVIRONMENT"
  team = "engineering"
}
EOF
    fi
    
    # Plan deployment
    log_info "Creating Terraform execution plan..."
    terraform plan -out=tfplan -var-file=terraform.tfvars
    
    # Apply if plan looks good
    read -p "Do you want to apply this Terraform plan? (y/N): " confirm
    if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
        log_info "Applying Terraform configuration..."
        terraform apply tfplan
        log_success "Infrastructure deployment completed"
    else
        log_warning "Terraform deployment cancelled"
        exit 0
    fi
    
    # Return to root directory
    cd ..
}

# Deploy Cloud Functions
deploy_functions() {
    log_info "Deploying Cloud Functions..."
    
    # Navigate to functions directory
    cd functions
    
    # Install dependencies
    log_info "Installing function dependencies..."
    npm install
    
    # Build functions
    log_info "Building functions..."
    npm run build
    
    # Deploy functions
    local functions=(
        "api:--trigger-http --allow-unauthenticated"
        "userEventProcessor:--trigger-topic=user-events"
        "notificationSender:--trigger-topic=notifications"
        "auditLogger:--trigger-topic=audit-logs"
    )
    
    for func_config in "${functions[@]}"; do
        IFS=':' read -r func_name func_args <<< "$func_config"
        
        log_info "Deploying function: $func_name"
        gcloud functions deploy "$func_name" \
            --source=. \
            --runtime=nodejs20 \
            --region="$REGION" \
            --memory=512MB \
            --timeout=300s \
            --service-account="${PROJECT_ID}-functions@${PROJECT_ID}.iam.gserviceaccount.com" \
            $func_args
    done
    
    # Return to root directory
    cd ..
    
    log_success "Cloud Functions deployment completed"
}

# Deploy Firestore security rules and indexes
deploy_firestore() {
    log_info "Deploying Firestore configuration..."
    
    # Deploy security rules
    if [[ -f "firestore/firestore.rules" ]]; then
        log_info "Deploying Firestore security rules..."
        firebase deploy --only firestore:rules --project="$PROJECT_ID"
    fi
    
    # Deploy indexes
    if [[ -f "firestore/firestore.indexes.json" ]]; then
        log_info "Deploying Firestore indexes..."
        firebase deploy --only firestore:indexes --project="$PROJECT_ID"
    fi
    
    log_success "Firestore configuration deployed"
}

# Create and configure storage buckets
configure_storage() {
    log_info "Configuring Cloud Storage buckets..."
    
    # Apply CORS configuration
    local cors_config='[
        {
            "origin": ["https://{{projectName}}.com", "https://app.{{projectName}}.com"],
            "method": ["GET", "HEAD", "PUT", "POST", "DELETE"],
            "responseHeader": ["Content-Type", "Access-Control-Allow-Origin"],
            "maxAgeSeconds": 3600
        }
    ]'
    
    echo "$cors_config" > cors.json
    
    # Apply CORS to buckets
    local buckets=(
        "${PROJECT_ID}-main-storage-${ENVIRONMENT}"
        "${PROJECT_ID}-user-uploads-${ENVIRONMENT}"
    )
    
    for bucket in "${buckets[@]}"; do
        if gsutil ls -b "gs://$bucket" &> /dev/null; then
            log_info "Applying CORS configuration to $bucket"
            gsutil cors set cors.json "gs://$bucket"
        fi
    done
    
    rm cors.json
    
    log_success "Storage configuration completed"
}

# Set up monitoring and alerting
setup_monitoring() {
    log_info "Setting up monitoring and alerting..."
    
    # Create custom metrics
    if [[ -f "monitoring/custom-metrics.json" ]]; then
        log_info "Creating custom metrics..."
        # This would typically use the Monitoring API or gcloud commands
        # For now, we'll skip the implementation as it requires API calls
    fi
    
    # Create alert policies
    if [[ -f "monitoring/alert-policies.json" ]]; then
        log_info "Creating alert policies..."
        # This would typically use the Monitoring API
    fi
    
    log_success "Monitoring setup completed"
}

# Deploy secrets to Secret Manager
deploy_secrets() {
    log_info "Deploying secrets to Secret Manager..."
    
    # Check if secrets file exists
    if [[ ! -f ".env.secrets" ]]; then
        log_warning "No .env.secrets file found. Creating template..."
        cat > .env.secrets << EOF
# Add your secrets here (one per line, KEY=VALUE format)
# DATABASE_URL=postgresql://user:pass@host:port/db
# JWT_SECRET=your-jwt-secret-here
# FIREBASE_PRIVATE_KEY=your-firebase-private-key
EOF
        log_warning "Please edit .env.secrets with your actual secrets, then run this script again"
        return
    fi
    
    # Read secrets from file and create them
    while IFS='=' read -r key value; do
        # Skip empty lines and comments
        [[ -z "$key" || "$key" =~ ^#.* ]] && continue
        
        # Convert key to lowercase and replace underscores with hyphens
        secret_name=$(echo "$key" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
        
        log_info "Creating secret: $secret_name"
        
        # Check if secret already exists
        if gcloud secrets describe "$secret_name" --project="$PROJECT_ID" &> /dev/null; then
            log_info "Secret $secret_name already exists, adding new version..."
            echo -n "$value" | gcloud secrets versions add "$secret_name" --data-file=- --project="$PROJECT_ID"
        else
            log_info "Creating new secret: $secret_name"
            echo -n "$value" | gcloud secrets create "$secret_name" --data-file=- --project="$PROJECT_ID"
        fi
    done < .env.secrets
    
    log_success "Secrets deployment completed"
}

# Run tests
run_tests() {
    log_info "Running tests..."
    
    if [[ -f "package.json" ]]; then
        # Install dependencies
        npm install
        
        # Run tests
        if npm run test 2>/dev/null; then
            log_success "All tests passed"
        else
            log_warning "Some tests failed, but continuing deployment"
        fi
    else
        log_info "No package.json found, skipping tests"
    fi
}

# Health check
health_check() {
    log_info "Performing health check..."
    
    # Wait a bit for services to start
    sleep 30
    
    # Check if Cloud Functions are responding
    local function_url=$(gcloud functions describe api --region="$REGION" --project="$PROJECT_ID" --format="value(httpsTrigger.url)" 2>/dev/null || echo "")
    
    if [[ -n "$function_url" ]]; then
        log_info "Testing function endpoint: $function_url/health"
        if curl -s -f "$function_url/health" > /dev/null; then
            log_success "Health check passed"
        else
            log_warning "Health check failed - function may still be starting up"
        fi
    else
        log_info "No HTTP function found for health check"
    fi
}

# Cleanup function
cleanup() {
    log_info "Cleaning up temporary files..."
    rm -f tfplan
    rm -f lifecycle.json
    rm -f cors.json
}

# Print deployment summary
print_summary() {
    log_success "🎉 Deployment completed successfully!"
    echo
    echo "📋 Summary:"
    echo "  Project ID: $PROJECT_ID"
    echo "  Region: $REGION"
    echo "  Environment: $ENVIRONMENT"
    echo
    echo "🔗 Useful commands:"
    echo "  View logs: gcloud logging read 'resource.type=\"cloud_function\"' --project=$PROJECT_ID"
    echo "  Monitor functions: gcloud functions list --project=$PROJECT_ID"
    echo "  Check buckets: gsutil ls -p $PROJECT_ID"
    echo "  View secrets: gcloud secrets list --project=$PROJECT_ID"
    echo
    echo "🌐 Next steps:"
    echo "  1. Configure your domain and SSL certificates"
    echo "  2. Set up your CI/CD pipeline"
    echo "  3. Configure monitoring alerts and notifications"
    echo "  4. Review security settings and IAM permissions"
    echo "  5. Test your application thoroughly"
}

# Main deployment function
main() {
    log_info "🚀 Starting {{projectName}} GCP deployment..."
    echo "Project: $PROJECT_ID"
    echo "Region: $REGION"
    echo "Environment: $ENVIRONMENT"
    echo
    
    # Confirm deployment
    read -p "Do you want to proceed with the deployment? (y/N): " confirm
    if [[ ! $confirm == [yY] && ! $confirm == [yY][eE][sS] ]]; then
        log_info "Deployment cancelled"
        exit 0
    fi
    
    # Set trap for cleanup
    trap cleanup EXIT
    
    # Execute deployment steps
    check_prerequisites
    authenticate_gcloud
    enable_apis
    create_terraform_state_bucket
    run_tests
    deploy_terraform
    deploy_functions
    deploy_firestore
    configure_storage
    deploy_secrets
    setup_monitoring
    health_check
    print_summary
    
    log_success "✨ Deployment completed successfully!"
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo
        echo "Options:"
        echo "  --help, -h          Show this help message"
        echo "  --check-prereqs     Only check prerequisites"
        echo "  --terraform-only    Only deploy Terraform infrastructure"
        echo "  --functions-only    Only deploy Cloud Functions"
        echo "  --dry-run          Show what would be deployed without executing"
        echo
        echo "Environment variables:"
        echo "  ENVIRONMENT         Deployment environment (default: production)"
        echo "  PROJECT_ID          GCP Project ID (default: {{projectId}})"
        echo "  REGION              GCP Region (default: {{region}})"
        exit 0
        ;;
    --check-prereqs)
        check_prerequisites
        exit 0
        ;;
    --terraform-only)
        check_prerequisites
        authenticate_gcloud
        enable_apis
        create_terraform_state_bucket
        deploy_terraform
        exit 0
        ;;
    --functions-only)
        check_prerequisites
        authenticate_gcloud
        deploy_functions
        exit 0
        ;;
    --dry-run)
        log_info "🔍 Dry run mode - showing what would be deployed..."
        echo "Project ID: $PROJECT_ID"
        echo "Region: $REGION"
        echo "Environment: $ENVIRONMENT"
        echo
        echo "Steps that would be executed:"
        echo "  1. Check prerequisites"
        echo "  2. Authenticate with Google Cloud"
        echo "  3. Enable required APIs"
        echo "  4. Create Terraform state bucket"
        echo "  5. Run tests"
        echo "  6. Deploy Terraform infrastructure"
        echo "  7. Deploy Cloud Functions"
        echo "  8. Deploy Firestore configuration"
        echo "  9. Configure Cloud Storage"
        echo "  10. Deploy secrets"
        echo "  11. Set up monitoring"
        echo "  12. Perform health check"
        exit 0
        ;;
    "")
        main
        ;;
    *)
        log_error "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac