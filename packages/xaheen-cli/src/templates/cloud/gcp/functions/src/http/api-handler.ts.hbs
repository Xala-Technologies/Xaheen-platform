import * as functions from 'firebase-functions';
import * as express from 'express';
import * as cors from 'cors';
import { logger } from '../utils/logger';
import { errorHandler } from '../utils/error-handler';
import { corsMiddleware } from '../middleware/cors';
import { authMiddleware } from '../middleware/auth';
import { validationMiddleware, schemas } from '../middleware/validation';

const app = express();

// Middleware
app.use(cors(corsMiddleware));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
	res.status(200).json({ 
		status: 'healthy', 
		timestamp: new Date().toISOString(),
		function: '{{functionName}}',
		version: process.env.K_REVISION || '1.0.0'
	});
});

{{#each endpoints}}
// {{description}}
app.{{method}}('{{path}}', 
	{{#if requireAuth}}authMiddleware,{{/if}}
	{{#if validation}}validationMiddleware(schemas.{{validation}}),{{/if}}
	async (req, res) => {
		try {
			logger.info('Processing {{name}} request', { 
				method: req.method,
				url: req.url,
				body: req.body,
				params: req.params,
				query: req.query
			});

			// TODO: Implement your business logic here
			const result = await process{{pascalCase name}}(req.body, req.params, req.query, req.user);

			res.status(200).json({
				success: true,
				data: result,
				timestamp: new Date().toISOString()
			});
		} catch (error) {
			logger.error('Error in {{name}}:', error);
			errorHandler(error, req, res);
		}
	}
);

async function process{{pascalCase name}}(
	body: any, 
	params: any, 
	query: any, 
	user?: any
): Promise<any> {
	// TODO: Implement your business logic
	logger.info('Processing {{name}} with:', { body, params, query, user });
	
	return { 
		message: '{{name}} processed successfully',
		data: body
	};
}

{{/each}}

// Error handling middleware
app.use(errorHandler);

export const {{functionName}} = functions
	.region('{{region}}')
	.runWith({
		memory: '{{memory}}',
		timeoutSeconds: {{timeout}},
		minInstances: {{minInstances}},
		maxInstances: {{maxInstances}}
	})
	.https.onRequest(app);