// Firestore Security Rules for {{projectName}}
// These rules secure your database and ensure data privacy
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             'roles' in request.auth.token && 
             role in request.auth.token.roles;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isModerator() {
      return hasRole('moderator') || isAdmin();
    }
    
    function hasPermission(permission) {
      return isAuthenticated() && 
             'permissions' in request.auth.token && 
             permission in request.auth.token.permissions;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }
    
    function isValidNorwegianPersonalNumber(personalNumber) {
      return personalNumber is string && 
             personalNumber.matches('^\\d{11}$');
    }
    
    function hasGDPRConsent(userId) {
      return exists(/databases/$(database)/documents/gdpr_consents/$(userId)) &&
             get(/databases/$(database)/documents/gdpr_consents/$(userId)).data.consent == true;
    }
    
    function isWithinDataRetentionPeriod(document) {
      return document.data.createdAt > (request.time - duration.value({{dataRetentionDays}}*24*60*60, 's'));
    }
    
    // Users collection - personal data with strict access control
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
                      isValidEmail(request.resource.data.email) &&
                      request.resource.data.keys().hasAll(['email', 'name', 'createdAt', 'updatedAt']) &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp;
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       hasGDPRConsent(userId);
      allow delete: if isOwner(userId) || isAdmin();
      
      // User private data (Norwegian personal numbers, sensitive info)
      match /private/{document} {
        allow read, write: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId) && 
                         hasGDPRConsent(userId) &&
                         (request.resource.data.personalNumber == null || 
                          isValidNorwegianPersonalNumber(request.resource.data.personalNumber));
      }
      
      // User preferences and settings
      match /preferences/{document} {
        allow read, write: if isOwner(userId);
      }
      
      // User activity logs (read-only for user, write for system)
      match /activity/{activityId} {
        allow read: if isOwner(userId) || isModerator();
        allow write: if false; // Only system can write logs
      }
    }
    
    // Public profiles (limited user data)
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                      request.resource.data.keys().hasAll(['displayName', 'avatar', 'bio']) &&
                      !request.resource.data.keys().hasAny(['email', 'personalNumber', 'address']);
    }
    
    // Organizations/Companies
    match /organizations/{orgId} {
      allow read: if isAuthenticated() && 
                     (isAdmin() || 
                      orgId in request.auth.token.organizations);
      allow write: if isAdmin() || 
                      (orgId in request.auth.token.organizations && 
                       hasPermission('organization.write'));
      allow create: if isAuthenticated() && hasPermission('organization.create');
      
      // Organization members
      match /members/{memberId} {
        allow read: if isAuthenticated() && 
                       (orgId in request.auth.token.organizations || isAdmin());
        allow write: if hasPermission('organization.manage_members') || isAdmin();
      }
      
      // Organization settings (admin only)
      match /settings/{document} {
        allow read, write: if isAdmin() || 
                              (orgId in request.auth.token.organizations && 
                               hasPermission('organization.admin'));
      }
    }
    
    // Projects
    match /projects/{projectId} {
      allow read: if isAuthenticated() && 
                     (resource.data.members[request.auth.uid] != null || 
                      resource.data.public == true || 
                      isAdmin());
      allow write: if isAuthenticated() && 
                      (resource.data.members[request.auth.uid].role in ['owner', 'admin'] || 
                       isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.members[request.auth.uid].role == 'owner';
      
      // Project documents/files
      match /documents/{documentId} {
        allow read: if get(/databases/$(database)/documents/projects/$(projectId)).data.members[request.auth.uid] != null ||
                       isAdmin();
        allow write: if get(/databases/$(database)/documents/projects/$(projectId)).data.members[request.auth.uid].permissions.hasAny(['write', 'admin']) ||
                        isAdmin();
      }
      
      // Project comments
      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/projects/$(projectId)).data.members[request.auth.uid] != null ||
                       isAdmin();
        allow write: if isAuthenticated() && 
                        request.auth.uid == resource.data.authorId;
        allow create: if isAuthenticated() && 
                         request.auth.uid == request.resource.data.authorId &&
                         get(/databases/$(database)/documents/projects/$(projectId)).data.members[request.auth.uid] != null;
      }
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      allow write: if false; // Only system can create notifications
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
    }
    
    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Audit logs (read-only for admins)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only system functions can write audit logs
    }
    
    // GDPR Consent records
    match /gdpr_consents/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
                      request.resource.data.keys().hasAll(['consent', 'purpose', 'version', 'timestamp']) &&
                      request.resource.data.consent is bool &&
                      request.resource.data.timestamp is timestamp;
    }
    
    // Data processing records (GDPR compliance)
    match /data_processing/{recordId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow write: if false; // Only system can write processing records
    }
    
    // Norwegian compliance data
    match /norwegian_compliance/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Only system functions
    }
    
    // BankID authentication records
    match /bankid_sessions/{sessionId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow write: if false; // Only BankID service can write
    }
    
    // Vipps payment records
    match /vipps_payments/{paymentId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow write: if false; // Only Vipps service can write
    }
    
    // File uploads metadata
    match /file_uploads/{fileId} {
      allow read: if isAuthenticated() && 
                     (resource.data.uploadedBy == request.auth.uid || isAdmin());
      allow write: if isAuthenticated() && 
                      resource.data.uploadedBy == request.auth.uid;
      allow create: if isAuthenticated() && 
                       request.resource.data.uploadedBy == request.auth.uid &&
                       request.resource.data.keys().hasAll(['filename', 'contentType', 'size', 'uploadedAt']);
    }
    
    // Analytics data (anonymized)
    match /analytics/{document=**} {
      allow read: if isAdmin() || hasPermission('analytics.read');
      allow write: if false; // Only analytics service can write
    }
    
    // Feature flags and configuration
    match /feature_flags/{flagId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || hasPermission('feature_flags.write');
    }
    
    // A/B test data
    match /ab_tests/{testId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || hasPermission('ab_tests.write');
      
      match /participants/{userId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if false; // Only A/B test service can assign users
      }
    }
    
    // Help desk and support tickets
    match /support_tickets/{ticketId} {
      allow read: if isAuthenticated() && 
                     (resource.data.createdBy == request.auth.uid || 
                      hasRole('support') || 
                      isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if (isAuthenticated() && resource.data.createdBy == request.auth.uid) ||
                       hasRole('support') || 
                       isAdmin();
      
      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/support_tickets/$(ticketId)).data.createdBy == request.auth.uid ||
                       hasRole('support') || 
                       isAdmin();
        allow create: if isAuthenticated() && 
                         request.resource.data.authorId == request.auth.uid;
      }
    }
    
    // Public content (blog posts, announcements)
    match /public_content/{contentId} {
      allow read: if true; // Public read access
      allow write: if hasPermission('content.write') || isAdmin();
    }
    
    // Localization/translations
    match /translations/{locale} {
      allow read: if true; // Public read access
      allow write: if hasPermission('translations.write') || isAdmin();
    }
    
    // Rate limiting data
    match /rate_limits/{document=**} {
      allow read, write: if false; // Only system functions
    }
    
    // Monitoring and health checks
    match /monitoring/{document=**} {
      allow read: if isAdmin() || hasPermission('monitoring.read');
      allow write: if false; // Only monitoring service
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}