# Comprehensive Kubernetes deployment for {{imageName}}
# Generated by Xaheen CLI on {{timestamp}}
# Environment: {{environment}}

apiVersion: v1
kind: Namespace
metadata:
  name: {{imageName}}-{{environment}}
  labels:
    name: {{imageName}}-{{environment}}
    environment: {{environment}}
    managed-by: xaheen-cli
    version: {{imageTag}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{imageName}}-config
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: config
    environment: {{environment}}
data:
  NODE_ENV: "{{environment}}"
  PORT: "{{port}}"
  SERVICE_NAME: "{{imageName}}"
  SERVICE_VERSION: "{{imageTag}}"
  {{#if enableTracing}}
  JAEGER_SERVICE_NAME: "{{imageName}}"
  JAEGER_AGENT_HOST: "jaeger-agent"
  JAEGER_AGENT_PORT: "6832"
  OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger-collector:14268/api/traces"
  {{/if}}
  {{#if enableLogging}}
  LOG_LEVEL: "{{#if (eq environment "development")}}debug{{else}}info{{/if}}"
  LOG_FORMAT: "json"
  {{/if}}
  {{#each environmentVariables}}
  {{@key}}: "{{this}}"
  {{/each}}
---
{{#if enableSecrets}}
apiVersion: v1
kind: Secret
metadata:
  name: {{imageName}}-secrets
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: secrets
    environment: {{environment}}
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  {{#each secrets}}
  {{this}}: ""  # TODO: Add base64 encoded value
  {{/each}}
---
{{/if}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{imageName}}
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: application
    environment: {{environment}}
    version: {{imageTag}}
  annotations:
    deployment.kubernetes.io/revision: "1"
    xaheen.com/generated-by: "xaheen-cli"
    xaheen.com/generated-at: "{{timestamp}}"
spec:
  replicas: {{#if (eq environment "production")}}3{{else}}1{{/if}}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {{imageName}}
      component: application
      environment: {{environment}}
  template:
    metadata:
      labels:
        app: {{imageName}}
        component: application
        environment: {{environment}}
        version: {{imageTag}}
      annotations:
        prometheus.io/scrape: "{{#if enablePrometheus}}true{{else}}false{{/if}}"
        prometheus.io/port: "{{#if enablePrometheus}}9090{{else}}{{port}}{{/if}}"
        prometheus.io/path: "/metrics"
        {{#if enableTracing}}
        sidecar.jaegertracing.io/inject: "true"
        {{/if}}
    spec:
      {{#if enableSecurity}}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      {{/if}}
      serviceAccountName: {{imageName}}-sa
      containers:
      - name: {{imageName}}
        image: {{registryUrl}}/{{imageName}}:{{imageTag}}
        imagePullPolicy: {{#if (eq environment "development")}}Always{{else}}IfNotPresent{{/if}}
        ports:
        - name: http
          containerPort: {{port}}
          protocol: TCP
        {{#if enablePrometheus}}
        - name: metrics
          containerPort: 9090
          protocol: TCP
        {{/if}}
        {{#each exposePorts}}
        - name: port-{{this}}
          containerPort: {{this}}
          protocol: TCP
        {{/each}}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: {{imageName}}-config
        {{#if enableSecrets}}
        - secretRef:
            name: {{imageName}}-secrets
        {{/if}}
        {{#if enableHealthCheck}}
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
          successThreshold: 1
        {{/if}}
        resources:
          requests:
            memory: "{{#if (eq environment "production")}}256Mi{{else}}128Mi{{/if}}"
            cpu: "{{#if (eq environment "production")}}200m{{else}}100m{{/if}}"
          limits:
            memory: "{{#if (eq environment "production")}}512Mi{{else}}256Mi{{/if}}"
            cpu: "{{#if (eq environment "production")}}500m{{else}}300m{{/if}}"
        {{#if enableSecurity}}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
        {{/if}}
        {{#if volumes}}
        volumeMounts:
        {{#each volumes}}
        - name: {{@key}}
          mountPath: {{target}}
          {{#if readonly}}readOnly: true{{/if}}
        {{/each}}
        {{#if enableSecurity}}
        - name: tmp
          mountPath: /tmp
        {{/if}}
        {{/if}}
      {{#if volumes}}
      volumes:
      {{#each volumes}}
      - name: {{@key}}
        {{#if (eq type "configMap")}}
        configMap:
          name: {{source}}
        {{else if (eq type "secret")}}
        secret:
          secretName: {{source}}
        {{else if (eq type "emptyDir")}}
        emptyDir: {}
        {{else}}
        persistentVolumeClaim:
          claimName: {{source}}
        {{/if}}
      {{/each}}
      {{#if enableSecurity}}
      - name: tmp
        emptyDir: {}
      {{/if}}
      {{/if}}
      {{#if (ne environment "development")}}
      imagePullSecrets:
      - name: {{imageName}}-registry-secret
      {{/if}}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      {{#if nodeSelector}}
      nodeSelector:
        {{#each nodeSelector}}
        {{@key}}: "{{this}}"
        {{/each}}
      {{/if}}
      {{#if tolerations}}
      tolerations:
      {{#each tolerations}}
      - key: "{{key}}"
        operator: "{{operator}}"
        value: "{{value}}"
        effect: "{{effect}}"
      {{/each}}
      {{/if}}
      {{#if affinity}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{imageName}}
              topologyKey: kubernetes.io/hostname
      {{/if}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{imageName}}-service
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: service
    environment: {{environment}}
  annotations:
    {{#if enablePrometheus}}
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    {{/if}}
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  {{#if enablePrometheus}}
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  {{/if}}
  {{#each exposePorts}}
  - name: port-{{this}}
    port: {{this}}
    targetPort: port-{{this}}
    protocol: TCP
  {{/each}}
  selector:
    app: {{imageName}}
    component: application
    environment: {{environment}}
---
{{#if enableIngress}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{imageName}}-ingress
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: ingress
    environment: {{environment}}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    {{#if enableSsl}}
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    {{/if}}
    {{#if rateLimiting}}
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    {{/if}}
spec:
  {{#if enableSsl}}
  tls:
  - hosts:
    - {{domain}}
    secretName: {{imageName}}-tls
  {{/if}}
  rules:
  - host: {{domain}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{imageName}}-service
            port:
              number: 80
---
{{/if}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{imageName}}-sa
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: service-account
    environment: {{environment}}
{{#if enableRbac}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{imageName}}-role
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: rbac
    environment: {{environment}}
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{imageName}}-role-binding
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: rbac
    environment: {{environment}}
subjects:
- kind: ServiceAccount
  name: {{imageName}}-sa
  namespace: {{imageName}}-{{environment}}
roleRef:
  kind: Role
  name: {{imageName}}-role
  apiGroup: rbac.authorization.k8s.io
{{/if}}
---
{{#if enableHpa}}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{imageName}}-hpa
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: hpa
    environment: {{environment}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{imageName}}
  minReplicas: {{#if (eq environment "production")}}2{{else}}1{{/if}}
  maxReplicas: {{#if (eq environment "production")}}10{{else}}3{{/if}}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  {{#if enablePrometheus}}
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  {{/if}}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
---
{{/if}}
{{#if enablePdb}}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{imageName}}-pdb
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: pdb
    environment: {{environment}}
spec:
  minAvailable: {{#if (eq environment "production")}}50%{{else}}1{{/if}}
  selector:
    matchLabels:
      app: {{imageName}}
      component: application
      environment: {{environment}}
---
{{/if}}
{{#if enableNetworkPolicy}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{imageName}}-network-policy
  namespace: {{imageName}}-{{environment}}
  labels:
    app: {{imageName}}
    component: network-policy
    environment: {{environment}}
spec:
  podSelector:
    matchLabels:
      app: {{imageName}}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: {{port}}
    {{#if enablePrometheus}}
    - protocol: TCP
      port: 9090
    {{/if}}
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
  {{#if (eq projectType "fullstack")}}
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  {{/if}}
{{/if}}