# Prometheus 3.0 Configuration
# Generated by Xaheen CLI - Production-ready monitoring with security and performance

global:
  scrape_interval: {{scrapeInterval}}
  evaluation_interval: {{evaluationInterval}}
  scrape_timeout: 10s
  
  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    cluster: '{{cluster}}'
    environment: '{{environment}}'
    region: '{{region}}'
    prometheus: '{{prometheusInstance}}'
    __replica__: '{{replicaLabel}}'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          {{#each alertmanagerTargets}}
          - '{{this}}'
          {{/each}}
      scheme: {{alertmanagerScheme}}
      timeout: 10s
      api_version: v2
      {{#if alertmanagerAuth}}
      basic_auth:
        username: {{alertmanagerAuth.username}}
        password_file: {{alertmanagerAuth.passwordFile}}
      {{/if}}

# Load recording and alerting rules
rule_files:
  - "rules/*.yml"
  - "alerts/*.yml"

# Remote write configuration for long-term storage
{{#if remoteWrite}}
remote_write:
  {{#each remoteWrite}}
  - url: {{url}}
    name: {{name}}
    {{#if basicAuth}}
    basic_auth:
      username: {{basicAuth.username}}
      password_file: {{basicAuth.passwordFile}}
    {{/if}}
    {{#if headers}}
    headers:
      {{#each headers}}
      {{@key}}: {{this}}
      {{/each}}
    {{/if}}
    remote_timeout: 30s
    queue_config:
      capacity: 10000
      max_shards: 1000
      min_shards: 1
      max_samples_per_send: 2000
      batch_send_deadline: 5s
      min_backoff: 30ms
      max_backoff: 5s
    metadata_config:
      send: true
      send_interval: 1m
    write_relabel_configs:
      # Drop high cardinality metrics
      - source_labels: [__name__]
        regex: 'go_memstats_.*|prometheus_tsdb_.*|prometheus_engine_.*'
        action: drop
  {{/each}}
{{/if}}

# Remote read configuration
{{#if remoteRead}}
remote_read:
  {{#each remoteRead}}
  - url: {{url}}
    name: {{name}}
    read_recent: {{readRecent}}
    {{#if basicAuth}}
    basic_auth:
      username: {{basicAuth.username}}
      password_file: {{basicAuth.passwordFile}}
    {{/if}}
  {{/each}}
{{/if}}

# Scrape configurations
scrape_configs:
  # ========================================
  # Prometheus self-monitoring
  # ========================================
  - job_name: 'prometheus'
    scrape_interval: 15s
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: /metrics
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: localhost:9090

  # ========================================
  # Application metrics
  # ========================================
  - job_name: '{{projectName}}'
    scrape_interval: {{appScrapeInterval}}
    scrape_timeout: 10s
    metrics_path: /metrics
    static_configs:
      - targets:
        {{#each applicationTargets}}
        - '{{this}}'
        {{/each}}
        labels:
          service: '{{projectName}}'
          environment: '{{environment}}'
    relabel_configs:
      # Add service label
      - target_label: service
        replacement: '{{projectName}}'
      # Add environment label
      - target_label: environment
        replacement: '{{environment}}'
    metric_relabel_configs:
      # Drop unnecessary metrics to reduce cardinality
      - source_labels: [__name__]
        regex: 'nodejs_version_info|process_start_time_seconds'
        action: drop

  # ========================================
  # Infrastructure monitoring
  # ========================================
  {{#if enableNodeExporter}}
  - job_name: 'node-exporter'
    scrape_interval: 30s
    scrape_timeout: 10s
    static_configs:
      - targets:
        {{#each nodeExporterTargets}}
        - '{{this}}'
        {{/each}}
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^:]+):(.*)'
        target_label: instance
        replacement: '${1}'
      - source_labels: [__address__]
        regex: '([^:]+):(.*)'
        target_label: __address__
        replacement: '${1}:9100'
    metric_relabel_configs:
      # Drop filesystem metrics for system mounts
      - source_labels: [__name__, mountpoint]
        regex: 'node_filesystem_.*;/sys/.*|/proc/.*|/dev/.*'
        action: drop
      # Drop network interface metrics for virtual interfaces
      - source_labels: [__name__, device]
        regex: 'node_network_.*;veth.*|docker.*|br-.*'
        action: drop
  {{/if}}

  {{#if enableCadvisor}}
  - job_name: 'cadvisor'
    scrape_interval: 30s
    scrape_timeout: 10s
    static_configs:
      - targets:
        {{#each cadvisorTargets}}
        - '{{this}}'
        {{/each}}
    metric_relabel_configs:
      # Only keep container metrics we care about
      - source_labels: [__name__]
        regex: 'container_(cpu_usage_seconds_total|memory_usage_bytes|network_.*_bytes_total|fs_.*_bytes)'
        action: keep
      # Drop system containers
      - source_labels: [__name__, container_label_io_kubernetes_pod_name]
        regex: 'container_.*;'
        action: drop
      # Drop pause containers
      - source_labels: [__name__, container_label_io_kubernetes_container_name]
        regex: 'container_.*;POD'
        action: drop
  {{/if}}

  {{#if enableBlackboxExporter}}
  - job_name: 'blackbox-http'
    scrape_interval: 30s
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        {{#each blackboxTargets}}
        - '{{this}}'
        {{/each}}
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  - job_name: 'blackbox-tcp'
    scrape_interval: 30s
    metrics_path: /probe
    params:
      module: [tcp_connect]
    static_configs:
      - targets:
        {{#each tcpTargets}}
        - '{{this}}'
        {{/each}}
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115
  {{/if}}

  # ========================================
  # Database monitoring
  # ========================================
  {{#if enablePostgresExporter}}
  - job_name: 'postgres-exporter'
    scrape_interval: 30s
    static_configs:
      - targets:
        {{#each postgresTargets}}
        - '{{this}}'
        {{/each}}
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
    metric_relabel_configs:
      # Keep only essential PostgreSQL metrics
      - source_labels: [__name__]
        regex: 'pg_(up|database_size_bytes|stat_database_.*|locks_count|connections|settings_.*)'
        action: keep
  {{/if}}

  {{#if enableRedisExporter}}
  - job_name: 'redis-exporter'
    scrape_interval: 30s
    static_configs:
      - targets:
        {{#each redisTargets}}
        - '{{this}}'
        {{/each}}
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
    metric_relabel_configs:
      # Keep only essential Redis metrics
      - source_labels: [__name__]
        regex: 'redis_(up|connected_clients|used_memory_bytes|commands_processed_total|keyspace_hits_total|keyspace_misses_total)'
        action: keep
  {{/if}}

  # ========================================
  # Kubernetes monitoring
  # ========================================
  {{#if enableKubernetes}}
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            {{#each kubernetesNamespaces}}
            - {{this}}
            {{/each}}
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: false
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_service_name]
        target_label: job
        replacement: apiserver

  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: false
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

  - job_name: 'kubernetes-cadvisor'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: false
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
    metric_relabel_configs:
      # Drop container metrics for system containers
      - source_labels: [container_name]
        regex: '^$'
        action: drop
      - source_labels: [container_name]
        regex: 'POD'
        action: drop

  - job_name: 'kubernetes-service-endpoints'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            {{#each kubernetesNamespaces}}
            - {{this}}
            {{/each}}
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

  - job_name: 'kubernetes-services'
    kubernetes_sd_configs:
      - role: service
        namespaces:
          names:
            {{#each kubernetesNamespaces}}
            - {{this}}
            {{/each}}
    metrics_path: /probe
    params:
      module: [http_2xx]
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox-exporter:9115
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name

  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            {{#each kubernetesNamespaces}}
            - {{this}}
            {{/each}}
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
  {{/if}}

  # ========================================
  # Service discovery configurations
  # ========================================
  {{#each staticConfigs}}
  - job_name: '{{jobName}}'
    scrape_interval: {{scrapeInterval}}
    scrape_timeout: {{scrapeTimeout}}
    metrics_path: {{metricsPath}}
    static_configs:
      - targets:
        {{#each targets}}
        - '{{this}}'
        {{/each}}
        {{#if labels}}
        labels:
          {{#each labels}}
          {{@key}}: '{{this}}'
          {{/each}}
        {{/if}}
    {{#if relabelConfigs}}
    relabel_configs:
      {{#each relabelConfigs}}
      - source_labels: [{{#each sourceLabels}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}]
        target_label: {{targetLabel}}
        {{#if regex}}
        regex: {{regex}}
        {{/if}}
        {{#if replacement}}
        replacement: {{replacement}}
        {{/if}}
        action: {{action}}
      {{/each}}
    {{/if}}
    {{#if metricRelabelConfigs}}
    metric_relabel_configs:
      {{#each metricRelabelConfigs}}
      - source_labels: [{{#each sourceLabels}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}]
        {{#if targetLabel}}
        target_label: {{targetLabel}}
        {{/if}}
        {{#if regex}}
        regex: {{regex}}
        {{/if}}
        {{#if replacement}}
        replacement: {{replacement}}
        {{/if}}
        action: {{action}}
      {{/each}}
    {{/if}}
  {{/each}}

# Storage configuration
storage:
  tsdb:
    path: {{dataDir}}
    retention.time: {{retentionTime}}
    retention.size: {{retentionSize}}
    # Enable native histogram support (Prometheus 3.0 feature)
    enable_native_histograms: true
    # Compression settings
    wal-compression: true
    # Head compaction settings
    head_chunks_write_queue_size: 100000

# ========================================
# Tracing configuration (Prometheus 3.0)
# ========================================
{{#if enableTracing}}
tracing:
  endpoint: {{tracingEndpoint}}
  sampling_fraction: {{tracingSamplingFraction}}
  headers:
    {{#each tracingHeaders}}
    {{@key}}: {{this}}
    {{/each}}
{{/if}}

# ========================================
# Query settings
# ========================================
query:
  # Maximum number of samples a single query can load
  max_samples: 50000000
  # Maximum time range for a query
  timeout: 2m
  # Enable @ modifier and negative offset
  enable_at_modifier: true
  enable_negative_offset: true

# ========================================
# Feature flags (Prometheus 3.0)
# ========================================
feature_flags:
  - enable-new-stats
  - enable-per-step-stats
  {{#if enableRemoteWriteReceiver}}
  - enable-remote-write-receiver
  {{/if}}
  {{#if enableExemplarStorage}}
  - enable-exemplar-storage
  {{/if}}
  {{#if enableNativeHistograms}}
  - enable-native-histograms
  {{/if}}
  {{#if enableOTLPWriteReceiver}}
  - enable-otlp-write-receiver
  {{/if}}