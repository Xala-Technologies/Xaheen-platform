# Docker Compose configuration for {{projectType}} application
# Generated by Xaheen CLI on {{timestamp}}
# Environment: {{environment}}

version: '3.8'

services:
  # Main application service
  {{imageName}}:
    build:
      context: {{buildContext}}
      dockerfile: Dockerfile
      {{#if enableMultiStage}}
      target: runtime
      {{/if}}
      args:
        - NODE_ENV={{environment}}
        - BUILD_DATE={{timestamp}}
        - VERSION={{imageTag}}
        {{#each customBuildArgs}}
        - {{this}}
        {{/each}}
      {{#if enableCaching}}
      cache_from:
        - {{registryUrl}}/{{imageName}}:cache
        - {{registryUrl}}/{{imageName}}:latest
      {{/if}}
    container_name: {{imageName}}-{{environment}}
    restart: unless-stopped
    ports:
      - "{{port}}:{{port}}"
      {{#each exposePorts}}
      - "{{this}}:{{this}}"
      {{/each}}
      {{#if enablePrometheus}}
      - "9090:9090"  # Prometheus metrics
      {{/if}}
    environment:
      - NODE_ENV={{environment}}
      - PORT={{port}}
      - SERVICE_NAME={{imageName}}
      - SERVICE_VERSION={{imageTag}}
      {{#if enableTracing}}
      - JAEGER_SERVICE_NAME={{imageName}}
      - JAEGER_AGENT_HOST=jaeger-agent
      - JAEGER_AGENT_PORT=6832
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger-collector:14268/api/traces
      {{/if}}
      {{#if enableLogging}}
      - LOG_LEVEL={{#if (eq environment "development")}}debug{{else}}info{{/if}}
      - LOG_FORMAT=json
      {{/if}}
      {{#each environmentVariables}}
      - {{@key}}={{this}}
      {{/each}}
    {{#if volumes}}
    volumes:
      {{#each volumes}}
      - {{source}}:{{target}}{{#if readonly}}:ro{{/if}}
      {{/each}}
    {{/if}}
    {{#if enableHealthCheck}}
    healthcheck:
      test: {{healthCheck}}
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    {{/if}}
    {{#if enableSecurity}}
    security_opt:
      - no-new-privileges:true
    {{#if readonlyRootfs}}
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    {{/if}}
    {{/if}}
    {{#if dependsOn}}
    depends_on:
      {{#each dependsOn}}
      {{this}}:
        condition: service_healthy
      {{/each}}
    {{/if}}
    {{#if networkMode}}
    network_mode: {{networkMode}}
    {{else}}
    networks:
      - app-network
    {{/if}}
    {{#if enableSecrets}}
    secrets:
      {{#each secrets}}
      - {{this}}
      {{/each}}
    {{/if}}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{imageName}}.rule=Host(`{{imageName}}.local`)"
      - "traefik.http.services.{{imageName}}.loadbalancer.server.port={{port}}"
      - "com.xaheen.project={{imageName}}"
      - "com.xaheen.environment={{environment}}"
      - "com.xaheen.version={{imageTag}}"

{{#if (eq projectType "fullstack")}}
  # Database service
  database:
    image: postgres:15-alpine
    container_name: {{imageName}}-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-{{imageName}}}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: {{imageName}}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
{{/if}}

{{#if enablePrometheus}}
  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: {{imageName}}-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    depends_on:
      - {{imageName}}

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: {{imageName}}-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - app-network
    depends_on:
      - prometheus
{{/if}}

{{#if enableTracing}}
  # Jaeger tracing
  jaeger-collector:
    image: jaegertracing/jaeger-collector:latest
    container_name: {{imageName}}-jaeger-collector
    restart: unless-stopped
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    ports:
      - "14268:14268"
      - "14250:14250"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  jaeger-agent:
    image: jaegertracing/jaeger-agent:latest
    container_name: {{imageName}}-jaeger-agent
    restart: unless-stopped
    command: ["--collector.host-port=jaeger-collector:14267"]
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
    networks:
      - app-network
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    container_name: {{imageName}}-jaeger-query
    restart: unless-stopped
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    ports:
      - "16686:16686"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  # Elasticsearch for Jaeger storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: {{imageName}}-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network
{{/if}}

{{#if enableLogging}}
  # Loki log aggregation
  loki:
    image: grafana/loki:latest
    container_name: {{imageName}}-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - app-network

  # Promtail log collector
  promtail:
    image: grafana/promtail:latest
    container_name: {{imageName}}-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - app-network
    depends_on:
      - loki
{{/if}}

{{#if enableSecurity}}
  # Security scanning with Trivy
  trivy:
    image: aquasec/trivy:latest
    container_name: {{imageName}}-trivy
    volumes:
      - ./.trivycache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: ["server", "--listen", "0.0.0.0:8080"]
    ports:
      - "8080:8080"
    networks:
      - app-network
{{/if}}

{{#if (eq environment "development")}}
  # Development tools
  mailhog:
    image: mailhog/mailhog:latest
    container_name: {{imageName}}-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - app-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: {{imageName}}-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
    networks:
      - app-network
    depends_on:
      - database
{{/if}}

# Networks
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  {{#if (eq projectType "fullstack")}}
  postgres_data:
    driver: local
  redis_data:
    driver: local
  {{/if}}
  {{#if enablePrometheus}}
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  {{/if}}
  {{#if enableTracing}}
  elasticsearch_data:
    driver: local
  {{/if}}
  {{#if enableLogging}}
  loki_data:
    driver: local
  {{/if}}

{{#if enableSecrets}}
# Secrets
secrets:
  {{#each secrets}}
  {{this}}:
    external: true
  {{/each}}
{{/if}}