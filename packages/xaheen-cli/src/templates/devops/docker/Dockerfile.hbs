# Multi-stage Dockerfile for {{projectType}} application
# Generated by Xaheen CLI on {{timestamp}}
# Runtime: {{runtime}} | Environment: {{environment}}
# Security: {{#if enableSecurity}}Enabled{{else}}Disabled{{/if}} | Multi-stage: {{#if enableMultiStage}}Enabled{{else}}Disabled{{/if}}

{{#if enableMultiStage}}
# Dependencies stage
FROM {{baseImage}} AS dependencies

{{#if enableSecurity}}
# Security: Update packages and install security tools
{{#if (includes baseImage "alpine")}}
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache ca-certificates tzdata && \
    update-ca-certificates
{{else}}
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends ca-certificates curl && \
    rm -rf /var/lib/apt/lists/*
{{/if}}
{{/if}}

{{#if enableNonRootUser}}
# Create non-root user with specific UID/GID
{{#if (includes baseImage "alpine")}}
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser
{{else}}
RUN groupadd --gid 1001 appuser && \
    useradd --uid 1001 --gid appuser --shell /bin/bash --create-home appuser
{{/if}}
{{/if}}

# Set working directory
WORKDIR {{workdir}}

# Copy dependency files first for better caching
{{#if (eq runtime "node")}}
COPY package*.json ./
{{#if (eq packageManager "yarn")}}
COPY yarn.lock ./
{{/if}}
{{#if (eq packageManager "pnpm")}}
COPY pnpm-lock.yaml ./
{{/if}}
{{#if (eq packageManager "bun")}}
COPY bun.lockb ./
{{/if}}

# Install dependencies with caching and security optimizations
{{#if optimizeForSize}}
RUN {{#if (eq packageManager "npm")}}npm ci --only=production --no-audit --no-fund{{/if}}{{#if (eq packageManager "yarn")}}yarn install --frozen-lockfile --production --ignore-optional{{/if}}{{#if (eq packageManager "pnpm")}}pnpm install --frozen-lockfile --prod --ignore-scripts{{/if}}{{#if (eq packageManager "bun")}}bun install --frozen-lockfile --production{{/if}} && \
    {{#if (eq packageManager "npm")}}npm cache clean --force{{/if}}{{#if (eq packageManager "yarn")}}yarn cache clean{{/if}}{{#if (eq packageManager "pnpm")}}pnpm store prune{{/if}}
{{else}}
RUN {{#if (eq packageManager "npm")}}npm ci --no-audit --no-fund{{/if}}{{#if (eq packageManager "yarn")}}yarn install --frozen-lockfile{{/if}}{{#if (eq packageManager "pnpm")}}pnpm install --frozen-lockfile{{/if}}{{#if (eq packageManager "bun")}}bun install --frozen-lockfile{{/if}}
{{/if}}
{{/if}}

{{#if (eq runtime "python")}}
COPY requirements.txt pyproject.toml* setup.py* ./
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip cache purge
{{/if}}

{{#if (eq runtime "go")}}
COPY go.mod go.sum ./
RUN go mod download && \
    go mod verify
{{/if}}

{{#if (eq runtime "java")}}
COPY pom.xml ./
COPY src/main/resources ./src/main/resources
RUN mvn dependency:go-offline -B --no-transfer-progress
{{/if}}

{{#if (eq runtime "dotnet")}}
COPY *.csproj *.sln ./
RUN dotnet restore --verbosity minimal
{{/if}}

{{#if (eq runtime "rust")}}
COPY Cargo.toml Cargo.lock ./
RUN mkdir src && echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src target/release/deps/{{imageName}}*
{{/if}}

# Build stage
FROM dependencies AS builder

# Copy source code (use .dockerignore to exclude unnecessary files)
COPY . .

{{#if enableNonRootUser}}
# Fix ownership before building
RUN chown -R appuser:appuser {{workdir}}
USER appuser
{{/if}}

# Build application with optimizations
{{#if (eq runtime "node")}}
RUN {{#if (eq packageManager "npm")}}npm run build{{/if}}{{#if (eq packageManager "yarn")}}yarn build{{/if}}{{#if (eq packageManager "pnpm")}}pnpm build{{/if}}{{#if (eq packageManager "bun")}}bun run build{{/if}} && \
    {{#if (eq packageManager "npm")}}npm prune --production{{/if}}{{#if (eq packageManager "yarn")}}yarn install --production --ignore-optional{{/if}}{{#if (eq packageManager "pnpm")}}pnpm prune --prod{{/if}}
{{/if}}

{{#if (eq runtime "python")}}
RUN python -m py_compile $(find . -name "*.py") && \
    {{#if optimizeForSize}}python -O -m compileall .{{/if}}
{{/if}}

{{#if (eq runtime "go")}}
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags "-s -w -X main.version={{imageTag}} -X main.buildTime={{timestamp}}" \
    -o main .
{{/if}}

{{#if (eq runtime "java")}}
RUN mvn clean package -DskipTests -B --no-transfer-progress && \
    mvn dependency:copy-dependencies -DoutputDirectory=target/lib
{{/if}}

{{#if (eq runtime "dotnet")}}
RUN dotnet publish -c Release -o out --no-restore \
    --verbosity minimal --nologo
{{/if}}

{{#if (eq runtime "rust")}}
COPY src ./src
RUN cargo build --release --target x86_64-unknown-linux-musl && \
    strip target/x86_64-unknown-linux-musl/release/{{imageName}}
{{/if}}

{{#if enableSecurity}}
# Security: Remove unnecessary packages
{{#if (eq runtime "node")}}
RUN npm prune --production
{{/if}}
{{/if}}

# Runtime stage
FROM {{baseImage}} AS runtime
{{else}}
# Single-stage Dockerfile
FROM {{baseImage}}
{{/if}}

{{#if enableSecurity}}
# Security: Install security updates
{{#if (includes baseImage "alpine")}}
RUN apk update && apk upgrade && apk add --no-cache dumb-init
{{else}}
RUN apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends dumb-init && \
    rm -rf /var/lib/apt/lists/*
{{/if}}
{{/if}}

{{#if enableNonRootUser}}
# Create non-root user
{{#if (includes baseImage "alpine")}}
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001
{{else}}
RUN groupadd --gid 1001 nodejs && \
    useradd --uid 1001 --gid nodejs --shell /bin/bash --create-home nodejs
{{/if}}
{{/if}}

# Set working directory
WORKDIR {{workdir}}

{{#if enableMultiStage}}
# Copy built application from builder stage
{{#if (eq runtime "node")}}
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/dist ./dist
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/package*.json ./
{{/if}}

{{#if (eq runtime "python")}}
COPY --from=builder --chown=nodejs:nodejs /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder --chown=nodejs:nodejs {{workdir}} .
{{/if}}

{{#if (eq runtime "go")}}
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/main .
{{/if}}

{{#if (eq runtime "java")}}
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/target/*.jar app.jar
{{/if}}

{{#if (eq runtime "dotnet")}}
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/out .
{{/if}}

{{#if (eq runtime "rust")}}
COPY --from=builder --chown=nodejs:nodejs {{workdir}}/target/release/{{imageName}} .
{{/if}}
{{else}}
# Copy application files
COPY . .

{{#if (eq runtime "node")}}
# Install dependencies
RUN {{#if (eq packageManager "npm")}}npm ci{{/if}}{{#if (eq packageManager "yarn")}}yarn install --frozen-lockfile{{/if}}{{#if (eq packageManager "pnpm")}}pnpm install --frozen-lockfile{{/if}}{{#if (eq packageManager "bun")}}bun install --frozen-lockfile{{/if}}

# Build application
RUN {{#if (eq packageManager "npm")}}npm run build{{/if}}{{#if (eq packageManager "yarn")}}yarn build{{/if}}{{#if (eq packageManager "pnpm")}}pnpm build{{/if}}{{#if (eq packageManager "bun")}}bun run build{{/if}}
{{/if}}

{{#if (eq runtime "python")}}
RUN pip install --no-cache-dir -r requirements.txt
{{/if}}

{{#if (eq runtime "go")}}
RUN go mod download && \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .
{{/if}}

{{#if (eq runtime "java")}}
RUN mvn clean package -DskipTests
{{/if}}

{{#if (eq runtime "dotnet")}}
RUN dotnet restore && \
    dotnet publish -c Release -o out
{{/if}}

{{#if (eq runtime "rust")}}
RUN cargo build --release
{{/if}}
{{/if}}

{{#if enableNonRootUser}}
# Change ownership to non-root user
RUN chown -R nodejs:nodejs {{workdir}}

# Switch to non-root user
USER nodejs
{{/if}}

# Expose port
EXPOSE {{port}}

{{#if enableHealthCheck}}
# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD {{healthCheck}}
{{/if}}

{{#if enablePrometheus}}
# Expose metrics port
EXPOSE 9090
{{/if}}

# Environment variables
ENV NODE_ENV={{environment}}
ENV PORT={{port}}
{{#each customBuildArgs}}
ENV {{this}}
{{/each}}

# Start command
{{#if (eq runtime "node")}}
{{#if enableSecurity}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]
{{else}}
CMD ["node", "dist/index.js"]
{{/if}}
{{/if}}

{{#if (eq runtime "python")}}
{{#if enableSecurity}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["python", "app.py"]
{{else}}
CMD ["python", "app.py"]
{{/if}}
{{/if}}

{{#if (eq runtime "go")}}
{{#if enableSecurity}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["./main"]
{{else}}
CMD ["./main"]
{{/if}}
{{/if}}

{{#if (eq runtime "java")}}
{{#if enableSecurity}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["java", "-jar", "app.jar"]
{{else}}
CMD ["java", "-jar", "app.jar"]
{{/if}}
{{/if}}

{{#if (eq runtime "dotnet")}}
{{#if enableSecurity}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["dotnet", "{{imageName}}.dll"]
{{else}}
CMD ["dotnet", "{{imageName}}.dll"]
{{/if}}
{{/if}}

{{#if (eq runtime "rust")}}
{{#if enableSecurity}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["./{{imageName}}"]
{{else}}
CMD ["./{{imageName}}"]
{{/if}}
{{/if}}

# Labels for metadata
LABEL maintainer="Xaheen CLI <info@xaheen.com>"
LABEL version="{{imageTag}}"
LABEL description="{{projectType}} application built with {{runtime}}"
LABEL org.opencontainers.image.source="https://github.com/xaheen/{{imageName}}"
LABEL org.opencontainers.image.created="{{timestamp}}"
LABEL org.opencontainers.image.revision="{{imageTag}}"
LABEL org.opencontainers.image.licenses="MIT"