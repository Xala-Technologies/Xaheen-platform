# Production Docker Compose Configuration
# Generated by Xaheen CLI - Complete monitoring stack with security

version: '3.8'

services:
  # ========================================
  # Application Service
  # ========================================
  {{projectName}}:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    image: {{registryUrl}}/{{projectName}}:{{imageTag}}
    container_name: {{projectName}}-app
    ports:
      - "{{port}}:{{port}}"
    environment:
      - NODE_ENV=production
      - PORT={{port}}
      {{#each environmentVariables}}
      - {{@key}}={{this}}
      {{/each}}
    {{#if enableHealthCheck}}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{port}}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    {{/if}}
    restart: unless-stopped
    networks:
      - app-network
      - monitoring-network
    volumes:
      - app-logs:/app/logs
    deploy:
      resources:
        limits:
          memory: {{memoryLimit}}
          cpus: '{{cpuLimit}}'
        reservations:
          memory: {{memoryReservation}}
          cpus: '{{cpuReservation}}'
    depends_on:
      {{#if useDatabase}}
      - database
      {{/if}}
      {{#if useRedis}}
      - redis
      {{/if}}
      {{#if enableMonitoring}}
      - prometheus
      - loki
      {{/if}}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{projectName}}.rule=Host(`{{hostname}}`)"
      - "traefik.http.routers.{{projectName}}.entrypoints=websecure"
      - "traefik.http.routers.{{projectName}}.tls.certresolver=letsencrypt"

  {{#if useDatabase}}
  # ========================================
  # Database Service
  # ========================================
  database:
    image: postgres:15-alpine
    container_name: {{projectName}}-db
    environment:
      - POSTGRES_DB={{databaseName}}
      - POSTGRES_USER={{databaseUser}}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    ports:
      - "{{databasePort}}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{databaseUser}} -d {{databaseName}}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
  {{/if}}

  {{#if useRedis}}
  # ========================================
  # Redis Cache Service
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: {{projectName}}-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    ports:
      - "{{redisPort}}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
  {{/if}}

  {{#if enableMonitoring}}
  # ========================================
  # Monitoring Stack
  # ========================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: {{projectName}}-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring-network
    depends_on:
      - node-exporter
      - cadvisor

  grafana:
    image: grafana/grafana:10.2.0
    container_name: {{projectName}}-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER={{grafanaUser}}
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - monitoring-network
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:2.9.0
    container_name: {{projectName}}-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring-network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: {{projectName}}-promtail
    volumes:
      - app-logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - monitoring-network
    depends_on:
      - loki

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: {{projectName}}-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=info
    volumes:
      - jaeger_data:/badger
    restart: unless-stopped
    networks:
      - monitoring-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: {{projectName}}-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: {{projectName}}-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring-network

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: {{projectName}}-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring-network
  {{/if}}

  {{#if enableReverseProxy}}
  # ========================================
  # Reverse Proxy & Load Balancer
  # ========================================
  traefik:
    image: traefik:v3.0
    container_name: {{projectName}}-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik_data:/data
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
    restart: unless-stopped
    networks:
      - app-network
      - monitoring-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.{{hostname}}`)"
  {{/if}}

# ========================================
# Networks
# ========================================
networks:
  app-network:
    driver: bridge
    name: {{projectName}}-app-network
  monitoring-network:
    driver: bridge
    name: {{projectName}}-monitoring-network

# ========================================
# Volumes
# ========================================
volumes:
  {{#if useDatabase}}
  postgres_data:
    driver: local
  {{/if}}
  {{#if useRedis}}
  redis_data:
    driver: local
  {{/if}}
  app-logs:
    driver: local
  {{#if enableMonitoring}}
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  jaeger_data:
    driver: local
  alertmanager_data:
    driver: local
  {{/if}}
  {{#if enableReverseProxy}}
  traefik_data:
    driver: local
  {{/if}}

# ========================================
# Secrets
# ========================================
secrets:
  {{#if useDatabase}}
  db_password:
    file: ./secrets/db_password.txt
  {{/if}}
  {{#if useRedis}}
  redis_password:
    file: ./secrets/redis_password.txt
  {{/if}}
  {{#if enableMonitoring}}
  grafana_password:
    file: ./secrets/grafana_password.txt
  {{/if}}

# ========================================
# Configuration
# ========================================
configs:
  prometheus_config:
    file: ./monitoring/prometheus.yml
  grafana_datasources:
    file: ./monitoring/grafana/datasources/datasources.yml