# Multi-stage Node.js/TypeScript Dockerfile
# Generated by Xaheen CLI - Production Ready with Security & Performance Optimizations

# ========================================
# Stage 1: Base dependencies and tools
# ========================================
FROM node:{{nodeVersion}}-alpine AS base

# Install security updates and essential packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=UTC

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy package files for dependency installation
COPY --chown=nextjs:nodejs package*.json ./
{{#if hasPnpm}}
COPY --chown=nextjs:nodejs pnpm-lock.yaml ./
{{/if}}
{{#if hasYarn}}
COPY --chown=nextjs:nodejs yarn.lock ./
{{/if}}

# ========================================
# Stage 2: Development dependencies
# ========================================
FROM base AS dev-deps

{{#if hasPnpm}}
# Install pnpm
RUN npm install -g pnpm@latest
RUN pnpm install --frozen-lockfile
{{else if hasYarn}}
# Install yarn
RUN npm install -g yarn@latest
RUN yarn install --frozen-lockfile
{{else}}
# Install all dependencies (including dev)
RUN npm ci --include=dev --frozen-lockfile
{{/if}}

# ========================================
# Stage 3: Production dependencies only
# ========================================
FROM base AS prod-deps

{{#if hasPnpm}}
RUN npm install -g pnpm@latest
RUN pnpm install --frozen-lockfile --prod
{{else if hasYarn}}
RUN npm install -g yarn@latest
RUN yarn install --frozen-lockfile --production
{{else}}
RUN npm ci --only=production --frozen-lockfile
{{/if}}

# Clean npm cache
RUN npm cache clean --force

# ========================================
# Stage 4: Build stage
# ========================================
FROM dev-deps AS build

# Copy source code
COPY --chown=nextjs:nodejs . .

# Build the application
{{#if buildCommand}}
RUN {{buildCommand}}
{{else}}
RUN npm run build
{{/if}}

# Remove development dependencies
RUN rm -rf node_modules

# Copy production dependencies from prod-deps stage
COPY --from=prod-deps /app/node_modules ./node_modules

# ========================================
# Stage 5: Security scanning (optional)
# ========================================
{{#if enableSecurity}}
FROM build AS security-scan

# Install Trivy for vulnerability scanning
RUN apk add --no-cache wget
RUN wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | \
    tar xz -C /usr/local/bin

# Run security scans
RUN npm audit --audit-level moderate || true
RUN trivy filesystem --exit-code 0 --no-progress --security-checks vuln . || true
{{/if}}

# ========================================
# Stage 6: Runtime stage (Distroless for maximum security)
# ========================================
{{#if useDistroless}}
FROM gcr.io/distroless/nodejs{{nodeVersionMajor}}-debian11 AS production
{{else}}
FROM node:{{nodeVersion}}-alpine AS production

# Install only runtime essentials
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001
{{/if}}

# Set environment variables
ENV NODE_ENV=production
ENV PORT={{port}}
ENV TZ=UTC

{{#unless useDistroless}}
# Switch to non-root user
USER nextjs
{{else}}
USER nonroot
{{/unless}}

WORKDIR /app

# Copy built application and dependencies
{{#if useDistroless}}
COPY --from=build --chown=nonroot:nonroot /app/dist ./dist
COPY --from=build --chown=nonroot:nonroot /app/node_modules ./node_modules
COPY --from=build --chown=nonroot:nonroot /app/package*.json ./
{{else}}
COPY --from=build --chown=nextjs:nodejs /app/dist ./dist
COPY --from=build --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/package*.json ./
{{/if}}

# Create temp directory for non-root user
{{#unless useDistroless}}
RUN mkdir -p /tmp && chown nextjs:nodejs /tmp
{{/unless}}

# Expose port
EXPOSE {{port}}

# Health check
{{#if enableHealthCheck}}
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:{{port}}/health || exit 1
{{/if}}

# Security labels
LABEL maintainer="Xaheen CLI" \
      version="{{version}}" \
      description="{{projectName}} - Production Ready" \
      security="hardened" \
      "org.opencontainers.image.title"="{{projectName}}" \
      "org.opencontainers.image.description"="{{description}}" \
      "org.opencontainers.image.version"="{{version}}" \
      "org.opencontainers.image.created"="{{timestamp}}" \
      "org.opencontainers.image.source"="{{repositoryUrl}}"

# Start the application
{{#if useDistroless}}
CMD ["dist/main.js"]
{{else}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"]
{{/if}}