/**
 * Server-Sent Events Controller
 * Generated by Xaheen CLI
 */

import { Controller, Get, Req, Res, Query, UseGuards, Logger } from '@nestjs/common';
import { Request, Response } from 'express';
import { {{pascalCase name}}SSEService } from './{{kebabCase name}}-sse.service';
{{#if authentication.enabled}}
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
{{/if}}

@Controller('sse')
export class {{pascalCase name}}SSEController {
  private readonly logger = new Logger({{pascalCase name}}SSEController.name);

  constructor(
    private readonly sseService: {{pascalCase name}}SSEService
  ) {}

  {{#each features}}
  @Get('{{kebabCase this}}')
  {{#if ../authentication.enabled}}
  @UseGuards(JwtAuthGuard)
  {{/if}}
  async {{camelCase this}}(
    @Req() req: Request,
    @Res() res: Response,
    @Query() query: any
  ): Promise<void> {
    const connectionId = this.generateConnectionId();
    const userId = this.extractUserId(req);

    // Set SSE headers
    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Cache-Control'
    });

    // Send initial connection event
    this.sendEvent(res, 'connected', {
      connectionId,
      feature: '{{this}}',
      timestamp: Date.now()
    });

    try {
      await this.sseService.handleConnection(
        connectionId,
        '{{this}}',
        req,
        res,
        query,
        userId
      );
    } catch (error) {
      this.logger.error(`SSE connection error for {{this}}:`, error);
      this.sendEvent(res, 'error', {
        error: error.message,
        timestamp: Date.now()
      });
      res.end();
    }

    // Handle client disconnect
    req.on('close', () => {
      this.sseService.handleDisconnection(connectionId);
    });

    req.on('error', (error) => {
      this.logger.error(`SSE request error:`, error);
      this.sseService.handleDisconnection(connectionId);
    });
  }
  {{/each}}

  @Get('health')
  async health(): Promise<{ status: string; connections: number }> {
    return this.sseService.getHealthStatus();
  }

  @Get('metrics')
  async metrics(): Promise<any> {
    return this.sseService.getMetrics();
  }

  private sendEvent(res: Response, event: string, data: any): void {
    res.write(`event: ${event}\n`);
    res.write(`data: ${JSON.stringify(data)}\n\n`);
  }

  private generateConnectionId(): string {
    return `sse_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private extractUserId(req: Request): string | undefined {
    // Extract user ID from JWT token, session, or other auth mechanism
    return (req as any).user?.id;
  }
}