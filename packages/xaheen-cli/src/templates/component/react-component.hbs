/**
 * {{className}} Component
 *
 * Generated by Xaheen CLI Component Generator
 * @since {{generatedAt}}
 */

import React{{#if hooks}}, { useState, useCallback, useMemo }{{/if}} from 'react';
{{#if (eq styling 'styled-components')}}
import styled from 'styled-components';
{{/if}}
{{#if ai}}
// AI Generated Content: {{ai}}
{{/if}}

{{#if props}}
interface {{className}}Props {
{{#each props}}
  readonly {{name}}{{#if optional}}?{{/if}}: {{#if (eq type 'function')}}() => void{{else if (eq type 'object')}}Record<string, any>{{else if (eq type 'array')}}any[]{{else}}{{type}}{{/if}};
{{/each}}
}
{{else}}
interface {{className}}Props {
  readonly children?: React.ReactNode;
}
{{/if}}

/**
 * {{className}} - A reusable React component
 * 
 * {{#if ai}}
 * AI Description: {{ai}}
 * {{else}}
 * Description: Add your component description here
 * {{/if}}
 */
export const {{className}}: React.FC<{{className}}Props> = ({{#if props}}{
{{#each props}}
  {{name}}{{#if optional}} = {{#if (eq type 'string')}}''{{else if (eq type 'number')}}0{{else if (eq type 'boolean')}}false{{else if (eq type 'object')}}{}{{else if (eq type 'array')}}[]{{else if (eq type 'function')}}() => {}{{else}}undefined{{/if}}{{/if}},
{{/each}}
}{{else}}{ children }{{/if}}: {{className}}Props): JSX.Element => {
  {{#if hooks}}
  // Component state
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Event handlers
  const handleAction = useCallback(() => {
    try {
      setIsLoading(true);
      setError(null);
      // Add your action logic here
      {{#each props}}
      {{#if (eq type 'function')}}
      {{name}}?.();
      {{/if}}
      {{/each}}
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  }, [{{#each props}}{{#if (eq type 'function')}}{{name}}{{#unless @last}}, {{/unless}}{{/if}}{{/each}}]);

  // Computed values
  const computedValue = useMemo(() => {
    // Add your computed logic here
    return `Computed value for {{className}}`;
  }, []);
  {{/if}}

  // Handle error state
  if (error) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Error</h3>
            <div className="mt-2 text-sm text-red-700">
              <p>{error}</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="{{#if (eq styling 'tailwind')}}p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow{{else}}component-container{{/if}}">
      {{#if hooks}}
      {/* Loading State */}
      {isLoading && (
        <div className="flex items-center justify-center p-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-3 text-gray-600">Loading...</span>
        </div>
      )}

      {/* Main Content */}
      {!isLoading && (
        <>
      {{/if}}
          <div className="{{#if (eq styling 'tailwind')}}space-y-4{{else}}content{{/if}}">
            <h2 className="{{#if (eq styling 'tailwind')}}text-2xl font-bold text-gray-900{{else}}title{{/if}}">
              {{#if props}}
              {{#each props}}
              {{#if (eq type 'string')}}
              {{{name}} || '{{../className}}'}
              {{/if}}
              {{/each}}
              {{else}}
              {{className}}
              {{/if}}
            </h2>
            
            {{#if ai}}
            <p className="{{#if (eq styling 'tailwind')}}text-gray-600 leading-relaxed{{else}}description{{/if}}">
              {{ai}}
            </p>
            {{else}}
            <p className="{{#if (eq styling 'tailwind')}}text-gray-600 leading-relaxed{{else}}description{{/if}}">
              This is the {{className}} component. Add your content here.
            </p>
            {{/if}}

            {{#if props}}
            {{#each props}}
            {{#if (eq type 'boolean')}}
            {{{name}} && (
              <div className="{{#if (eq ../styling 'tailwind')}}inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800{{else}}badge{{/if}}">
                {{name}} is enabled
              </div>
            )}
            {{else if (eq type 'number')}}
            <div className="{{#if (eq ../styling 'tailwind')}}text-sm text-gray-500{{else}}meta{{/if}}">
              {{name}}: {{{name}}}
            </div>
            {{else if (eq type 'array')}}
            {{{name}} && {{name}}.length > 0 && (
              <div className="{{#if (eq ../styling 'tailwind')}}space-y-2{{else}}list{{/if}}">
                <h3 className="{{#if (eq ../styling 'tailwind')}}text-lg font-semibold{{else}}list-title{{/if}}">{{name}}</h3>
                <ul className="{{#if (eq ../styling 'tailwind')}}list-disc list-inside space-y-1{{else}}list-items{{/if}}">
                  {{{name}}.map((item: any, index: number) => (
                    <li key={index} className="{{#if (eq ../styling 'tailwind')}}text-gray-600{{else}}list-item{{/if}}">
                      {typeof item === 'object' ? JSON.stringify(item) : item}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            {{/if}}
            {{/each}}
            {{/if}}

            {{#if children}}
            <div className="{{#if (eq styling 'tailwind')}}mt-6{{else}}children{{/if}}">
              {children}
            </div>
            {{/if}}

            {{#if hooks}}
            {/* Interactive Elements */}
            <div className="{{#if (eq styling 'tailwind')}}flex gap-4 mt-6{{else}}actions{{/if}}">
              <button
                onClick={handleAction}
                disabled={isLoading}
                className="{{#if (eq styling 'tailwind')}}h-12 px-6 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors shadow-md{{else}}primary-button{{/if}}"
                aria-label="Execute {{className}} action"
              >
                {isLoading ? 'Processing...' : 'Action'}
              </button>
              
              <div className="{{#if (eq styling 'tailwind')}}text-sm text-gray-500 flex items-center{{else}}info{{/if}}">
                Computed: {computedValue}
              </div>
            </div>
            {{/if}}
          </div>
      {{#if hooks}}
        </>
      )}
      {{/if}}
    </div>
  );
};

{{#if (eq styling 'styled-components')}}
// Styled Components
const ComponentContainer = styled.div`
  padding: 1.5rem;
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s ease;

  &:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  }
`;

const Title = styled.h2`
  font-size: 1.5rem;
  font-weight: bold;
  color: #1f2937;
  margin-bottom: 1rem;
`;

const Description = styled.p`
  color: #6b7280;
  line-height: 1.625;
  margin-bottom: 1rem;
`;
{{/if}}

// Export component for use in other files
export default {{className}};

{{#if typescript}}
// Type exports for external use
export type { {{className}}Props };
{{/if}}