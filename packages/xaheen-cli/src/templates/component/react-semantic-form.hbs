/**
 * {{className}} Form Component
 *
 * Generated by Xaheen CLI Form Generator - Semantic UI Version
 * @since {{timestamp}}
 */

import React, { useState, useCallback, useMemo } from 'react';
{{#if useSemanticUI}}
{{semanticImports}}
{{/if}}
{{#if useDesignTokens}}
{{designTokenImports}}
{{/if}}
{{#if useI18n}}
{{i18nHelpers}}
{{/if}}

{{#if fields}}
interface {{className}}FormData {
{{#each fields}}
  readonly {{name}}: {{#if (eq type 'string')}}string{{else if (eq type 'number')}}number{{else if (eq type 'boolean')}}boolean{{else if (eq type 'email')}}string{{else if (eq type 'date')}}string{{else}}string{{/if}};
{{/each}}
}

interface {{className}}FormErrors {
{{#each fields}}
  readonly {{name}}?: string;
{{/each}}
}
{{else}}
interface {{className}}FormData {
  readonly [key: string]: unknown;
}

interface {{className}}FormErrors {
  readonly [key: string]: string;
}
{{/if}}

interface {{className}}Props {
  readonly onSubmit: (data: {{className}}FormData) => Promise<void> | void;
  readonly initialData?: Partial<{{className}}FormData>;
  readonly isLoading?: boolean;
  readonly className?: string;
  readonly 'data-testid'?: string;
}

/**
 * {{className}} - A semantic form component following Xala design system
 * 
 * {{#if description}}
 * {{description}}
 * {{else}}
 * A modern, accessible form component built with semantic UI components.
 * Includes comprehensive validation, error handling, and WCAG AAA compliance.
 * {{/if}}
 * 
 * @param props - Form properties
 * @returns JSX.Element
 */
export const {{className}} = ({
  onSubmit,
  initialData = {},
  isLoading = false,
  className,
  'data-testid': testId = '{{kebabCase}}-form',
}: {{className}}Props): JSX.Element => {
  {{#if useI18n}}
  const { t } = useTranslation();
  {{/if}}

  // Form data state
  const [formData, setFormData] = useState<{{className}}FormData>(() => ({
    {{#if fields}}
    {{#each fields}}
    {{name}}: initialData.{{name}} ?? {{#if (eq type 'string')}}'{{default}}'{{else if (eq type 'number')}}{{default}}{{else if (eq type 'boolean')}}{{default}}{{else if (eq type 'email')}}'{{default}}'{{else if (eq type 'date')}}'{{default}}'{{else}}'{{default}}'{{/if}},
    {{/each}}
    {{else}}
    ...initialData,
    {{/if}}
  }));

  // Form validation errors
  const [errors, setErrors] = useState<{{className}}FormErrors>({});
  
  // Submission state
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [submitError, setSubmitError] = useState<string | null>(null);

  // Validation function
  const validateField = useCallback((name: string, value: unknown): string | undefined => {
    {{#if fields}}
    switch (name) {
      {{#each fields}}
      case '{{name}}':
        {{#if required}}
        if (!value || (typeof value === 'string' && value.trim() === '')) {
          return {{#if ../useI18n}}t('validation.required', 'This field is required'){{else}}'This field is required'{{/if}};
        }
        {{/if}}
        {{#if (eq type 'email')}}
        if (typeof value === 'string' && value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
          return {{#if ../useI18n}}t('validation.email.invalid', 'Please enter a valid email address'){{else}}'Please enter a valid email address'{{/if}};
        }
        {{/if}}
        {{#if minLength}}
        if (typeof value === 'string' && value.length < {{minLength}}) {
          return {{#if ../useI18n}}t('validation.minLength', 'Must be at least {{minLength}} characters'){{else}}'Must be at least {{minLength}} characters'{{/if}};
        }
        {{/if}}
        {{#if maxLength}}
        if (typeof value === 'string' && value.length > {{maxLength}}) {
          return {{#if ../useI18n}}t('validation.maxLength', 'Must be no more than {{maxLength}} characters'){{else}}'Must be no more than {{maxLength}} characters'{{/if}};
        }
        {{/if}}
        break;
      {{/each}}
      default:
        break;
    }
    {{/if}}
    return undefined;
  }, [{{#if useI18n}}t{{/if}}]);

  // Validate entire form
  const validateForm = useCallback((): boolean => {
    const newErrors: {{className}}FormErrors = {};
    let isValid = true;

    Object.entries(formData).forEach(([name, value]) => {
      const error = validateField(name, value);
      if (error) {
        newErrors[name] = error;
        isValid = false;
      }
    });

    setErrors(newErrors);
    return isValid;
  }, [formData, validateField]);

  // Handle field changes
  const handleFieldChange = useCallback((name: string, value: unknown): void => {
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear field error on change
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  }, [errors]);

  // Handle field blur for validation
  const handleFieldBlur = useCallback((name: string, value: unknown): void => {
    const error = validateField(name, value);
    if (error) {
      setErrors(prev => ({ ...prev, [name]: error }));
    }
  }, [validateField]);

  // Handle form submission
  const handleSubmit = useCallback(async (event: React.FormEvent<HTMLFormElement>): Promise<void> => {
    event.preventDefault();
    
    if (isSubmitting || isLoading) return;

    setSubmitError(null);
    
    if (!validateForm()) {
      return;
    }

    try {
      setIsSubmitting(true);
      await onSubmit(formData);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 
        {{#if useI18n}}t('form.submitError', 'An error occurred while submitting the form'){{else}}'An error occurred while submitting the form'{{/if}};
      setSubmitError(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  }, [formData, isSubmitting, isLoading, onSubmit, validateForm{{#if useI18n}}, t{{/if}}]);

  // Form state
  const isFormDisabled = isLoading || isSubmitting;

  return (
    <Container maxWidth="md" className={className} data-testid={testId}>
      <Card variant="elevated" padding={spacing.xl}>
        <Stack spacing={spacing.lg}>
          {/* Form Header */}
          <Stack spacing={spacing.sm}>
            <Text variant="heading" size="2xl" weight="bold" color="gray.900" as="h2">
              {{#if useI18n}}
              {t('{{kebabCase}}.title', '{{className}}')}
              {{else}}
              {{className}}
              {{/if}}
            </Text>
            {{#if description}}
            <Text variant="body" color="gray.600">
              {{#if useI18n}}
              {t('{{kebabCase}}.description', '{{description}}')}
              {{else}}
              {{description}}
              {{/if}}
            </Text>
            {{/if}}
          </Stack>

          {/* Error Alert */}
          {submitError && (
            <Card variant="outline" className="border-red-200 bg-red-50" padding={spacing.md}>
              <Stack direction="row" spacing={spacing.sm} align="start">
                <Text variant="body" color="red.700" weight="medium">
                  {{#if useI18n}}
                  {t('form.error.title', 'Error')}
                  {{else}}
                  Error
                  {{/if}}
                </Text>
              </Stack>
              <Text variant="body" color="red.600" className="mt-2">
                {submitError}
              </Text>
            </Card>
          )}

          {/* Form */}
          <form onSubmit={handleSubmit} noValidate>
            <Stack spacing={spacing.lg}>
              {{#if fields}}
              {{#each fields}}
              {/* {{name}} Field */}
              <Stack spacing={spacing.sm}>
                <Text 
                  variant="body" 
                  weight="medium" 
                  color="gray.700"
                  as="label"
                  htmlFor="{{name}}"
                >
                  {{#if ../useI18n}}
                  {t('{{../kebabCase}}.fields.{{name}}.label', '{{label}}')}
                  {{else}}
                  {{label}}{{#if required}} *{{/if}}
                  {{/if}}
                </Text>
                
                {{#if (eq type 'textarea')}}
                <textarea
                  id="{{name}}"
                  name="{{name}}"
                  value={formData.{{name}} as string}
                  onChange={(e) => handleFieldChange('{{name}}', e.target.value)}
                  onBlur={(e) => handleFieldBlur('{{name}}', e.target.value)}
                  disabled={isFormDisabled}
                  required={{#if required}}true{{else}}false{{/if}}
                  {{#if placeholder}}
                  placeholder={{{#if ../useI18n}}}t('{{../kebabCase}}.fields.{{name}}.placeholder', '{{placeholder}}'){{else}}"{{placeholder}}"{{/if}}}
                  {{/if}}
                  rows={4}
                  className={`h-32 w-full px-4 py-3 border-2 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors ${
                    errors.{{name}} ? 'border-red-300 bg-red-50' : 'border-gray-300'
                  }`}
                  aria-invalid={!!errors.{{name}}}
                  aria-describedby={errors.{{name}} ? '{{name}}-error' : undefined}
                />
                {{else if (eq type 'select')}}
                <select
                  id="{{name}}"
                  name="{{name}}"
                  value={formData.{{name}} as string}
                  onChange={(e) => handleFieldChange('{{name}}', e.target.value)}
                  onBlur={(e) => handleFieldBlur('{{name}}', e.target.value)}
                  disabled={isFormDisabled}
                  required={{#if required}}true{{else}}false{{/if}}
                  className={`h-14 w-full px-4 border-2 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors ${
                    errors.{{name}} ? 'border-red-300 bg-red-50' : 'border-gray-300'
                  }`}
                  aria-invalid={!!errors.{{name}}}
                  aria-describedby={errors.{{name}} ? '{{name}}-error' : undefined}
                >
                  <option value="">
                    {{#if ../useI18n}}
                    {t('form.select.placeholder', 'Select an option')}
                    {{else}}
                    Select an option
                    {{/if}}
                  </option>
                  {{#if options}}
                  {{#each options}}
                  <option value="{{value}}">{{label}}</option>
                  {{/each}}
                  {{/if}}
                </select>
                {{else if (eq type 'checkbox')}}
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    id="{{name}}"
                    name="{{name}}"
                    checked={formData.{{name}} as boolean}
                    onChange={(e) => handleFieldChange('{{name}}', e.target.checked)}
                    disabled={isFormDisabled}
                    className="h-5 w-5 text-blue-600 border-2 border-gray-300 rounded focus:ring-2 focus:ring-blue-200"
                  />
                  <Text variant="body" color="gray.700" as="label" htmlFor="{{name}}">
                    {{#if ../useI18n}}
                    {t('{{../kebabCase}}.fields.{{name}}.checkboxLabel', '{{checkboxLabel}}')}
                    {{else}}
                    {{checkboxLabel}}
                    {{/if}}
                  </Text>
                </div>
                {{else}}
                <input
                  type="{{type}}"
                  id="{{name}}"
                  name="{{name}}"
                  value={formData.{{name}} as string}
                  onChange={(e) => handleFieldChange('{{name}}', e.target.value)}
                  onBlur={(e) => handleFieldBlur('{{name}}', e.target.value)}
                  disabled={isFormDisabled}
                  required={{#if required}}true{{else}}false{{/if}}
                  {{#if placeholder}}
                  placeholder={{{#if ../useI18n}}}t('{{../kebabCase}}.fields.{{name}}.placeholder', '{{placeholder}}'){{else}}"{{placeholder}}"{{/if}}}
                  {{/if}}
                  {{#if minLength}}minLength={{minLength}}{{/if}}
                  {{#if maxLength}}maxLength={{maxLength}}{{/if}}
                  className={`h-14 w-full px-4 border-2 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors ${
                    errors.{{name}} ? 'border-red-300 bg-red-50' : 'border-gray-300'
                  }`}
                  aria-invalid={!!errors.{{name}}}
                  aria-describedby={errors.{{name}} ? '{{name}}-error' : undefined}
                />
                {{/if}}

                {/* Field Error */}
                {errors.{{name}} && (
                  <Text 
                    id="{{name}}-error"
                    variant="caption" 
                    color="red.600"
                    role="alert"
                  >
                    {errors.{{name}}}
                  </Text>
                )}
              </Stack>
              {{/each}}
              {{/if}}

              {/* Form Actions */}
              <Stack direction="row" spacing={spacing.md} justify="end" className="pt-4">
                <Button
                  type="button"
                  variant="outline"
                  size="lg"
                  disabled={isFormDisabled}
                  onClick={() => {
                    setFormData(initialData as {{className}}FormData);
                    setErrors({});
                    setSubmitError(null);
                  }}
                >
                  {{#if useI18n}}
                  {t('form.actions.reset', 'Reset')}
                  {{else}}
                  Reset
                  {{/if}}
                </Button>
                
                <Button
                  type="submit"
                  variant="primary"
                  size="lg"
                  disabled={isFormDisabled}
                  className="shadow-md"
                >
                  {isSubmitting ? (
                    <Stack direction="row" spacing={spacing.xs} align="center">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
                      <span>
                        {{#if useI18n}}
                        {t('form.actions.submitting', 'Submitting...')}
                        {{else}}
                        Submitting...
                        {{/if}}
                      </span>
                    </Stack>
                  ) : (
                    {{#if useI18n}}
                    t('form.actions.submit', 'Submit')
                    {{else}}
                    'Submit'
                    {{/if}}
                  )}
                </Button>
              </Stack>
            </Stack>
          </form>
        </Stack>
      </Card>
    </Container>
  );
};

// Default export for convenience
export default {{className}};

// Type exports
export type { {{className}}Props, {{className}}FormData, {{className}}FormErrors };

// Display name for debugging
{{className}}.displayName = '{{className}}';