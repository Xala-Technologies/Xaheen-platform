/**
 * {{className}} Component
 *
 * Generated by Xaheen CLI Component Generator - Semantic UI Version
 * @since {{timestamp}}
 */

import React{{#if hooks}}, { useState, useCallback, useMemo }{{/if}} from 'react';
{{#if useSemanticUI}}
{{semanticImports}}
{{/if}}
{{#if useDesignTokens}}
{{designTokenImports}}
{{/if}}
{{#if useI18n}}
{{i18nHelpers}}
{{/if}}

{{#if props}}
interface {{className}}Props {
{{#each props}}
  readonly {{name}}{{#if optional}}?{{/if}}: {{#if (eq type 'function')}}() => void{{else if (eq type 'object')}}Record<string, unknown>{{else if (eq type 'array')}}readonly unknown[]{{else}}{{type}}{{/if}};
{{/each}}
}
{{else}}
interface {{className}}Props {
  readonly children?: React.ReactNode;
  readonly className?: string;
  readonly 'data-testid'?: string;
}
{{/if}}

/**
 * {{className}} - A semantic UI component following Xala design system
 * 
 * {{#if ai}}
 * AI Description: {{ai}}
 * {{else}}
 * A modern, accessible React component built with semantic UI components.
 * Follows TypeScript-first patterns with WCAG AAA accessibility compliance.
 * {{/if}}
 * 
 * @param props - Component properties
 * @returns JSX.Element
 */
export const {{className}} = ({{#if props}}{
{{#each props}}
  {{name}}{{#if optional}} = {{#if (eq type 'string')}}''{{else if (eq type 'number')}}0{{else if (eq type 'boolean')}}false{{else if (eq type 'object')}}{}{{else if (eq type 'array')}}[]{{else if (eq type 'function')}}() => {}{{else}}undefined{{/if}}{{/if}},
{{/each}}
  className,
  'data-testid': testId = '{{kebabCase}}'
}{{else}}{ 
  children,
  className,
  'data-testid': testId = '{{kebabCase}}'
}{{/if}}: {{className}}Props): JSX.Element => {
  {{#if useI18n}}
  const { t } = useTranslation();
  {{/if}}
  
  {{#if hooks}}
  // Component state with proper TypeScript typing
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Memoized event handlers for performance
  const handleAction = useCallback(async (): Promise<void> => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Add your action logic here
      {{#each props}}
      {{#if (eq type 'function')}}
      await {{name}}?.();
      {{/if}}
      {{/each}}
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [{{#each props}}{{#if (eq type 'function')}}{{name}}{{#unless @last}}, {{/unless}}{{/if}}{{/each}}]);

  // Computed values with proper memoization
  const computedValue = useMemo((): string => {
    {{#if useI18n}}
    return t('{{kebabCase}}.computed', 'Computed value for {{className}}');
    {{else}}
    return `Computed value for {{className}}`;
    {{/if}}
  }, [{{#if useI18n}}t{{/if}}]);
  {{/if}}

  // Error boundary UI
  if (error) {
    return (
      <Card 
        variant="outline" 
        className={`border-red-200 bg-red-50 ${className || ''}`}
        data-testid={`${testId}-error`}
        role="alert"
        aria-live="polite"
      >
        <Stack spacing={spacing.sm}>
          <Stack direction="row" spacing={spacing.xs} align="center">
            <Text 
              variant="body" 
              color="red.700" 
              weight="medium"
              aria-label="Error occurred"
            >
              {{#if useI18n}}
              {t('common.error', 'Error')}
              {{else}}
              Error
              {{/if}}
            </Text>
          </Stack>
          <Text variant="body" color="red.600">
            {error}
          </Text>
        </Stack>
      </Card>
    );
  }

  return (
    <Container 
      maxWidth="2xl" 
      className={className}
      data-testid={testId}
    >
      <Card 
        variant="elevated"
        padding={spacing.lg}
        className="hover:shadow-xl transition-shadow duration-300"
      >
        {{#if hooks}}
        {/* Loading State */}
        {isLoading && (
          <Stack direction="row" spacing={spacing.md} align="center" justify="center">
            <div 
              className="animate-spin rounded-full h-8 w-8 border-b-2"
              style={{ borderColor: colors.primary[600] }}
              role="status"
              aria-label="Loading"
            />
            <Text variant="body" color="gray.600">
              {{#if useI18n}}
              {t('common.loading', 'Loading...')}
              {{else}}
              Loading...
              {{/if}}
            </Text>
          </Stack>
        )}

        {/* Main Content */}
        {!isLoading && (
        {{/if}}
          <Stack spacing={spacing.lg}>
            {/* Header Section */}
            <Stack spacing={spacing.md}>
              <Text 
                variant="heading" 
                size="2xl" 
                weight="bold" 
                color="gray.900"
                as="h2"
              >
                {{#if props}}
                {{#each props}}
                {{#if (eq type 'string')}}
                {{{name}} || {{#if ../useI18n}}t('{{../kebabCase}}.title', '{{../className}}'){{else}}'{{../className}}'{{/if}}}
                {{/if}}
                {{/each}}
                {{else}}
                {{#if useI18n}}
                {t('{{kebabCase}}.title', '{{className}}')}
                {{else}}
                {{className}}
                {{/if}}
                {{/if}}
              </Text>
              
              <Text 
                variant="body" 
                color="gray.600" 
                className="leading-relaxed"
              >
                {{#if ai}}
                {{#if useI18n}}
                {t('{{kebabCase}}.description', '{{ai}}')}
                {{else}}
                {{ai}}
                {{/if}}
                {{else}}
                {{#if useI18n}}
                {t('{{kebabCase}}.description', 'This is the {{className}} component. Built with semantic UI components for modern accessibility and design consistency.')}
                {{else}}
                This is the {{className}} component. Built with semantic UI components for modern accessibility and design consistency.
                {{/if}}
                {{/if}}
              </Text>
            </Stack>

            {{#if props}}
            {/* Props Display Section */}
            <Stack spacing={spacing.md}>
              {{#each props}}
              {{#if (eq type 'boolean')}}
              {{{name}} && (
                <Card variant="subtle" padding={spacing.sm}>
                  <Text 
                    variant="caption" 
                    weight="medium" 
                    color="green.800"
                    className="inline-flex items-center"
                  >
                    {{#if ../useI18n}}
                    {t('{{../kebabCase}}.{{name}}.enabled', '{{name}} is enabled')}
                    {{else}}
                    {{name}} is enabled
                    {{/if}}
                  </Text>
                </Card>
              )}
              {{else if (eq type 'number')}}
              <Stack direction="row" spacing={spacing.sm} align="center">
                <Text variant="body" weight="medium" color="gray.700">
                  {{#if ../useI18n}}
                  {t('{{../kebabCase}}.{{name}}.label', '{{name}}:')}
                  {{else}}
                  {{name}}:
                  {{/if}}
                </Text>
                <Text variant="body" color="gray.600">
                  {{{name}}}
                </Text>
              </Stack>
              {{else if (eq type 'array')}}
              {{{name}} && {{name}}.length > 0 && (
                <Stack spacing={spacing.sm}>
                  <Text variant="body" weight="semibold" color="gray.900">
                    {{#if ../useI18n}}
                    {t('{{../kebabCase}}.{{name}}.title', '{{name}}')}
                    {{else}}
                    {{name}}
                    {{/if}}
                  </Text>
                  <Stack spacing={spacing.xs}>
                    {{{name}}.map((item: unknown, index: number) => (
                      <Text 
                        key={index} 
                        variant="body" 
                        color="gray.600"
                        className="list-disc list-inside"
                      >
                        {typeof item === 'object' ? JSON.stringify(item) : String(item)}
                      </Text>
                    ))}
                  </Stack>
                </Stack>
              )}
              {{/if}}
              {{/each}}
            </Stack>
            {{/if}}

            {{#if children}}
            {/* Children Section */}
            <Stack spacing={spacing.md}>
              {children}
            </Stack>
            {{/if}}

            {{#if hooks}}
            {/* Interactive Elements */}
            <Stack direction="row" spacing={spacing.md} align="center">
              <Button
                onClick={handleAction}
                disabled={isLoading}
                variant="primary"
                size="lg"
                className="shadow-md"
                aria-label={{{#if useI18n}}}t('{{kebabCase}}.action.label', 'Execute {{className}} action'){{else}}"Execute {{className}} action"{{/if}}}
              >
                {{#if useI18n}}
                {isLoading ? t('common.processing', 'Processing...') : t('{{kebabCase}}.action.text', 'Action')}
                {{else}}
                {isLoading ? 'Processing...' : 'Action'}
                {{/if}}
              </Button>
              
              <Text variant="caption" color="gray.500">
                {{#if useI18n}}
                {t('{{kebabCase}}.computed.label', 'Computed:')} {computedValue}
                {{else}}
                Computed: {computedValue}
                {{/if}}
              </Text>
            </Stack>
            {{/if}}
          </Stack>
        {{#if hooks}}
        )}
        {{/if}}
      </Card>
    </Container>
  );
};

// Default export for convenience
export default {{className}};

{{#if typescript}}
// Type exports for external consumption
export type { {{className}}Props };
{{/if}}

// Display name for debugging
{{className}}.displayName = '{{className}}';