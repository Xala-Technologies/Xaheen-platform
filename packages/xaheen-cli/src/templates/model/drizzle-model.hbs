/**
 * {{className}} Drizzle Schema
 *
 * Generated by Xaheen CLI Model Generator
 * @since {{generatedAt}}
 */

import {
  pgTable,
  text,
  integer,
  boolean,
  timestamp,
  json,
  uuid,
  varchar,
} from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import type { z } from 'zod';

export const {{tableName}} = pgTable('{{tableName}}', {
  id: uuid('id').defaultRandom().primaryKey(),
{{#each fields}}
  {{name}}: {{#if (eq type 'string')}}varchar('{{name}}', { length: 255 }){{else if (eq type 'email')}}varchar('{{name}}', { length: 255 }){{else if (eq type 'url')}}text('{{name}}'){{else if (eq type 'uuid')}}uuid('{{name}}'){{else if (eq type 'number')}}integer('{{name}}'){{else if (eq type 'boolean')}}boolean('{{name}}'){{else if (eq type 'Date')}}timestamp('{{name}}'){{else if (eq type 'text')}}text('{{name}}'){{else if (eq type 'password')}}varchar('{{name}}', { length: 255 }){{else if (eq type 'json')}}json('{{name}}'){{else if (eq type 'enum')}}varchar('{{name}}', { length: 100 }){{else}}text('{{name}}'){{/if}}{{#unless optional}}.notNull(){{/if}},
{{/each}}
{{#if timestamps}}
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
{{/if}}
{{#if softDeletes}}
  deletedAt: timestamp('deleted_at'),
{{/if}}
});

// Zod schemas for validation
export const insert{{className}}Schema = createInsertSchema({{tableName}});
export const select{{className}}Schema = createSelectSchema({{tableName}});

// TypeScript types
export type {{className}} = typeof {{tableName}}.$inferSelect;
export type New{{className}} = typeof {{tableName}}.$inferInsert;

// Zod types
export type Insert{{className}} = z.infer<typeof insert{{className}}Schema>;
export type Select{{className}} = z.infer<typeof select{{className}}Schema>;