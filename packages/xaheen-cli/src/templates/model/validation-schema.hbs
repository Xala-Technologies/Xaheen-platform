/**
 * {{className}} Validation Schema
 *
 * Generated by Xaheen CLI Model Generator
 * @since {{generatedAt}}
 */

import { z } from 'zod';

/**
 * Base {{className}} validation schema
 */
export const {{name}}ValidationSchema = z.object({
{{#each fields}}
  {{name}}: {{#if (eq type 'string')}}z.string(){{else if (eq type 'email')}}z.string().email('Invalid email format'){{else if (eq type 'url')}}z.string().url('Invalid URL format'){{else if (eq type 'uuid')}}z.string().uuid('Invalid UUID format'){{else if (eq type 'number')}}z.number(){{else if (eq type 'boolean')}}z.boolean(){{else if (eq type 'Date')}}z.date(){{else if (eq type 'text')}}z.string(){{else if (eq type 'password')}}z.string().min(8, 'Password must be at least 8 characters'){{else if (eq type 'json')}}z.record(z.any()){{else if (eq type 'enum')}}z.string(){{else}}z.string(){{/if}}{{#if validation}}{{#each validation}}{{#if (eq this 'required')}}.min(1, '{{../name}} is required'){{else if (eq this 'min')}}.min(1, '{{../name}} is too short'){{else if (eq this 'max')}}.max(255, '{{../name}} is too long'){{/if}}{{/each}}{{/if}}{{#if optional}}.optional(){{/if}},
{{/each}}
});

/**
 * Create {{className}} validation schema
 */
export const create{{className}}ValidationSchema = {{name}}ValidationSchema.omit({
  id: true,
{{#if timestamps}}
  createdAt: true,
  updatedAt: true,
{{/if}}
{{#if softDeletes}}
  deletedAt: true,
{{/if}}
});

/**
 * Update {{className}} validation schema
 */
export const update{{className}}ValidationSchema = create{{className}}ValidationSchema.partial();

/**
 * ID parameter validation schema
 */
export const {{name}}IdSchema = z.object({
  id: z.string().uuid('Invalid {{name}} ID format'),
});

/**
 * Query parameters validation schema
 */
export const {{name}}QuerySchema = z.object({
  page: z.coerce.number().min(1).default(1),
  limit: z.coerce.number().min(1).max(100).default(10),
  sortBy: z.enum([{{#each fields}}'{{name}}'{{#unless @last}}, {{/unless}}{{/each}}]).optional(),
  sortOrder: z.enum(['asc', 'desc']).default('desc'),
  search: z.string().optional(),
{{#if softDeletes}}
  includeDeleted: z.coerce.boolean().default(false),
{{/if}}
});

/**
 * Validation error messages
 */
export const {{name}}ValidationMessages = {
{{#each fields}}
  {{name}}: {
    required: '{{name}} is required',
    invalid: 'Invalid {{name}} format',
    {{#if (eq type 'email')}}
    email: 'Please enter a valid email address',
    {{/if}}
    {{#if (eq type 'url')}}
    url: 'Please enter a valid URL',
    {{/if}}
    {{#if (eq type 'password')}}
    minLength: 'Password must be at least 8 characters long',
    {{/if}}
  },
{{/each}}
} as const;

/**
 * Type definitions for validated data
 */
export type Validated{{className}} = z.infer<typeof {{name}}ValidationSchema>;
export type ValidatedCreate{{className}} = z.infer<typeof create{{className}}ValidationSchema>;
export type ValidatedUpdate{{className}} = z.infer<typeof update{{className}}ValidationSchema>;
export type Validated{{className}}Id = z.infer<typeof {{name}}IdSchema>;
export type Validated{{className}}Query = z.infer<typeof {{name}}QuerySchema>;

/**
 * Validation helper functions
 */
export const validate{{className}} = {
  /**
   * Validate create {{name}} input
   */
  create: (data: unknown) => create{{className}}ValidationSchema.parse(data),

  /**
   * Validate update {{name}} input
   */
  update: (data: unknown) => update{{className}}ValidationSchema.parse(data),

  /**
   * Validate {{name}} ID
   */
  id: (data: unknown) => {{name}}IdSchema.parse(data),

  /**
   * Validate query parameters
   */
  query: (data: unknown) => {{name}}QuerySchema.parse(data),

  /**
   * Safe validation with error handling
   */
  safeCreate: (data: unknown) => create{{className}}ValidationSchema.safeParse(data),
  safeUpdate: (data: unknown) => update{{className}}ValidationSchema.safeParse(data),
  safeId: (data: unknown) => {{name}}IdSchema.safeParse(data),
  safeQuery: (data: unknown) => {{name}}QuerySchema.safeParse(data),
};