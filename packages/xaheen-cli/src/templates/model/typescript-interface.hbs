/**
 * {{className}} TypeScript Interface
 *
 * Generated by Xaheen CLI Model Generator
 * @since {{generatedAt}}
 */

{{#if validation}}
import { z } from 'zod';
{{/if}}

/**
 * Base interface for {{className}}
 */
export interface {{className}} {
{{#each fields}}
  readonly {{name}}{{#if optional}}?{{/if}}: {{#if (eq type 'email')}}string{{else if (eq type 'url')}}string{{else if (eq type 'uuid')}}string{{else if (eq type 'text')}}string{{else if (eq type 'password')}}string{{else if (eq type 'json')}}Record<string, any>{{else if (eq type 'enum')}}string{{else}}{{type}}{{/if}};
{{/each}}
{{#if timestamps}}
  readonly createdAt: Date;
  readonly updatedAt: Date;
{{/if}}
{{#if softDeletes}}
  readonly deletedAt?: Date | null;
{{/if}}
}

/**
 * Create {{className}} input interface
 */
export interface Create{{className}}Input {
{{#each fields}}
  {{#unless (eq name 'id')}}
  readonly {{name}}{{#if optional}}?{{/if}}: {{#if (eq type 'email')}}string{{else if (eq type 'url')}}string{{else if (eq type 'uuid')}}string{{else if (eq type 'text')}}string{{else if (eq type 'password')}}string{{else if (eq type 'json')}}Record<string, any>{{else if (eq type 'enum')}}string{{else}}{{type}}{{/if}};
  {{/unless}}
{{/each}}
}

/**
 * Update {{className}} input interface
 */
export interface Update{{className}}Input {
{{#each fields}}
  {{#unless (eq name 'id')}}
  readonly {{name}}?: {{#if (eq type 'email')}}string{{else if (eq type 'url')}}string{{else if (eq type 'uuid')}}string{{else if (eq type 'text')}}string{{else if (eq type 'password')}}string{{else if (eq type 'json')}}Record<string, any>{{else if (eq type 'enum')}}string{{else}}{{type}}{{/if}};
  {{/unless}}
{{/each}}
}

{{#if validation}}
/**
 * Zod validation schema for {{className}}
 */
export const {{name}}Schema = z.object({
{{#each fields}}
  {{name}}: {{#if (eq type 'string')}}z.string(){{else if (eq type 'email')}}z.string().email(){{else if (eq type 'url')}}z.string().url(){{else if (eq type 'uuid')}}z.string().uuid(){{else if (eq type 'number')}}z.number(){{else if (eq type 'boolean')}}z.boolean(){{else if (eq type 'Date')}}z.date(){{else if (eq type 'text')}}z.string(){{else if (eq type 'password')}}z.string().min(8){{else if (eq type 'json')}}z.record(z.any()){{else if (eq type 'enum')}}z.string(){{else}}z.any(){{/if}}{{#if optional}}.optional(){{/if}}{{#if validation}}{{#each validation}}{{#if (eq this 'required')}}.min(1){{else if (eq this 'unique')}}{{else if (eq this 'min')}}.min(1){{else if (eq this 'max')}}.max(255){{/if}}{{/each}}{{/if}},
{{/each}}
{{#if timestamps}}
  createdAt: z.date(),
  updatedAt: z.date(),
{{/if}}
{{#if softDeletes}}
  deletedAt: z.date().optional().nullable(),
{{/if}}
});

/**
 * Create {{className}} validation schema
 */
export const create{{className}}Schema = {{name}}Schema.omit({
  {{#if timestamps}}createdAt: true, updatedAt: true,{{/if}}
  {{#if softDeletes}}deletedAt: true,{{/if}}
});

/**
 * Update {{className}} validation schema
 */
export const update{{className}}Schema = create{{className}}Schema.partial();

/**
 * Type-safe {{className}} creation input
 */
export type ValidatedCreate{{className}}Input = z.infer<typeof create{{className}}Schema>;

/**
 * Type-safe {{className}} update input
 */
export type ValidatedUpdate{{className}}Input = z.infer<typeof update{{className}}Schema>;
{{/if}}

/**
 * {{className}} with relations (for future extension)
 */
export interface {{className}}WithRelations extends {{className}} {
  // Add related entities here when needed
}

/**
 * {{className}} list response
 */
export interface {{className}}ListResponse {
  readonly data: {{className}}[];
  readonly total: number;
  readonly page: number;
  readonly limit: number;
  readonly hasNext: boolean;
  readonly hasPrev: boolean;
}

/**
 * {{className}} repository interface
 */
export interface {{className}}Repository {
  findById(id: string): Promise<{{className}} | null>;
  findMany(options?: FindManyOptions): Promise<{{className}}ListResponse>;
  create(input: Create{{className}}Input): Promise<{{className}}>;
  update(id: string, input: Update{{className}}Input): Promise<{{className}} | null>;
  delete(id: string): Promise<boolean>;
  {{#if softDeletes}}
  restore(id: string): Promise<{{className}} | null>;
  forceDelete(id: string): Promise<boolean>;
  {{/if}}
}

/**
 * Find many options for {{className}}
 */
export interface FindManyOptions {
  readonly page?: number;
  readonly limit?: number;
  readonly sortBy?: keyof {{className}};
  readonly sortOrder?: 'asc' | 'desc';
  readonly filters?: Partial<{{className}}>;
  {{#if softDeletes}}
  readonly includeDeleted?: boolean;
  {{/if}}
}