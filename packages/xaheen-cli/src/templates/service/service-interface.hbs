/**
 * {{className}} Interface
 *
 * Generated by Xaheen CLI Service Generator
 * @since {{generatedAt}}
 */

import type {
  {{modelName}},
  Create{{modelName}}Input,
  Update{{modelName}}Input,
  {{modelName}}ListResponse,
  FindManyOptions,
} from '../types/{{name}}.types.js';

/**
 * {{className}} Interface
 * 
 * Defines the contract for {{modelName}} business logic operations.
 * This interface can be implemented by different service classes for testing or different implementations.
 */
export interface I{{className}} {
{{#each methods}}
  /**
   * {{description}}
   */
  {{name}}({{#each parameters}}{{name}}{{#if optional}}?{{/if}}: {{type}}{{#unless @last}}, {{/unless}}{{/each}}): {{returnType}};

{{/each}}
  /**
   * Get service statistics
   */
  getStats(): Promise<any>;

  {{#if caching}}
  /**
   * Clear all cache entries for this service
   */
  clearCache(): Promise<void>;
  {{/if}}

  {{#if events}}
  /**
   * Get event statistics
   */
  getEventStats(): any;
  {{/if}}
}

/**
 * Service configuration interface
 */
export interface {{className}}Config {
  readonly caching?: {
    readonly enabled: boolean;
    readonly ttl: number;
    readonly prefix: string;
  };
  readonly events?: {
    readonly enabled: boolean;
    readonly maxListeners: number;
  };
  readonly logging?: {
    readonly enabled: boolean;
    readonly level: 'debug' | 'info' | 'warn' | 'error';
  };
  readonly validation?: {
    readonly enabled: boolean;
    readonly strict: boolean;
  };
}

/**
 * Service metrics interface
 */
export interface {{className}}Metrics {
  readonly operationCounts: Record<string, number>;
  readonly errorCounts: Record<string, number>;
  readonly averageResponseTimes: Record<string, number>;
  readonly cacheStats: {
    readonly hits: number;
    readonly misses: number;
    readonly hitRate: number;
  };
}

/**
 * Service health check result
 */
export interface {{className}}Health {
  readonly status: 'healthy' | 'degraded' | 'unhealthy';
  readonly timestamp: string;
  readonly version: string;
  readonly dependencies: {
    readonly repository: boolean;
    readonly cache?: boolean;
    readonly database: boolean;
  };
  readonly metrics: {{className}}Metrics;
}