/**
 * @fileoverview {{componentName}} Component - Perfect UI System Integration
 * @description Navigation component using semantic UI System components with Norwegian compliance
 * @version 5.0.0
 * @compliance WCAG AAA, Semantic components, SSR-safe, Norwegian ready
 * @ai-optimized Uses semantic naming and predictable patterns for AI generation
 */

import React, { forwardRef, type HTMLAttributes } from 'react';
import {
  Container,
  Stack,
  Button,
  Text,
  Logo,
  Navigation,
  SearchBar
} from '@xaheen-ai/design-system';

export interface {{componentName}}Props extends HTMLAttributes<HTMLElement> {
  readonly logo?: React.ReactNode;
  readonly navigation?: React.ReactNode;
  readonly searchComponent?: React.ReactNode;
  readonly actions?: React.ReactNode;
  readonly mobileMenuTrigger?: React.ReactNode;
  readonly variant?: 'flat' | 'elevated' | 'floating';
  readonly size?: 'sm' | 'md' | 'lg';
  readonly sticky?: boolean;
  readonly ariaLabel?: string;
  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';
}

/**
 * Perfect semantic navbar component using UI System components
 * AI-Optimized: Predictable structure and semantic naming
 * Norwegian Compliance: NSM classification and i18n support
 */
export const {{componentName}} = forwardRef<HTMLElement, {{componentName}}Props>(
  (
    {
      className,
      logo,
      navigation,
      searchComponent,
      actions,
      mobileMenuTrigger,
      variant = 'flat',
      size = 'md',
      sticky = false,
      ariaLabel = 'Main navigation',
      nsmClassification = 'OPEN',
      ...props
    },
    ref
  ): JSX.Element => {
    return (
      <nav
        ref={ref}
        role="navigation"
        aria-label={ariaLabel}
        data-nsm-classification={nsmClassification}
        className={className}
        style={{
          position: sticky ? 'sticky' : 'relative',
          top: sticky ? 0 : undefined,
          zIndex: sticky ? 50 : undefined,
        }}
        {...props}
      >
        <Container size="full">
          <Stack 
            direction="horizontal" 
            justify="space-between" 
            align="center"
            gap="lg"
            padding={size}
          >
            {/* Logo Section */}
            {logo && (
              <Stack direction="horizontal" align="center" gap="md">
                {logo}
              </Stack>
            )}

            {/* Navigation Section */}
            {navigation && (
              <Stack 
                direction="horizontal" 
                align="center" 
                gap="md"
                className="hidden md:flex"
              >
                {navigation}
              </Stack>
            )}

            {/* Search Section */}
            {searchComponent && (
              <div className="hidden lg:block">
                {searchComponent}
              </div>
            )}

            {/* Actions Section */}
            <Stack direction="horizontal" align="center" gap="sm">
              {actions && (
                <Stack 
                  direction="horizontal" 
                  align="center" 
                  gap="sm"
                  className="hidden sm:flex"
                >
                  {actions}
                </Stack>
              )}

              {/* Mobile Menu Trigger */}
              {mobileMenuTrigger && (
                <div className="flex md:hidden">
                  {mobileMenuTrigger}
                </div>
              )}
            </Stack>
          </Stack>
        </Container>
      </nav>
    );
  }
);

{{componentName}}.displayName = '{{componentName}}';

/**
 * Example usage pattern for AI generation:
 * 
 * <{{componentName}} 
 *   logo={<Logo src="/logo.png" alt="Company" />}
 *   navigation={
 *     <Navigation items={[
 *       { href: '/', label: 'Home' },
 *       { href: '/about', label: 'About' },
 *       { href: '/contact', label: 'Contact' }
 *     ]} />
 *   }
 *   searchComponent={<SearchBar placeholder="Search..." />}
 *   actions={
 *     <Stack direction="horizontal" gap="sm">
 *       <Button variant="outline">Sign In</Button>
 *       <Button variant="primary">Sign Up</Button>
 *     </Stack>
 *   }
 *   variant="elevated"
 *   sticky
 * />
 */