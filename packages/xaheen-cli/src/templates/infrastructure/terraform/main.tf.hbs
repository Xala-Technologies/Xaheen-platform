# Main Terraform configuration
# Generated by Xaheen CLI Terraform Generator
{{!-- Project: {{projectName}} --}}
{{!-- Environment: {{environment}} --}}
{{!-- Cloud Provider: {{cloudProvider}} --}}

terraform {
  required_version = ">= 1.0"
  
  backend "{{remoteState.backend}}" {
    {{#if remoteState.bucket}}
    bucket = "{{remoteState.bucket}}"
    {{/if}}
    {{#if remoteState.container}}
    container_name = "{{remoteState.container}}"
    {{/if}}
    {{#if remoteState.prefix}}
    key = "{{remoteState.prefix}}/terraform.tfstate"
    {{else}}
    key = "{{projectName}}/{{environment}}/terraform.tfstate"
    {{/if}}
    {{#if remoteState.region}}
    region = "{{remoteState.region}}"
    {{/if}}
  }
}

{{#eq cloudProvider "aws"}}
# Data sources for AWS
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
data "aws_availability_zones" "available" {
  state = "available"
}
{{/eq}}

{{#eq cloudProvider "azure"}}
# Data sources for Azure
data "azurerm_client_config" "current" {}
data "azurerm_subscription" "current" {}
{{/eq}}

{{#eq cloudProvider "gcp"}}
# Data sources for GCP
data "google_client_config" "current" {}
data "google_project" "current" {}
{{/eq}}

# Local values for resource naming and tagging
locals {
  name_prefix = "${var.project_name}-${var.environment}"
  
  common_tags = {
    Project     = var.project_name
    Environment = var.environment
    ManagedBy   = "terraform"
    CreatedBy   = "xaheen-cli"
    Owner       = var.owner
    {{#if compliance.encryption}}
    Encrypted   = "true"
    {{/if}}
    {{#if compliance.backup}}
    BackupEnabled = "true"
    {{/if}}
  }
}

{{#if networking.vpc}}
# Networking module
module "networking" {
  source = "./modules/networking"
  
  project_name = var.project_name
  environment  = var.environment
  {{#eq cloudProvider "aws"}}
  vpc_cidr     = var.vpc_cidr
  {{/eq}}
  {{#eq cloudProvider "azure"}}
  address_space = var.address_space
  {{/eq}}
  {{#eq cloudProvider "gcp"}}
  network_cidr = var.network_cidr
  {{/eq}}
  
  availability_zones = var.availability_zones
  {{#eq networking.subnets "public"}}
  public_subnets     = var.public_subnets
  {{/eq}}
  {{#eq networking.subnets "private"}}
  private_subnets    = var.private_subnets
  {{/eq}}
  {{#eq networking.subnets "both"}}
  public_subnets     = var.public_subnets
  private_subnets    = var.private_subnets
  {{/eq}}
  
  enable_nat_gateway = var.enable_nat_gateway
  enable_vpn_gateway = var.enable_vpn_gateway
  
  tags = local.common_tags
}
{{else}}
# Networking module disabled
{{/if}}

{{#if compute.instances}}
# Compute module
module "compute" {
  source = "./modules/compute"
  
  project_name = var.project_name
  environment  = var.environment
  
  {{#if networking.vpc}}
  {{#eq cloudProvider "aws"}}
  vpc_id          = module.networking.vpc_id
  private_subnets = module.networking.private_subnets
  public_subnets  = module.networking.public_subnets
  {{/eq}}
  {{#eq cloudProvider "azure"}}
  resource_group_name = module.networking.resource_group_name
  subnet_ids          = module.networking.subnet_ids
  {{/eq}}
  {{#eq cloudProvider "gcp"}}
  network_name    = module.networking.network_name
  subnet_names    = module.networking.subnet_names
  {{/eq}}
  {{/if}}
  
  instance_type     = var.instance_type
  min_size          = var.min_size
  max_size          = var.max_size
  desired_capacity  = var.desired_capacity
  
  enable_load_balancer = var.enable_load_balancer
  enable_auto_scaling  = var.enable_auto_scaling
  
  tags = local.common_tags
}
{{else}}
# Compute module disabled
{{/if}}

{{#if storage.databases}}
# Storage module
module "storage" {
  source = "./modules/storage"
  
  project_name = var.project_name
  environment  = var.environment
  
  {{#if networking.vpc}}
  {{#eq cloudProvider "aws"}}
  vpc_id          = module.networking.vpc_id
  private_subnets = module.networking.private_subnets
  {{/eq}}
  {{#eq cloudProvider "azure"}}
  resource_group_name = module.networking.resource_group_name
  subnet_ids          = module.networking.subnet_ids
  {{/eq}}
  {{#eq cloudProvider "gcp"}}
  network_name = module.networking.network_name
  {{/eq}}
  {{/if}}
  
  db_engine            = var.db_engine
  db_version           = var.db_version
  db_instance_class    = var.db_instance_class
  db_allocated_storage = var.db_allocated_storage
  
  enable_object_storage = var.enable_object_storage
  enable_file_system   = var.enable_file_system
  
  encryption_enabled = var.encryption_enabled
  backup_enabled     = var.backup_enabled
  
  tags = local.common_tags
}
{{else}}
# Storage module disabled
{{/if}}

# Security module
module "security" {
  source = "./modules/security"
  
  project_name = var.project_name
  environment  = var.environment
  
  enable_kms             = var.enable_kms
  enable_secrets_manager = var.enable_secrets_manager
  enable_waf            = var.enable_waf
  
  iam_roles = var.iam_roles
  
  encryption_enabled = var.encryption_enabled
  audit_logs_enabled = var.audit_logs_enabled
  
  tags = local.common_tags
}

{{#if monitoring.cloudWatch}}
# Monitoring module
module "monitoring" {
  source = "./modules/monitoring"
  
  project_name = var.project_name
  environment  = var.environment
  
  enable_cloudwatch = var.enable_cloudwatch
  enable_logging    = var.enable_logging
  enable_alerting   = var.enable_alerting
  enable_tracing    = var.enable_tracing
  
  backup_retention_days = var.backup_retention_days
  
  tags = local.common_tags
}
{{else}}
# Monitoring module disabled
{{/if}}