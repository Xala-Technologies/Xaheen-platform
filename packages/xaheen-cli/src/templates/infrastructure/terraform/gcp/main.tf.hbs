# Google Cloud Platform Infrastructure for {{projectName}}
# Terraform configuration for production-ready GCP services
# Generated by Xaheen CLI - Infrastructure as Code

terraform {
  required_version = ">= 1.5"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
    google-beta = {
      source  = "hashicorp/google-beta"
      version = "~> 5.0"
    }
  }
  
  {{#if remoteState}}
  backend "gcs" {
    bucket = "{{remoteState.bucket}}"
    prefix = "terraform/{{environment}}/state"
  }
  {{/if}}
}

# Configure providers
provider "google" {
  project = var.project_id
  region  = var.region
  zone    = var.zone
}

provider "google-beta" {
  project = var.project_id
  region  = var.region
  zone    = var.zone
}

# Local values
locals {
  environment = var.environment
  labels = merge(var.labels, {
    environment   = var.environment
    project       = var.project_id
    managed-by    = "terraform"
    created-by    = "xaheen-cli"
    organization  = var.organization_name
  })
  
  # Common naming convention
  name_prefix = "${var.project_name}-${var.environment}"
}

# Enable required APIs
resource "google_project_service" "apis" {
  for_each = toset([
    "compute.googleapis.com",
    "cloudfunctions.googleapis.com",
    "firestore.googleapis.com",
    "storage-component.googleapis.com",
    "storage.googleapis.com",
    "pubsub.googleapis.com",
    "secretmanager.googleapis.com",
    "logging.googleapis.com",
    "monitoring.googleapis.com",
    "cloudkms.googleapis.com",
    "iam.googleapis.com",
    "cloudbuild.googleapis.com",
    "container.googleapis.com",
    "run.googleapis.com",
    "firebase.googleapis.com",
    "cloudresourcemanager.googleapis.com",
    "serviceusage.googleapis.com",
    "vpcaccess.googleapis.com",
    "servicenetworking.googleapis.com",
    "sqladmin.googleapis.com",
    "redis.googleapis.com"
  ])
  
  service = each.key
  project = var.project_id
  
  disable_on_destroy = false
  
  timeouts {
    create = "10m"
    read   = "10m"
    update = "10m"
    delete = "10m"
  }
}

# Create custom VPC network if networking is enabled
{{#if networking.vpc}}
resource "google_compute_network" "main" {
  name                    = "${local.name_prefix}-vpc"
  auto_create_subnetworks = false
  project                 = var.project_id
  
  depends_on = [google_project_service.apis]
}

# Create subnet for main region
resource "google_compute_subnetwork" "main" {
  name          = "${local.name_prefix}-subnet-${var.region}"
  ip_cidr_range = var.subnet_cidr
  region        = var.region
  network       = google_compute_network.main.id
  project       = var.project_id

  {{#if networking.enablePrivateGoogleAccess}}
  private_ip_google_access = true
  {{/if}}

  # Secondary ranges for GKE if container services are enabled
  {{#if compute.kubernetes}}
  secondary_ip_range {
    range_name    = "pods"
    ip_cidr_range = var.pods_cidr
  }
  
  secondary_ip_range {
    range_name    = "services"
    ip_cidr_range = var.services_cidr
  }
  {{/if}}
}

# Cloud Router for NAT Gateway
{{#if networking.enableNatGateway}}
resource "google_compute_router" "main" {
  name    = "${local.name_prefix}-router"
  region  = var.region
  network = google_compute_network.main.id
  project = var.project_id
}

resource "google_compute_router_nat" "main" {
  name                               = "${local.name_prefix}-nat"
  router                             = google_compute_router.main.name
  region                             = var.region
  project                            = var.project_id
  nat_ip_allocate_option             = "AUTO_ONLY"
  source_subnetwork_ip_ranges_to_nat = "ALL_SUBNETWORKS_ALL_IP_RANGES"

  log_config {
    enable = true
    filter = "ERRORS_ONLY"
  }
}
{{/if}}
{{/if}}

# Firewall rules
{{#if networking.vpc}}
resource "google_compute_firewall" "allow_internal" {
  name    = "${local.name_prefix}-allow-internal"
  network = google_compute_network.main.name
  project = var.project_id

  allow {
    protocol = "tcp"
    ports    = ["0-65535"]
  }

  allow {
    protocol = "udp"
    ports    = ["0-65535"]
  }

  allow {
    protocol = "icmp"
  }

  source_ranges = [var.subnet_cidr]
  target_tags   = ["internal"]
}

resource "google_compute_firewall" "allow_ssh" {
  name    = "${local.name_prefix}-allow-ssh"
  network = google_compute_network.main.name
  project = var.project_id

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = var.ssh_source_ranges
  target_tags   = ["ssh"]
}

resource "google_compute_firewall" "allow_http_https" {
  name    = "${local.name_prefix}-allow-http-https"
  network = google_compute_network.main.name
  project = var.project_id

  allow {
    protocol = "tcp"
    ports    = ["80", "443"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["web"]
}
{{/if}}

# Service accounts
resource "google_service_account" "compute_engine" {
  account_id   = "${var.project_name}-compute"
  display_name = "Compute Engine Service Account"
  description  = "Service account for Compute Engine instances"
  project      = var.project_id
}

resource "google_service_account" "cloud_functions" {
  account_id   = "${var.project_name}-functions"
  display_name = "Cloud Functions Service Account"
  description  = "Service account for Cloud Functions"
  project      = var.project_id
}

resource "google_service_account" "cloud_run" {
  account_id   = "${var.project_name}-cloudrun"
  display_name = "Cloud Run Service Account"
  description  = "Service account for Cloud Run services"
  project      = var.project_id
}

# KMS Key Ring and Keys for encryption
{{#if security.keyManagement}}
resource "google_kms_key_ring" "main" {
  name     = "${local.name_prefix}-keyring"
  location = var.kms_location
  project  = var.project_id
  
  depends_on = [google_project_service.apis]
}

resource "google_kms_crypto_key" "main" {
  name     = "main-encryption-key"
  key_ring = google_kms_key_ring.main.id
  purpose  = "ENCRYPT_DECRYPT"
  
  version_template {
    algorithm = "GOOGLE_SYMMETRIC_ENCRYPTION"
  }
  
  rotation_period = var.key_rotation_period
  
  lifecycle {
    prevent_destroy = true
  }
}

resource "google_kms_crypto_key" "database" {
  name     = "database-encryption-key"
  key_ring = google_kms_key_ring.main.id
  purpose  = "ENCRYPT_DECRYPT"
  
  version_template {
    algorithm = "GOOGLE_SYMMETRIC_ENCRYPTION"
  }
  
  rotation_period = var.key_rotation_period
  
  lifecycle {
    prevent_destroy = true
  }
}
{{/if}}

# IAM bindings for service accounts
resource "google_project_iam_member" "compute_engine_roles" {
  for_each = toset([
    "roles/compute.instanceAdmin.v1",
    "roles/storage.objectViewer",
    "roles/logging.logWriter",
    "roles/monitoring.metricWriter"
  ])
  
  project = var.project_id
  role    = each.key
  member  = "serviceAccount:${google_service_account.compute_engine.email}"
}

resource "google_project_iam_member" "cloud_functions_roles" {
  for_each = toset([
    "roles/cloudsql.client",
    "roles/storage.objectAdmin",
    "roles/pubsub.editor",
    "roles/secretmanager.secretAccessor",
    "roles/logging.logWriter",
    "roles/monitoring.metricWriter",
    {{#if security.keyManagement}}
    "roles/cloudkms.cryptoKeyEncrypterDecrypter"
    {{/if}}
  ])
  
  project = var.project_id
  role    = each.key
  member  = "serviceAccount:${google_service_account.cloud_functions.email}"
}

resource "google_project_iam_member" "cloud_run_roles" {
  for_each = toset([
    "roles/cloudsql.client",
    "roles/storage.objectViewer",
    "roles/secretmanager.secretAccessor",
    "roles/logging.logWriter",
    "roles/monitoring.metricWriter"
  ])
  
  project = var.project_id
  role    = each.key
  member  = "serviceAccount:${google_service_account.cloud_run.email}"
}