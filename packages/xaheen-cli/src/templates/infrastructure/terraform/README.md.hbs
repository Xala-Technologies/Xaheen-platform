# {{projectName}} Infrastructure

This directory contains Terraform configurations for deploying and managing the {{projectName}} infrastructure on {{cloudProvider}}.

Generated by Xaheen CLI Terraform Generator.

## Overview

This infrastructure includes:

{{#if networking.vpc}}
- **Networking**: VPC, subnets, NAT gateways, security groups
{{/if}}
{{#if compute.instances}}
- **Compute**: {{#if compute.autoScaling}}Auto-scaling groups{{else}}Virtual machines{{/if}}{{#if compute.loadBalancer}}, load balancers{{/if}}
{{/if}}
{{#if storage.databases}}
- **Storage**: {{#each storage.databases}}{{engine}} databases{{#unless @last}}, {{/unless}}{{/each}}{{#if storage.objectStorage}}, object storage{{/if}}{{#if storage.fileSystem}}, file systems{{/if}}
{{/if}}
{{#if security.keyManagement}}
- **Security**: Key management{{#if security.secretsManager}}, secrets management{{/if}}{{#if security.waf}}, web application firewall{{/if}}
{{/if}}
{{#if monitoring.cloudWatch}}
- **Monitoring**: CloudWatch dashboards{{#if monitoring.logging}}, centralized logging{{/if}}{{#if monitoring.alerting}}, alerting{{/if}}
{{/if}}

## Prerequisites

{{#eq cloudProvider "aws"}}
1. **AWS CLI**: Install and configure the AWS CLI with appropriate credentials
   ```bash
   aws configure
   ```

2. **Required AWS Permissions**: Ensure your AWS user/role has permissions for:
   - EC2 (instances, VPC, security groups)
   - RDS (if using databases)
   - S3 (for object storage and state backend)
   - IAM (for roles and policies)
   - CloudWatch (for monitoring)
   {{#if security.keyManagement}}
   - KMS (for encryption)
   {{/if}}
   {{#if security.secretsManager}}
   - Secrets Manager
   {{/if}}
{{/eq}}

{{#eq cloudProvider "azure"}}
1. **Azure CLI**: Install and configure the Azure CLI
   ```bash
   az login
   ```

2. **Required Azure Permissions**: Ensure your Azure account has permissions for:
   - Virtual Machines and Scale Sets
   - Virtual Networks and Subnets
   - Storage Accounts
   - SQL Databases (if using databases)
   - Key Vault (if using key management)
   - Monitor and Log Analytics
{{/eq}}

{{#eq cloudProvider "gcp"}}
1. **Google Cloud SDK**: Install and configure the gcloud CLI
   ```bash
   gcloud auth login
   gcloud config set project {{projectName}}-{{environment}}
   ```

2. **Enable Required APIs**:
   ```bash
   gcloud services enable compute.googleapis.com
   gcloud services enable sqladmin.googleapis.com
   gcloud services enable storage.googleapis.com
   gcloud services enable cloudkms.googleapis.com
   gcloud services enable monitoring.googleapis.com
   gcloud services enable logging.googleapis.com
   ```
{{/eq}}

3. **Terraform**: Install Terraform (>= 1.0)
   ```bash
   # On macOS with Homebrew
   brew install terraform
   
   # Or download from https://www.terraform.io/downloads.html
   ```

## Directory Structure

```
terraform/
├── main.tf                    # Main configuration
├── variables.tf               # Variable definitions
├── outputs.tf                 # Output definitions
├── versions.tf                # Provider version constraints
├── providers.tf               # Provider configurations
├── terraform.tfvars.example   # Example variables file
├── modules/                   # Terraform modules
│   ├── networking/            # Network infrastructure
│   ├── compute/               # Compute resources
│   ├── storage/               # Storage resources
│   ├── security/              # Security resources
│   └── monitoring/            # Monitoring resources
└── environments/              # Environment-specific configs
    ├── development/
    ├── staging/
    └── production/
```

## Usage

### 1. Initial Setup

1. **Configure Backend**: Set up remote state storage
   {{#eq remoteState.backend "s3"}}
   ```bash
   # Create S3 bucket for Terraform state
   aws s3 mb s3://{{#if remoteState.bucket}}{{remoteState.bucket}}{{else}}{{projectName}}-terraform-state{{/if}}
   
   # Create DynamoDB table for state locking
   aws dynamodb create-table \
     --table-name {{projectName}}-terraform-locks \
     --attribute-definitions AttributeName=LockID,AttributeType=S \
     --key-schema AttributeName=LockID,KeyType=HASH \
     --billing-mode PAY_PER_REQUEST
   ```
   {{/eq}}
   
   {{#eq remoteState.backend "azurerm"}}
   ```bash
   # Create resource group and storage account for Terraform state
   az group create --name {{projectName}}-terraform-rg --location {{region}}
   az storage account create --name {{projectName}}tfstate --resource-group {{projectName}}-terraform-rg --location {{region}} --sku Standard_RAGRS --kind StorageV2
   az storage container create --name tfstate --account-name {{projectName}}tfstate
   ```
   {{/eq}}
   
   {{#eq remoteState.backend "gcs"}}
   ```bash
   # Create GCS bucket for Terraform state
   gsutil mb gs://{{#if remoteState.bucket}}{{remoteState.bucket}}{{else}}{{projectName}}-terraform-state{{/if}}
   gsutil versioning set on gs://{{#if remoteState.bucket}}{{remoteState.bucket}}{{else}}{{projectName}}-terraform-state{{/if}}
   ```
   {{/eq}}

2. **Copy Variables File**:
   ```bash
   cp terraform.tfvars.example terraform.tfvars
   ```

3. **Edit Variables**: Update `terraform.tfvars` with your specific values

### 2. Deployment

1. **Initialize Terraform**:
   ```bash
   terraform init
   ```

2. **Plan Deployment**:
   ```bash
   terraform plan
   ```

3. **Apply Configuration**:
   ```bash
   terraform apply
   ```

### 3. Environment-Specific Deployments

For different environments, use the environment-specific configurations:

```bash
# Development
terraform init -backend-config=environments/development/backend.tf
terraform apply -var-file=environments/development/terraform.tfvars

# Staging
terraform init -backend-config=environments/staging/backend.tf
terraform apply -var-file=environments/staging/terraform.tfvars

# Production
terraform init -backend-config=environments/production/backend.tf
terraform apply -var-file=environments/production/terraform.tfvars
```

## Important Variables

Key variables you need to configure in `terraform.tfvars`:

```hcl
# Project Information
project_name = "{{projectName}}"
environment  = "{{environment}}"
owner        = "your-email@company.com"

{{#eq cloudProvider "aws"}}
# AWS Configuration
region = "{{region}}"
{{/eq}}

{{#eq cloudProvider "azure"}}
# Azure Configuration
location = "{{region}}"
{{/eq}}

{{#eq cloudProvider "gcp"}}
# GCP Configuration
project_id = "{{projectName}}-{{environment}}"
region     = "{{region}}"
{{/eq}}

{{#if storage.databases}}
# Database Configuration
db_username = "dbadmin"
db_password = "change-this-password"  # Use a secure password
{{/if}}

# Monitoring Configuration
alert_email = "alerts@your-company.com"
```

## Security Considerations

{{#if compliance.encryption}}
- **Encryption**: All data is encrypted at rest and in transit
{{/if}}
{{#if security.keyManagement}}
- **Key Management**: Encryption keys are managed by cloud KMS services
{{/if}}
{{#if security.secretsManager}}
- **Secrets**: Database passwords and API keys are stored in secrets manager
{{/if}}
{{#if compliance.backup}}
- **Backups**: Automated backups are configured with {{compliance.retention}} days retention
{{/if}}
{{#if compliance.auditLogs}}
- **Audit Logs**: All access and changes are logged for compliance
{{/if}}

### Security Best Practices

1. **Least Privilege**: IAM roles follow principle of least privilege
2. **Network Security**: Private subnets for databases and applications
3. **Access Control**: Security groups restrict network access
4. **Monitoring**: All resources are monitored with alerts
5. **Compliance**: Configuration follows industry best practices

## Monitoring and Alerting

{{#if monitoring.cloudWatch}}
- **Dashboards**: CloudWatch dashboards for key metrics
{{/if}}
{{#if monitoring.logging}}
- **Logging**: Centralized logging for all components
{{/if}}
{{#if monitoring.alerting}}
- **Alerts**: Automated alerts for critical issues
  - High CPU usage
  - Database connection issues
  - Application errors
  - Infrastructure failures
{{/if}}

## Disaster Recovery

{{#if compliance.backup}}
- **Automated Backups**: {{compliance.retention}} days retention
- **Point-in-Time Recovery**: Database PITR enabled
- **Cross-Region Replication**: {{#eq environment "production"}}Enabled for production{{else}}Consider enabling for production{{/eq}}
{{/if}}

## Cost Optimization

- **Right-Sizing**: Instance types optimized for workload
- **Auto-Scaling**: Resources scale based on demand
- **Reserved Instances**: Consider reserved instances for production
- **Monitoring**: Cost monitoring and alerts configured

## Troubleshooting

### Common Issues

1. **State Lock**: If Terraform state is locked, check for concurrent operations
2. **Permissions**: Ensure your cloud credentials have necessary permissions
3. **Resource Limits**: Check cloud service quotas and limits
4. **Network Connectivity**: Verify VPC and security group configurations

### Useful Commands

```bash
# Check current state
terraform show

# List all resources
terraform state list

# Refresh state
terraform refresh

# Import existing resources
terraform import [resource_type].[name] [resource_id]

# Destroy infrastructure (careful!)
terraform destroy
```

## Support

For issues or questions:

1. Check the [Terraform documentation](https://www.terraform.io/docs)
{{#eq cloudProvider "aws"}}
2. AWS documentation and support
{{/eq}}
{{#eq cloudProvider "azure"}}
2. Azure documentation and support
{{/eq}}
{{#eq cloudProvider "gcp"}}
2. Google Cloud documentation and support
{{/eq}}
3. Contact your infrastructure team

## License

This infrastructure code is proprietary to {{projectName}}.

---

*Generated by Xaheen CLI Terraform Generator on {{date}}*