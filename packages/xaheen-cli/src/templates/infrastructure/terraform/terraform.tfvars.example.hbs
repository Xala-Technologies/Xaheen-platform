# Example Terraform variables file
# Copy this file to terraform.tfvars and update with your values
# Generated by Xaheen CLI Terraform Generator
{{!-- Project: {{projectName}} --}}
{{!-- Environment: {{environment}} --}}
{{!-- Cloud Provider: {{cloudProvider}} --}}

# Project configuration
project_name = "{{projectName}}"
environment  = "{{environment}}"
owner        = "{{owner}}"

# Regional configuration
region = "{{region}}"

{{#eq cloudProvider "gcp"}}
# GCP specific configuration
project_id = "your-gcp-project-id"
{{/eq}}

{{#eq cloudProvider "multi-cloud"}}
# Multi-cloud configuration
aws_region     = "{{region}}"
azure_location = "{{region}}"
gcp_region     = "{{region}}"
gcp_project_id = "your-gcp-project-id"
{{/eq}}

{{#if networking.vpc}}
# Networking configuration
{{#eq cloudProvider "aws"}}
vpc_cidr             = "10.0.0.0/16"
availability_zones   = ["{{region}}a", "{{region}}b", "{{region}}c"]
{{/eq}}
{{#eq cloudProvider "azure"}}
address_space        = ["10.0.0.0/16"]
availability_zones   = ["1", "2", "3"]
{{/eq}}
{{#eq cloudProvider "gcp"}}
network_cidr         = "10.0.0.0/16"
availability_zones   = ["{{region}}-a", "{{region}}-b", "{{region}}-c"]
{{/eq}}

{{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
public_subnets       = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
{{/or}}
{{#or (eq networking.subnets "private") (eq networking.subnets "both")}}
private_subnets      = ["10.0.10.0/24", "10.0.20.0/24", "10.0.30.0/24"]
{{/or}}

enable_nat_gateway   = {{networking.enableNatGateway}}
enable_vpn_gateway   = {{networking.enableVpnGateway}}
{{/if}}

{{#if compute.instances}}
# Compute configuration
{{#eq cloudProvider "aws"}}
instance_type        = "{{#if compute.instances.[0].instanceType}}{{compute.instances.[0].instanceType}}{{else}}t3.micro{{/if}}"
{{/eq}}
{{#eq cloudProvider "azure"}}
instance_type        = "{{#if compute.instances.[0].instanceType}}{{compute.instances.[0].instanceType}}{{else}}Standard_B1ls{{/if}}"
{{/eq}}
{{#eq cloudProvider "gcp"}}
instance_type        = "{{#if compute.instances.[0].instanceType}}{{compute.instances.[0].instanceType}}{{else}}e2-micro{{/if}}"
{{/eq}}

min_size            = {{#if compute.instances.[0].minSize}}{{compute.instances.[0].minSize}}{{else}}1{{/if}}
max_size            = {{#if compute.instances.[0].maxSize}}{{compute.instances.[0].maxSize}}{{else}}3{{/if}}
desired_capacity    = {{#if compute.instances.[0].desiredCapacity}}{{compute.instances.[0].desiredCapacity}}{{else}}2{{/if}}

enable_load_balancer = {{compute.loadBalancer}}
enable_auto_scaling  = {{compute.autoScaling}}
{{/if}}

# Storage configuration
enable_object_storage = {{storage.objectStorage}}
enable_file_system   = {{storage.fileSystem}}

{{#if storage.databases}}
# Database configuration
db_engine            = "{{#if storage.databases.[0].engine}}{{storage.databases.[0].engine}}{{else}}postgresql{{/if}}"
db_version           = "{{#if storage.databases.[0].version}}{{storage.databases.[0].version}}{{else}}15{{/if}}"
{{#eq cloudProvider "aws"}}
db_instance_class    = "{{#if storage.databases.[0].instanceClass}}{{storage.databases.[0].instanceClass}}{{else}}db.t3.micro{{/if}}"
{{/eq}}
{{#eq cloudProvider "azure"}}
db_instance_class    = "{{#if storage.databases.[0].instanceClass}}{{storage.databases.[0].instanceClass}}{{else}}GP_Gen5_2{{/if}}"
{{/eq}}
{{#eq cloudProvider "gcp"}}
db_instance_class    = "{{#if storage.databases.[0].instanceClass}}{{storage.databases.[0].instanceClass}}{{else}}db-f1-micro{{/if}}"
{{/eq}}
db_allocated_storage = {{#if storage.databases.[0].allocatedStorage}}{{storage.databases.[0].allocatedStorage}}{{else}}20{{/if}}
{{/if}}

# Security configuration
enable_kms             = {{security.keyManagement}}
enable_secrets_manager = {{security.secretsManager}}
enable_waf            = {{security.waf}}
iam_roles             = [
{{#each security.iamRoles}}
  "{{this}}"{{#unless @last}},{{/unless}}
{{/each}}
]

# Monitoring configuration
enable_cloudwatch = {{monitoring.cloudWatch}}
enable_logging    = {{monitoring.logging}}
enable_alerting   = {{monitoring.alerting}}
enable_tracing    = {{monitoring.tracing}}

# Compliance configuration
encryption_enabled     = {{compliance.encryption}}
backup_enabled        = {{compliance.backup}}
backup_retention_days = {{compliance.retention}}
audit_logs_enabled    = {{compliance.auditLogs}}

# Environment-specific overrides for {{environment}}
{{#eq environment "development"}}
# Development environment settings
# - Smaller instance sizes for cost optimization
# - Shorter backup retention
# - Less restrictive security for development access
{{/eq}}

{{#eq environment "staging"}}
# Staging environment settings
# - Production-like but smaller scale
# - Full monitoring and logging enabled
# - Testing-friendly configurations
{{/eq}}

{{#eq environment "production"}}
# Production environment settings
# - Full redundancy and high availability
# - Maximum security and compliance
# - Extended backup retention
# - Full monitoring and alerting
{{/eq}}