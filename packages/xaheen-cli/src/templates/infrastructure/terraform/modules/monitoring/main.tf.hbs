# Monitoring module main configuration
# Generated by Xaheen CLI Terraform Generator

{{#eq cloudProvider "aws"}}
{{#if monitoring.logging}}
# CloudWatch Log Groups
resource "aws_cloudwatch_log_group" "app" {
  name              = "/aws/ec2/${var.project_name}-${var.environment}"
  retention_in_days = var.backup_retention_days
  kms_key_id        = var.kms_key_id
  
  tags = var.tags
}

resource "aws_cloudwatch_log_group" "application" {
  name              = "/application/${var.project_name}-${var.environment}"
  retention_in_days = var.backup_retention_days
  kms_key_id        = var.kms_key_id
  
  tags = var.tags
}

# VPC Flow Logs
resource "aws_cloudwatch_log_group" "vpc_flow_logs" {
  count = var.vpc_id != null ? 1 : 0
  
  name              = "/aws/vpc/flowlogs/${var.project_name}-${var.environment}"
  retention_in_days = var.backup_retention_days
  kms_key_id        = var.kms_key_id
  
  tags = var.tags
}

resource "aws_flow_log" "vpc" {
  count = var.vpc_id != null ? 1 : 0
  
  iam_role_arn    = aws_iam_role.flow_log[0].arn
  log_destination = aws_cloudwatch_log_group.vpc_flow_logs[0].arn
  traffic_type    = "ALL"
  vpc_id          = var.vpc_id
  
  tags = var.tags
}

# IAM Role for VPC Flow Logs
resource "aws_iam_role" "flow_log" {
  count = var.vpc_id != null ? 1 : 0
  
  name = "${var.project_name}-${var.environment}-flow-log-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "vpc-flow-logs.amazonaws.com"
        }
      }
    ]
  })
  
  tags = var.tags
}

resource "aws_iam_role_policy" "flow_log" {
  count = var.vpc_id != null ? 1 : 0
  
  name = "${var.project_name}-${var.environment}-flow-log-policy"
  role = aws_iam_role.flow_log[0].id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}
{{/if}}

{{#if monitoring.cloudWatch}}
# CloudWatch Dashboard
resource "aws_cloudwatch_dashboard" "main" {
  dashboard_name = "${var.project_name}-${var.environment}-dashboard"
  
  dashboard_body = jsonencode({
    widgets = [
      {
        type   = "metric"
        x      = 0
        y      = 0
        width  = 12
        height = 6
        
        properties = {
          metrics = concat(
            var.autoscaling_group_name != null ? [
              ["AWS/EC2", "CPUUtilization", "AutoScalingGroupName", var.autoscaling_group_name],
              [".", "NetworkIn", ".", "."],
              [".", "NetworkOut", ".", "."]
            ] : [],
            var.database_instance_id != null ? [
              ["AWS/RDS", "DatabaseConnections", "DBInstanceIdentifier", var.database_instance_id],
              [".", "CPUUtilization", ".", "."],
              [".", "ReadLatency", ".", "."],
              [".", "WriteLatency", ".", "."]
            ] : [],
            var.load_balancer_arn_suffix != null ? [
              ["AWS/ApplicationELB", "RequestCount", "LoadBalancer", var.load_balancer_arn_suffix],
              [".", "TargetResponseTime", ".", "."],
              [".", "HTTPCode_Target_2XX_Count", ".", "."],
              [".", "HTTPCode_Target_4XX_Count", ".", "."],
              [".", "HTTPCode_Target_5XX_Count", ".", "."]
            ] : []
          )
          view    = "timeSeries"
          stacked = false
          region  = data.aws_region.current.name
          title   = "Application Metrics"
          period  = 300
        }
      },
      {
        type   = "log"
        x      = 0
        y      = 6
        width  = 12
        height = 6
        
        properties = {
          query   = "SOURCE '${aws_cloudwatch_log_group.app.name}' | fields @timestamp, @message | sort @timestamp desc | limit 100"
          region  = data.aws_region.current.name
          title   = "Recent Application Logs"
        }
      }
    ]
  })
}

data "aws_region" "current" {}
{{/if}}

{{#if monitoring.alerting}}
# SNS Topic for Alerts
resource "aws_sns_topic" "alerts" {
  name = "${var.project_name}-${var.environment}-alerts"
  
  kms_master_key_id = var.kms_key_id
  
  tags = var.tags
}

resource "aws_sns_topic_subscription" "email" {
  topic_arn = aws_sns_topic.alerts.arn
  protocol  = "email"
  endpoint  = var.alert_email
}

resource "aws_sns_topic_subscription" "sms" {
  count = var.alert_phone != null ? 1 : 0
  
  topic_arn = aws_sns_topic.alerts.arn
  protocol  = "sms"
  endpoint  = var.alert_phone
}

# CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "high_cpu" {
  count = var.autoscaling_group_name != null ? 1 : 0
  
  alarm_name          = "${var.project_name}-${var.environment}-high-cpu"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = "300"
  statistic           = "Average"
  threshold           = "80"
  alarm_description   = "This metric monitors ec2 cpu utilization"
  
  dimensions = {
    AutoScalingGroupName = var.autoscaling_group_name
  }
  
  alarm_actions = [aws_sns_topic.alerts.arn]
  ok_actions    = [aws_sns_topic.alerts.arn]
  
  tags = var.tags
}

resource "aws_cloudwatch_metric_alarm" "database_cpu" {
  count = var.database_instance_id != null ? 1 : 0
  
  alarm_name          = "${var.project_name}-${var.environment}-database-high-cpu"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/RDS"
  period              = "300"
  statistic           = "Average"
  threshold           = "80"
  alarm_description   = "This metric monitors RDS cpu utilization"
  
  dimensions = {
    DBInstanceIdentifier = var.database_instance_id
  }
  
  alarm_actions = [aws_sns_topic.alerts.arn]
  ok_actions    = [aws_sns_topic.alerts.arn]
  
  tags = var.tags
}

resource "aws_cloudwatch_metric_alarm" "database_connections" {
  count = var.database_instance_id != null ? 1 : 0
  
  alarm_name          = "${var.project_name}-${var.environment}-database-connections"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "DatabaseConnections"
  namespace           = "AWS/RDS"
  period              = "300"
  statistic           = "Average"
  threshold           = "80"
  alarm_description   = "This metric monitors RDS connection count"
  
  dimensions = {
    DBInstanceIdentifier = var.database_instance_id
  }
  
  alarm_actions = [aws_sns_topic.alerts.arn]
  ok_actions    = [aws_sns_topic.alerts.arn]
  
  tags = var.tags
}

resource "aws_cloudwatch_metric_alarm" "alb_response_time" {
  count = var.load_balancer_arn_suffix != null ? 1 : 0
  
  alarm_name          = "${var.project_name}-${var.environment}-alb-response-time"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "TargetResponseTime"
  namespace           = "AWS/ApplicationELB"
  period              = "300"
  statistic           = "Average"
  threshold           = "1"
  alarm_description   = "This metric monitors ALB response time"
  
  dimensions = {
    LoadBalancer = var.load_balancer_arn_suffix
  }
  
  alarm_actions = [aws_sns_topic.alerts.arn]
  ok_actions    = [aws_sns_topic.alerts.arn]
  
  tags = var.tags
}

resource "aws_cloudwatch_metric_alarm" "alb_5xx_errors" {
  count = var.load_balancer_arn_suffix != null ? 1 : 0
  
  alarm_name          = "${var.project_name}-${var.environment}-alb-5xx-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "HTTPCode_Target_5XX_Count"
  namespace           = "AWS/ApplicationELB"
  period              = "300"
  statistic           = "Sum"
  threshold           = "10"
  alarm_description   = "This metric monitors ALB 5XX errors"
  treat_missing_data  = "notBreaching"
  
  dimensions = {
    LoadBalancer = var.load_balancer_arn_suffix
  }
  
  alarm_actions = [aws_sns_topic.alerts.arn]
  ok_actions    = [aws_sns_topic.alerts.arn]
  
  tags = var.tags
}
{{/if}}

{{#if monitoring.tracing}}
# X-Ray Service Map
resource "aws_xray_sampling_rule" "main" {
  rule_name      = "${var.project_name}-${var.environment}-sampling"
  priority       = 9000
  version        = 1
  reservoir_size = 1
  fixed_rate     = 0.1
  url_path       = "*"
  host           = "*"
  http_method    = "*"
  service_type   = "*"
  service_name   = "*"
  resource_arn   = "*"
  
  tags = var.tags
}
{{/if}}
{{/eq}}

{{#eq cloudProvider "azure"}}
{{#if monitoring.logging}}
# Log Analytics Workspace
resource "azurerm_log_analytics_workspace" "main" {
  name                = "${var.project_name}-${var.environment}-workspace"
  location            = var.location
  resource_group_name = var.resource_group_name
  sku                 = "PerGB2018"
  retention_in_days   = var.backup_retention_days
  
  tags = var.tags
}

# Application Insights
resource "azurerm_application_insights" "main" {
  name                = "${var.project_name}-${var.environment}-insights"
  location            = var.location
  resource_group_name = var.resource_group_name
  workspace_id        = azurerm_log_analytics_workspace.main.id
  application_type    = "web"
  
  tags = var.tags
}

# Diagnostic Settings for VMSS
resource "azurerm_monitor_diagnostic_setting" "vmss" {
  count = var.vmss_id != null ? 1 : 0
  
  name                       = "${var.project_name}-${var.environment}-vmss-diagnostics"
  target_resource_id         = var.vmss_id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id
  
  enabled_log {
    category = "AutoscaleEvaluations"
  }
  
  enabled_log {
    category = "AutoscaleScaleActions"
  }
  
  metric {
    category = "AllMetrics"
    enabled  = true
  }
}

# Diagnostic Settings for SQL Server
resource "azurerm_monitor_diagnostic_setting" "sql" {
  count = var.sql_server_id != null ? 1 : 0
  
  name                       = "${var.project_name}-${var.environment}-sql-diagnostics"
  target_resource_id         = var.sql_server_id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id
  
  enabled_log {
    category = "SQLSecurityAuditEvents"
  }
  
  enabled_log {
    category = "DevOpsOperationsAudit"
  }
  
  metric {
    category = "AllMetrics"
    enabled  = true
  }
}
{{/if}}

{{#if monitoring.alerting}}
# Action Group for Alerts
resource "azurerm_monitor_action_group" "main" {
  name                = "${var.project_name}-${var.environment}-alerts"
  resource_group_name = var.resource_group_name
  short_name          = "alerts"
  
  email_receiver {
    name          = "admin"
    email_address = var.alert_email
  }
  
  dynamic "sms_receiver" {
    for_each = var.alert_phone != null ? [1] : []
    content {
      name         = "admin-sms"
      country_code = "1"
      phone_number = var.alert_phone
    }
  }
  
  tags = var.tags
}

# Metric Alerts
resource "azurerm_monitor_metric_alert" "cpu_percent" {
  count = var.vmss_id != null ? 1 : 0
  
  name                = "${var.project_name}-${var.environment}-cpu-alert"
  resource_group_name = var.resource_group_name
  scopes              = [var.vmss_id]
  description         = "High CPU usage alert"
  
  criteria {
    metric_namespace = "Microsoft.Compute/virtualMachineScaleSets"
    metric_name      = "Percentage CPU"
    aggregation      = "Average"
    operator         = "GreaterThan"
    threshold        = 80
  }
  
  action {
    action_group_id = azurerm_monitor_action_group.main.id
  }
  
  frequency   = "PT1M"
  window_size = "PT5M"
  
  tags = var.tags
}

resource "azurerm_monitor_metric_alert" "database_cpu" {
  count = var.sql_server_id != null ? 1 : 0
  
  name                = "${var.project_name}-${var.environment}-database-cpu-alert"
  resource_group_name = var.resource_group_name
  scopes              = [var.sql_server_id]
  description         = "High database CPU usage alert"
  
  criteria {
    metric_namespace = "Microsoft.Sql/servers/databases"
    metric_name      = "cpu_percent"
    aggregation      = "Average"
    operator         = "GreaterThan"
    threshold        = 80
  }
  
  action {
    action_group_id = azurerm_monitor_action_group.main.id
  }
  
  frequency   = "PT1M"
  window_size = "PT5M"
  
  tags = var.tags
}

resource "azurerm_monitor_metric_alert" "database_connections" {
  count = var.sql_server_id != null ? 1 : 0
  
  name                = "${var.project_name}-${var.environment}-database-connections-alert"
  resource_group_name = var.resource_group_name
  scopes              = [var.sql_server_id]
  description         = "High database connection count alert"
  
  criteria {
    metric_namespace = "Microsoft.Sql/servers/databases"
    metric_name      = "connection_successful"
    aggregation      = "Total"
    operator         = "GreaterThan"
    threshold        = 100
  }
  
  action {
    action_group_id = azurerm_monitor_action_group.main.id
  }
  
  frequency   = "PT1M"
  window_size = "PT5M"
  
  tags = var.tags
}
{{/if}}

{{#if monitoring.tracing}}
# Application Insights Web Test
resource "azurerm_application_insights_web_test" "main" {
  name                    = "${var.project_name}-${var.environment}-webtest"
  location                = var.location
  resource_group_name     = var.resource_group_name
  application_insights_id = azurerm_application_insights.main.id
  kind                    = "ping"
  frequency               = 300
  timeout                 = 60
  enabled                 = true
  geo_locations           = ["us-tx-sn1-azr", "us-il-ch1-azr"]
  
  configuration = <<XML
<WebTest Name="${var.project_name}-${var.environment}-webtest" Enabled="True" CssProjectStructure="" CssIteration="" Timeout="60" WorkItemIds="" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010" Description="" CredentialUserName="" CredentialPassword="" PreAuthenticate="True" Proxy="default" StopOnError="False" RecordedResultFile="" ResultsLocale="">
  <Items>
    <Request Method="GET" Version="1.1" Url="https://example.com" ThinkTime="0" Timeout="60" ParseDependentRequests="True" FollowRedirects="True" RecordResult="True" Cache="False" ResponseTimeGoal="0" Encoding="utf-8" ExpectedHttpStatusCode="200" ExpectedResponseUrl="" ReportingName="" IgnoreHttpStatusCode="False" />
  </Items>
</WebTest>
XML
  
  tags = var.tags
}
{{/if}}
{{/eq}}

{{#eq cloudProvider "gcp"}}
{{#if monitoring.logging}}
# Log Sink for Application Logs
resource "google_logging_project_sink" "main" {
  name        = "${var.project_name}-${var.environment}-sink"
  destination = "storage.googleapis.com/${google_storage_bucket.logs.name}"
  
  filter = "severity >= WARNING OR resource.type=\"gce_instance\" OR resource.type=\"cloudsql_database\""
  
  unique_writer_identity = true
}

# Storage Bucket for Logs
resource "google_storage_bucket" "logs" {
  name     = "${var.project_name}-${var.environment}-logs-${random_id.bucket_suffix.hex}"
  location = var.region
  
  lifecycle_rule {
    condition {
      age = var.backup_retention_days
    }
    action {
      type = "Delete"
    }
  }
  
  labels = {
    project     = var.project_name
    environment = var.environment
  }
}

resource "google_storage_bucket_iam_binding" "logs" {
  bucket = google_storage_bucket.logs.name
  role   = "roles/storage.objectCreator"
  
  members = [
    google_logging_project_sink.main.writer_identity,
  ]
}

resource "random_id" "bucket_suffix" {
  byte_length = 4
}
{{/if}}

{{#if monitoring.alerting}}
# Notification Channel
resource "google_monitoring_notification_channel" "email" {
  display_name = "Email Notification Channel"
  type         = "email"
  
  labels = {
    email_address = var.alert_email
  }
  
  description = "Email notifications for ${var.project_name} ${var.environment}"
}

resource "google_monitoring_notification_channel" "sms" {
  count = var.alert_phone != null ? 1 : 0
  
  display_name = "SMS Notification Channel"
  type         = "sms"
  
  labels = {
    number = var.alert_phone
  }
  
  description = "SMS notifications for ${var.project_name} ${var.environment}"
}

# Alert Policies
resource "google_monitoring_alert_policy" "cpu_usage" {
  count = var.instance_group_name != null ? 1 : 0
  
  display_name = "${var.project_name}-${var.environment} High CPU Usage"
  combiner     = "OR"
  
  conditions {
    display_name = "CPU usage is above 80%"
    
    condition_threshold {
      filter          = "resource.type=\"gce_instance\" AND resource.labels.instance_name=~\"${var.instance_group_name}.*\""
      duration        = "300s"
      comparison      = "COMPARISON_GT"
      threshold_value = 0.8
      
      aggregations {
        alignment_period   = "300s"
        per_series_aligner = "ALIGN_MEAN"
      }
    }
  }
  
  notification_channels = compact([
    google_monitoring_notification_channel.email.name,
    var.alert_phone != null ? google_monitoring_notification_channel.sms[0].name : null
  ])
  
  alert_strategy {
    auto_close = "1800s"
  }
}

resource "google_monitoring_alert_policy" "database_cpu" {
  count = var.database_instance_name != null ? 1 : 0
  
  display_name = "${var.project_name}-${var.environment} Database High CPU"
  combiner     = "OR"
  
  conditions {
    display_name = "Database CPU usage is above 80%"
    
    condition_threshold {
      filter          = "resource.type=\"cloudsql_database\" AND resource.labels.database_id=\"${var.project_id}:${var.database_instance_name}\""
      duration        = "300s"
      comparison      = "COMPARISON_GT"
      threshold_value = 0.8
      
      aggregations {
        alignment_period   = "300s"
        per_series_aligner = "ALIGN_MEAN"
      }
    }
  }
  
  notification_channels = compact([
    google_monitoring_notification_channel.email.name,
    var.alert_phone != null ? google_monitoring_notification_channel.sms[0].name : null
  ])
  
  alert_strategy {
    auto_close = "1800s"
  }
}

resource "google_monitoring_alert_policy" "database_connections" {
  count = var.database_instance_name != null ? 1 : 0
  
  display_name = "${var.project_name}-${var.environment} Database Connections"
  combiner     = "OR"
  
  conditions {
    display_name = "Database connection count is high"
    
    condition_threshold {
      filter          = "resource.type=\"cloudsql_database\" AND resource.labels.database_id=\"${var.project_id}:${var.database_instance_name}\""
      duration        = "300s"
      comparison      = "COMPARISON_GT"
      threshold_value = 80
      
      aggregations {
        alignment_period   = "300s"
        per_series_aligner = "ALIGN_MEAN"
      }
    }
  }
  
  notification_channels = compact([
    google_monitoring_notification_channel.email.name,
    var.alert_phone != null ? google_monitoring_notification_channel.sms[0].name : null
  ])
  
  alert_strategy {
    auto_close = "1800s"
  }
}
{{/if}}

{{#if monitoring.tracing}}
# Cloud Trace
resource "google_project_service" "cloudtrace" {
  service = "cloudtrace.googleapis.com"
  
  disable_dependent_services = true
}

# Uptime Check
resource "google_monitoring_uptime_check_config" "main" {
  display_name = "${var.project_name}-${var.environment}-uptime-check"
  timeout      = "10s"
  period       = "60s"
  
  http_check {
    path         = "/health"
    port         = 80
    use_ssl      = false
    validate_ssl = false
  }
  
  monitored_resource {
    type = "uptime_url"
    labels = {
      project_id = var.project_id
      host       = "example.com" # Replace with actual domain
    }
  }
  
  content_matchers {
    content = "OK"
  }
  
  checker_type = "STATIC_IP_CHECKERS"
}
{{/if}}
{{/eq}}