# Security module main configuration
# Generated by Xaheen CLI Terraform Generator

{{#eq cloudProvider "aws"}}
# Data sources
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

{{#if security.keyManagement}}
# KMS Key
resource "aws_kms_key" "main" {
  description             = "KMS key for ${var.project_name} ${var.environment}"
  deletion_window_in_days = var.environment == "production" ? 30 : 7
  enable_key_rotation     = true
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid    = "Enable IAM User Permissions"
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"
        }
        Action   = "kms:*"
        Resource = "*"
      },
      {
        Sid    = "Allow CloudWatch Logs"
        Effect = "Allow"
        Principal = {
          Service = "logs.amazonaws.com"
        }
        Action = [
          "kms:Encrypt",
          "kms:Decrypt",
          "kms:ReEncrypt*",
          "kms:GenerateDataKey*",
          "kms:DescribeKey"
        ]
        Resource = "*"
        Condition = {
          ArnEquals = {
            "kms:EncryptionContext:aws:logs:arn" = "arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:*"
          }
        }
      },
      {
        Sid    = "Allow S3 Service"
        Effect = "Allow"
        Principal = {
          Service = "s3.amazonaws.com"
        }
        Action = [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ]
        Resource = "*"
      },
      {
        Sid    = "Allow RDS Service"
        Effect = "Allow"
        Principal = {
          Service = "rds.amazonaws.com"
        }
        Action = [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ]
        Resource = "*"
      }
    ]
  })
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-kms-key"
  })
}

resource "aws_kms_alias" "main" {
  name          = "alias/${var.project_name}-${var.environment}"
  target_key_id = aws_kms_key.main.key_id
}
{{/if}}

# EC2 Instance Role
resource "aws_iam_role" "ec2_role" {
  name = "${var.project_name}-${var.environment}-ec2-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
  
  tags = var.tags
}

resource "aws_iam_instance_profile" "ec2_profile" {
  name = "${var.project_name}-${var.environment}-ec2-profile"
  role = aws_iam_role.ec2_role.name
}

resource "aws_iam_role_policy" "ec2_policy" {
  name = "${var.project_name}-${var.environment}-ec2-policy"
  role = aws_iam_role.ec2_role.id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:ListBucket"
        ]
        Resource = [
          "arn:aws:s3:::${var.project_name}-${var.environment}-*",
          "arn:aws:s3:::${var.project_name}-${var.environment}-*/*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups"
        ]
        Resource = "arn:aws:logs:*:*:*"
      },
      {
        Effect = "Allow"
        Action = [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath"
        ]
        Resource = "arn:aws:ssm:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:parameter/${var.project_name}/${var.environment}/*"
      },
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue"
        ]
        Resource = "arn:aws:secretsmanager:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:secret:${var.project_name}/${var.environment}/*"
      }
    ]
  })
}

# Custom IAM roles
{{#each security.iamRoles}}
resource "aws_iam_role" "{{this}}_role" {
  name = "${var.project_name}-${var.environment}-{{this}}-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
  
  tags = var.tags
}

resource "aws_iam_role_policy" "{{this}}_policy" {
  name = "${var.project_name}-${var.environment}-{{this}}-policy"
  role = aws_iam_role.{{this}}_role.id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}
{{/each}}

{{#if security.secretsManager}}
# Secrets Manager
resource "aws_secretsmanager_secret" "db_credentials" {
  name                    = "${var.project_name}/${var.environment}/db-credentials"
  description             = "Database credentials for ${var.project_name} ${var.environment}"
  kms_key_id             = var.enable_kms ? aws_kms_key.main[0].arn : null
  recovery_window_in_days = var.environment == "production" ? 30 : 0
  
  tags = var.tags
}

resource "aws_secretsmanager_secret" "api_keys" {
  name                    = "${var.project_name}/${var.environment}/api-keys"
  description             = "API keys for ${var.project_name} ${var.environment}"
  kms_key_id             = var.enable_kms ? aws_kms_key.main[0].arn : null
  recovery_window_in_days = var.environment == "production" ? 30 : 0
  
  tags = var.tags
}

resource "aws_secretsmanager_secret" "app_secrets" {
  name                    = "${var.project_name}/${var.environment}/app-secrets"
  description             = "Application secrets for ${var.project_name} ${var.environment}"
  kms_key_id             = var.enable_kms ? aws_kms_key.main[0].arn : null
  recovery_window_in_days = var.environment == "production" ? 30 : 0
  
  tags = var.tags
}
{{/if}}

{{#if security.waf}}
# WAF Web ACL
resource "aws_wafv2_web_acl" "main" {
  name  = "${var.project_name}-${var.environment}-waf"
  scope = "REGIONAL"
  
  default_action {
    allow {}
  }
  
  # AWS Managed Rules - Core Rule Set
  rule {
    name     = "AWSManagedRulesCommonRuleSet"
    priority = 1
    
    override_action {
      none {}
    }
    
    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesCommonRuleSet"
        vendor_name = "AWS"
      }
    }
    
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                 = "CommonRuleSetMetric"
      sampled_requests_enabled    = true
    }
  }
  
  # AWS Managed Rules - Known Bad Inputs
  rule {
    name     = "AWSManagedRulesKnownBadInputsRuleSet"
    priority = 2
    
    override_action {
      none {}
    }
    
    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesKnownBadInputsRuleSet"
        vendor_name = "AWS"
      }
    }
    
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                 = "KnownBadInputsMetric"
      sampled_requests_enabled    = true
    }
  }
  
  # Rate limiting rule
  rule {
    name     = "RateLimitRule"
    priority = 3
    
    action {
      block {}
    }
    
    statement {
      rate_based_statement {
        limit              = 2000
        aggregate_key_type = "IP"
      }
    }
    
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                 = "RateLimitMetric"
      sampled_requests_enabled    = true
    }
  }
  
  visibility_config {
    cloudwatch_metrics_enabled = true
    metric_name                 = "${var.project_name}-${var.environment}-waf"
    sampled_requests_enabled    = true
  }
  
  tags = var.tags
}

# WAF Association with Load Balancer
resource "aws_wafv2_web_acl_association" "main" {
  count = var.load_balancer_arn != null ? 1 : 0
  
  resource_arn = var.load_balancer_arn
  web_acl_arn  = aws_wafv2_web_acl.main.arn
}
{{/if}}

{{#if security.certificateManager}}
# ACM Certificate
resource "aws_acm_certificate" "main" {
  count = var.domain_name != null ? 1 : 0
  
  domain_name       = var.domain_name
  validation_method = "DNS"
  
  subject_alternative_names = [
    "*.${var.domain_name}"
  ]
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-cert"
  })
  
  lifecycle {
    create_before_destroy = true
  }
}
{{/if}}
{{/eq}}

{{#eq cloudProvider "azure"}}
# Data sources
data "azurerm_client_config" "current" {}

{{#if security.keyManagement}}
# Azure Key Vault
resource "azurerm_key_vault" "main" {
  name                = "${var.project_name}-${var.environment}-kv"
  location            = var.location
  resource_group_name = var.resource_group_name
  tenant_id           = data.azurerm_client_config.current.tenant_id
  sku_name            = "standard"
  
  enabled_for_disk_encryption     = true
  enabled_for_deployment          = true
  enabled_for_template_deployment = true
  purge_protection_enabled        = var.environment == "production"
  soft_delete_retention_days      = var.environment == "production" ? 90 : 7
  
  network_acls {
    default_action = "Deny"
    bypass         = "AzureServices"
  }
  
  access_policy {
    tenant_id = data.azurerm_client_config.current.tenant_id
    object_id = data.azurerm_client_config.current.object_id
    
    key_permissions = [
      "Create",
      "Get",
      "List",
      "Update",
      "Delete",
      "Recover",
      "Backup",
      "Restore"
    ]
    
    secret_permissions = [
      "Set",
      "Get",
      "List",
      "Delete",
      "Recover",
      "Backup",
      "Restore"
    ]
    
    certificate_permissions = [
      "Create",
      "Get",
      "List",
      "Update",
      "Delete",
      "Recover",
      "Backup",
      "Restore",
      "Import"
    ]
  }
  
  tags = var.tags
}

# Key Vault Secrets
resource "azurerm_key_vault_secret" "db_connection_string" {
  count = var.enable_secrets_manager ? 1 : 0
  
  name         = "db-connection-string"
  value        = "placeholder-connection-string"
  key_vault_id = azurerm_key_vault.main.id
  
  tags = var.tags
}

resource "azurerm_key_vault_secret" "api_keys" {
  count = var.enable_secrets_manager ? 1 : 0
  
  name         = "api-keys"
  value        = jsonencode({
    primary   = "placeholder-primary-key"
    secondary = "placeholder-secondary-key"
  })
  key_vault_id = azurerm_key_vault.main.id
  
  tags = var.tags
}
{{/if}}

# User Assigned Identity
resource "azurerm_user_assigned_identity" "main" {
  name                = "${var.project_name}-${var.environment}-identity"
  location            = var.location
  resource_group_name = var.resource_group_name
  
  tags = var.tags
}

# Role Assignments
resource "azurerm_role_assignment" "contributor" {
  scope                = "/subscriptions/${data.azurerm_client_config.current.subscription_id}/resourceGroups/${var.resource_group_name}"
  role_definition_name = "Contributor"
  principal_id         = azurerm_user_assigned_identity.main.principal_id
}

{{#if security.keyManagement}}
resource "azurerm_role_assignment" "key_vault_secrets_user" {
  scope                = azurerm_key_vault.main.id
  role_definition_name = "Key Vault Secrets User"
  principal_id         = azurerm_user_assigned_identity.main.principal_id
}
{{/if}}

{{#if security.waf}}
# Application Gateway with WAF
resource "azurerm_public_ip" "waf" {
  name                = "${var.project_name}-${var.environment}-waf-pip"
  location            = var.location
  resource_group_name = var.resource_group_name
  allocation_method   = "Static"
  sku                = "Standard"
  
  tags = var.tags
}

resource "azurerm_application_gateway" "main" {
  name                = "${var.project_name}-${var.environment}-waf"
  location            = var.location
  resource_group_name = var.resource_group_name
  
  sku {
    name     = "WAF_v2"
    tier     = "WAF_v2"
    capacity = 2
  }
  
  gateway_ip_configuration {
    name      = "gateway-ip-config"
    subnet_id = var.subnet_id
  }
  
  frontend_port {
    name = "frontend-port"
    port = 80
  }
  
  frontend_ip_configuration {
    name                 = "frontend-ip-config"
    public_ip_address_id = azurerm_public_ip.waf.id
  }
  
  backend_address_pool {
    name = "backend-pool"
  }
  
  backend_http_settings {
    name                  = "backend-http-settings"
    cookie_based_affinity = "Disabled"
    port                  = 80
    protocol              = "Http"
    request_timeout       = 60
  }
  
  http_listener {
    name                           = "http-listener"
    frontend_ip_configuration_name = "frontend-ip-config"
    frontend_port_name             = "frontend-port"
    protocol                       = "Http"
  }
  
  request_routing_rule {
    name                       = "routing-rule"
    rule_type                  = "Basic"
    http_listener_name         = "http-listener"
    backend_address_pool_name  = "backend-pool"
    backend_http_settings_name = "backend-http-settings"
  }
  
  waf_configuration {
    enabled          = true
    firewall_mode    = "Prevention"
    rule_set_type    = "OWASP"
    rule_set_version = "3.2"
  }
  
  tags = var.tags
}
{{/if}}
{{/eq}}

{{#eq cloudProvider "gcp"}}
{{#if security.keyManagement}}
# KMS Key Ring
resource "google_kms_key_ring" "main" {
  name     = "${var.project_name}-${var.environment}-keyring"
  location = var.region
  
  labels = {
    project     = var.project_name
    environment = var.environment
  }
}

# KMS Crypto Key
resource "google_kms_crypto_key" "main" {
  name     = "${var.project_name}-${var.environment}-key"
  key_ring = google_kms_key_ring.main.id
  
  rotation_period = "7776000s" # 90 days
  
  lifecycle {
    prevent_destroy = true
  }
  
  labels = {
    project     = var.project_name
    environment = var.environment
  }
}
{{/if}}

# Service Accounts
resource "google_service_account" "main" {
  account_id   = "${var.project_name}-${var.environment}-sa"
  display_name = "Main Service Account for ${var.project_name} ${var.environment}"
  description  = "Service account for ${var.project_name} application in ${var.environment}"
}

# IAM bindings for the main service account
resource "google_project_iam_member" "storage_admin" {
  project = var.project_id
  role    = "roles/storage.admin"
  member  = "serviceAccount:${google_service_account.main.email}"
}

resource "google_project_iam_member" "cloudsql_client" {
  project = var.project_id
  role    = "roles/cloudsql.client"
  member  = "serviceAccount:${google_service_account.main.email}"
}

resource "google_project_iam_member" "monitoring_writer" {
  project = var.project_id
  role    = "roles/monitoring.metricWriter"
  member  = "serviceAccount:${google_service_account.main.email}"
}

resource "google_project_iam_member" "logging_writer" {
  project = var.project_id
  role    = "roles/logging.logWriter"
  member  = "serviceAccount:${google_service_account.main.email}"
}

{{#if security.keyManagement}}
resource "google_kms_crypto_key_iam_binding" "crypto_key" {
  crypto_key_id = google_kms_crypto_key.main.id
  role          = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  
  members = [
    "serviceAccount:${google_service_account.main.email}",
  ]
}
{{/if}}

{{#if security.secretsManager}}
# Secret Manager Secrets
resource "google_secret_manager_secret" "db_credentials" {
  secret_id = "${var.project_name}-${var.environment}-db-credentials"
  
  replication {
    automatic = true
  }
  
  labels = {
    project     = var.project_name
    environment = var.environment
  }
}

resource "google_secret_manager_secret" "api_keys" {
  secret_id = "${var.project_name}-${var.environment}-api-keys"
  
  replication {
    automatic = true
  }
  
  labels = {
    project     = var.project_name
    environment = var.environment
  }
}

# IAM bindings for secrets
resource "google_secret_manager_secret_iam_binding" "db_credentials" {
  secret_id = google_secret_manager_secret.db_credentials.secret_id
  role      = "roles/secretmanager.secretAccessor"
  
  members = [
    "serviceAccount:${google_service_account.main.email}",
  ]
}

resource "google_secret_manager_secret_iam_binding" "api_keys" {
  secret_id = google_secret_manager_secret.api_keys.secret_id
  role      = "roles/secretmanager.secretAccessor"
  
  members = [
    "serviceAccount:${google_service_account.main.email}",
  ]
}
{{/if}}

{{#if security.waf}}
# Cloud Armor Security Policy
resource "google_compute_security_policy" "main" {
  name = "${var.project_name}-${var.environment}-security-policy"
  
  description = "Security policy for ${var.project_name} ${var.environment}"
  
  # Default rule
  rule {
    action   = "allow"
    priority = "2147483647"
    
    match {
      versioned_expr = "SRC_IPS_V1"
      config {
        src_ip_ranges = ["*"]
      }
    }
    
    description = "Default allow rule"
  }
  
  # Rate limiting rule
  rule {
    action   = "throttle"
    priority = 1000
    
    match {
      versioned_expr = "SRC_IPS_V1"
      config {
        src_ip_ranges = ["*"]
      }
    }
    
    rate_limit_options {
      conform_action = "allow"
      exceed_action  = "deny(429)"
      enforce_on_key = "IP"
      
      rate_limit_threshold {
        count        = 100
        interval_sec = 60
      }
    }
    
    description = "Rate limiting rule"
  }
  
  # SQL injection protection
  rule {
    action   = "deny(403)"
    priority = 2000
    
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('sqli-stable')"
      }
    }
    
    description = "SQL injection protection"
  }
  
  # XSS protection
  rule {
    action   = "deny(403)"
    priority = 3000
    
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('xss-stable')"
      }
    }
    
    description = "XSS protection"
  }
}
{{/if}}

# Custom service accounts for different roles
{{#each security.iamRoles}}
resource "google_service_account" "{{this}}" {
  account_id   = "${var.project_name}-${var.environment}-{{this}}"
  display_name = "{{this}} Service Account for ${var.project_name}"
  description  = "Service account for {{this}} role in ${var.project_name} ${var.environment}"
}
{{/each}}
{{/eq}}