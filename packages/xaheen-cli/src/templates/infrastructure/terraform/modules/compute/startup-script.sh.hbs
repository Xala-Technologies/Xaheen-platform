#!/bin/bash
# Startup script for GCP instances
# Generated by Xaheen CLI Terraform Generator
# Project: {{project_name}}
# Environment: {{environment}}

set -e

# Update system
apt-get update
apt-get upgrade -y

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
usermod -aG docker $USER

# Install Docker Compose
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Install Google Cloud Logging agent
curl -sSO https://dl.google.com/cloudagents/add-logging-agent-repo.sh
bash add-logging-agent-repo.sh --also-install

# Configure logging
cat > /etc/google-fluentd/config.d/app.conf << 'EOF'
<source>
  @type tail
  format syslog
  path /var/log/syslog
  pos_file /var/lib/google-fluentd/pos/syslog.pos
  read_from_head true
  tag gcp.syslog
</source>

<match gcp.**>
  @type google_cloud
  use_metadata_service true
  project_id {{project_id}}
  zone {{zone}}
</match>
EOF

systemctl restart google-fluentd

# Install Node.js
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs

# Install and configure nginx
apt-get install -y nginx
systemctl start nginx
systemctl enable nginx

# Create a simple health check endpoint
cat > /var/www/html/health << 'EOF'
OK
EOF

# Configure nginx for health checks
cat > /etc/nginx/sites-available/health << 'EOF'
server {
    listen 80;
    server_name _;
    
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
    
    location / {
        root /var/www/html;
        index index.html index.htm;
    }
}
EOF

ln -sf /etc/nginx/sites-available/health /etc/nginx/sites-enabled/default
systemctl reload nginx

# Install monitoring agent
curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
bash add-monitoring-agent-repo.sh --also-install

systemctl start stackdriver-agent
systemctl enable stackdriver-agent

echo "Startup script completed successfully" | logger -t startup-script