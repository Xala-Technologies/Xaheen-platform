# AWS VPC and Networking Module
# Generated by Xaheen CLI Terraform Generator
{{!-- Project: {{projectName}} --}}

# Input variables for the networking module
variable "project_name" {
  description = "Name of the project"
  type        = string
}

variable "environment" {
  description = "Environment name"
  type        = string
}

variable "vpc_cidr" {
  description = "CIDR block for VPC"
  type        = string
}

variable "availability_zones" {
  description = "List of availability zones"
  type        = list(string)
}

{{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
variable "public_subnets" {
  description = "List of public subnet CIDR blocks"
  type        = list(string)
}
{{/or}}

{{#or (eq networking.subnets "private") (eq networking.subnets "both")}}
variable "private_subnets" {
  description = "List of private subnet CIDR blocks"
  type        = list(string)
}
{{/or}}

variable "enable_nat_gateway" {
  description = "Enable NAT Gateway for private subnets"
  type        = bool
  default     = {{networking.enableNatGateway}}
}

variable "enable_vpn_gateway" {
  description = "Enable VPN Gateway"
  type        = bool
  default     = {{networking.enableVpnGateway}}
}

variable "tags" {
  description = "Tags to apply to resources"
  type        = map(string)
  default     = {}
}

# Data sources
data "aws_availability_zones" "available" {
  state = "available"
}

# VPC
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-vpc"
    Type = "Main VPC"
  })
}

# Internet Gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-igw"
  })
}

{{#if networking.enableNatGateway}}
# Elastic IPs for NAT Gateways
resource "aws_eip" "nat" {
  {{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
  count  = length(var.public_subnets)
  {{else}}
  count  = 1
  {{/or}}
  domain = "vpc"
  
  depends_on = [aws_internet_gateway.main]
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-eip-${count.index + 1}"
  })
}
{{/if}}

{{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
# Public Subnets
resource "aws_subnet" "public" {
  count = length(var.public_subnets)
  
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.public_subnets[count.index]
  availability_zone = length(var.availability_zones) > 0 ? var.availability_zones[count.index % length(var.availability_zones)] : data.aws_availability_zones.available.names[count.index % length(data.aws_availability_zones.available.names)]
  
  map_public_ip_on_launch = true
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-public-${count.index + 1}"
    Type = "Public"
    {{#if monitoring.logging}}
    FlowLogsEnabled = "true"
    {{/if}}
  })
}
{{/or}}

{{#or (eq networking.subnets "private") (eq networking.subnets "both")}}
# Private Subnets
resource "aws_subnet" "private" {
  count = length(var.private_subnets)
  
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnets[count.index]
  availability_zone = length(var.availability_zones) > 0 ? var.availability_zones[count.index % length(var.availability_zones)] : data.aws_availability_zones.available.names[count.index % length(data.aws_availability_zones.available.names)]
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-private-${count.index + 1}"
    Type = "Private"
    {{#if monitoring.logging}}
    FlowLogsEnabled = "true"
    {{/if}}
  })
}
{{/or}}

{{#if networking.enableNatGateway}}
# NAT Gateways
resource "aws_nat_gateway" "main" {
  {{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
  count = length(aws_subnet.public)
  
  allocation_id = aws_eip.nat[count.index].id
  subnet_id     = aws_subnet.public[count.index].id
  {{else}}
  count = 1
  
  allocation_id = aws_eip.nat[0].id
  subnet_id     = aws_subnet.private[0].id
  {{/or}}
  
  depends_on = [aws_internet_gateway.main]
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-nat-${count.index + 1}"
  })
}
{{/if}}

{{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
# Public Route Table
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-public-rt"
    Type = "Public"
  })
}

# Public Route Table Associations
resource "aws_route_table_association" "public" {
  count = length(aws_subnet.public)
  
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}
{{/or}}

{{#or (eq networking.subnets "private") (eq networking.subnets "both")}}
# Private Route Tables
resource "aws_route_table" "private" {
  {{#if networking.enableNatGateway}}
  count  = length(aws_subnet.private)
  {{else}}
  count  = 1
  {{/if}}
  vpc_id = aws_vpc.main.id
  
  {{#if networking.enableNatGateway}}
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.main[count.index].id
  }
  {{/if}}
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-private-rt-${count.index + 1}"
    Type = "Private"
  })
}

# Private Route Table Associations
resource "aws_route_table_association" "private" {
  count = length(aws_subnet.private)
  
  subnet_id      = aws_subnet.private[count.index].id
  {{#if networking.enableNatGateway}}
  route_table_id = aws_route_table.private[count.index].id
  {{else}}
  route_table_id = aws_route_table.private[0].id
  {{/if}}
}
{{/or}}

{{#if networking.enableVpnGateway}}
# VPN Gateway
resource "aws_vpn_gateway" "main" {
  vpc_id = aws_vpc.main.id
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-vpn-gw"
  })
}

# VPN Gateway Route Propagation
{{#or (eq networking.subnets "private") (eq networking.subnets "both")}}
resource "aws_vpn_gateway_route_propagation" "private" {
  {{#if networking.enableNatGateway}}
  count = length(aws_route_table.private)
  
  vpn_gateway_id = aws_vpn_gateway.main.id
  route_table_id = aws_route_table.private[count.index].id
  {{else}}
  vpn_gateway_id = aws_vpn_gateway.main.id
  route_table_id = aws_route_table.private[0].id
  {{/if}}
}
{{/or}}
{{/if}}

{{#if monitoring.logging}}
# VPC Flow Logs
resource "aws_flow_log" "vpc" {
  iam_role_arn    = aws_iam_role.flow_log.arn
  log_destination = aws_cloudwatch_log_group.vpc_flow_log.arn
  traffic_type    = "ALL"
  vpc_id          = aws_vpc.main.id
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-vpc-flow-logs"
  })
}

# CloudWatch Log Group for VPC Flow Logs
resource "aws_cloudwatch_log_group" "vpc_flow_log" {
  name              = "/aws/vpc/${var.project_name}-${var.environment}/flowlogs"
  retention_in_days = {{#if compliance.retention}}{{compliance.retention}}{{else}}30{{/if}}
  
  {{#if compliance.encryption}}
  kms_key_id = aws_kms_key.vpc_logs.arn
  {{/if}}
  
  tags = var.tags
}

# IAM Role for VPC Flow Logs
resource "aws_iam_role" "flow_log" {
  name = "${var.project_name}-${var.environment}-vpc-flow-log-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "vpc-flow-logs.amazonaws.com"
        }
      }
    ]
  })
  
  tags = var.tags
}

# IAM Policy for VPC Flow Logs
resource "aws_iam_role_policy" "flow_log" {
  name = "${var.project_name}-${var.environment}-vpc-flow-log-policy"
  role = aws_iam_role.flow_log.id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

{{#if compliance.encryption}}
# KMS Key for VPC Flow Logs encryption
resource "aws_kms_key" "vpc_logs" {
  description             = "KMS key for VPC Flow Logs encryption"
  deletion_window_in_days = 7
  
  tags = merge(var.tags, {
    Name = "${var.project_name}-${var.environment}-vpc-logs-key"
  })
}

resource "aws_kms_alias" "vpc_logs" {
  name          = "alias/${var.project_name}-${var.environment}-vpc-logs"
  target_key_id = aws_kms_key.vpc_logs.key_id
}
{{/if}}
{{/if}}

# Outputs
output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.main.id
}

output "vpc_cidr_block" {
  description = "CIDR block of the VPC"
  value       = aws_vpc.main.cidr_block
}

output "internet_gateway_id" {
  description = "ID of the Internet Gateway"
  value       = aws_internet_gateway.main.id
}

{{#or (eq networking.subnets "public") (eq networking.subnets "both")}}
output "public_subnets" {
  description = "List of IDs of the public subnets"
  value       = aws_subnet.public[*].id
}

output "public_subnet_cidrs" {
  description = "List of CIDR blocks of the public subnets"
  value       = aws_subnet.public[*].cidr_block
}
{{/or}}

{{#or (eq networking.subnets "private") (eq networking.subnets "both")}}
output "private_subnets" {
  description = "List of IDs of the private subnets"
  value       = aws_subnet.private[*].id
}

output "private_subnet_cidrs" {
  description = "List of CIDR blocks of the private subnets"
  value       = aws_subnet.private[*].cidr_block
}
{{/or}}

{{#if networking.enableNatGateway}}
output "nat_gateway_ids" {
  description = "List of IDs of the NAT Gateways"
  value       = aws_nat_gateway.main[*].id
}

output "nat_gateway_ips" {
  description = "List of public IP addresses of the NAT Gateways"
  value       = aws_eip.nat[*].public_ip
}
{{/if}}

{{#if networking.enableVpnGateway}}
output "vpn_gateway_id" {
  description = "ID of the VPN Gateway"
  value       = aws_vpn_gateway.main.id
}
{{/if}}