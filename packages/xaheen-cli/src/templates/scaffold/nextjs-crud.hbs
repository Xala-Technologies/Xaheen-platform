/**
 * {{className}} - Full-Stack CRUD Implementation
 * Generated at: {{generatedAt}}
 * Features: {{#each features}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}
 */

// Frontend Components
{{#if hasFeature 'crud'}}
// =============================================================================
// {{className}}List Component
// =============================================================================
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
{{#if hasFeature 'search'}}
import { useDebounce } from '@/hooks/useDebounce';
{{/if}}
{{#if norwegian}}
import { auditLogger } from '@/utils/audit-logger';
{{/if}}

interface {{className}}ListProps {
  readonly className?: string;
}

export const {{className}}List: React.FC<{{className}}ListProps> = ({ className }): JSX.Element => {
  const router = useRouter();
  const [{{camelCase name}}s, set{{className}}s] = useState<{{className}}[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  {{#if hasFeature 'search'}}
  const [searchTerm, setSearchTerm] = useState('');
  const debouncedSearchTerm = useDebounce(searchTerm, 300);
  {{/if}}
  
  {{#if hasFeature 'pagination'}}
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 10;
  {{/if}}
  
  {{#if hasFeature 'sorting'}}
  const [sortField, setSortField] = useState<string>('createdAt');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  {{/if}}

  const fetch{{className}}s = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        {{#if hasFeature 'pagination'}}
        page: currentPage.toString(),
        limit: pageSize.toString(),
        {{/if}}
        {{#if hasFeature 'search'}}
        search: debouncedSearchTerm,
        {{/if}}
        {{#if hasFeature 'sorting'}}
        sortField,
        sortOrder,
        {{/if}}
      });

      const response = await fetch(`/api/{{kebabCase name}}?${params}`);
      if (!response.ok) throw new Error('Failed to fetch {{camelCase name}}s');
      
      const data = await response.json();
      set{{className}}s(data.{{camelCase name}}s);
      {{#if hasFeature 'pagination'}}
      setTotalPages(data.totalPages);
      {{/if}}
      
      {{#if norwegian}}
      auditLogger.logDataAccess({
        resource: '{{camelCase name}}',
        action: 'list',
        count: data.{{camelCase name}}s.length,
        filters: { 
          {{#if hasFeature 'search'}}search: debouncedSearchTerm,{{/if}}
          {{#if hasFeature 'sorting'}}sort: `${sortField}_${sortOrder}`{{/if}}
        }
      });
      {{/if}}
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetch{{className}}s();
  }, [
    {{#if hasFeature 'pagination'}}currentPage,{{/if}}
    {{#if hasFeature 'search'}}debouncedSearchTerm,{{/if}}
    {{#if hasFeature 'sorting'}}sortField, sortOrder{{/if}}
  ]);

  const handleDelete = async (id: string) => {
    if (!confirm('Are you sure you want to delete this {{camelCase name}}?')) return;
    
    try {
      const response = await fetch(`/api/{{kebabCase name}}/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) throw new Error('Failed to delete {{camelCase name}}');
      
      await fetch{{className}}s();
      
      {{#if norwegian}}
      auditLogger.logDataDeletion({
        resource: '{{camelCase name}}',
        resourceId: id,
        permanent: false
      });
      {{/if}}
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Delete failed');
    }
  };

  if (loading) {
    return (
      <div className={`p-6 ${className || ''}`}>
        <div className="animate-pulse space-y-4">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="h-16 bg-gray-200 rounded"></div>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`p-6 ${className || ''}`}>
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-800">Error: {error}</p>
          <button
            onClick={fetch{{className}}s}
            className="mt-2 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`p-6 ${className || ''}`}>
      <div className="mb-6 flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">{{className}}s</h1>
        <button
          onClick={() => router.push('/{{kebabCase name}}/new')}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Add {{className}}
        </button>
      </div>

      {{#if hasFeature 'search'}}
      <div className="mb-4">
        <input
          type="text"
          placeholder="Search {{camelCase name}}s..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>
      {{/if}}

      <div className="bg-white shadow-lg rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              {{#each fields}}
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                {{#if sortable}}
                onClick={() => {
                  if (sortField === '{{name}}') {
                    setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
                  } else {
                    setSortField('{{name}}');
                    setSortOrder('asc');
                  }
                }}
                {{/if}}
              >
                {{displayName}}
                {{#if sortable}}
                {sortField === '{{name}}' && (
                  <span className="ml-1">
                    {sortOrder === 'asc' ? 'â†‘' : 'â†“'}
                  </span>
                )}
                {{/if}}
              </th>
              {{/each}}
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {{{camelCase name}}s.map(({{camelCase name}}) => (
              <tr key={{{camelCase name}}.id} className="hover:bg-gray-50">
                {{#each fields}}
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {{{camelCase ../name}}.{{name}}}
                </td>
                {{/each}}
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                  <button
                    onClick={() => router.push(`/{{kebabCase name}}/${{{camelCase name}}.id}`)}
                    className="text-blue-600 hover:text-blue-900"
                  >
                    View
                  </button>
                  <button
                    onClick={() => router.push(`/{{kebabCase name}}/${{{camelCase name}}.id}/edit`)}
                    className="text-indigo-600 hover:text-indigo-900"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => handleDelete({{camelCase name}}.id)}
                    className="text-red-600 hover:text-red-900"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {{#if hasFeature 'pagination'}}
      <div className="mt-6 flex justify-between items-center">
        <p className="text-sm text-gray-700">
          Page {currentPage} of {totalPages}
        </p>
        <div className="space-x-2">
          <button
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            className="px-4 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
          >
            Previous
          </button>
          <button
            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
            disabled={currentPage === totalPages}
            className="px-4 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
          >
            Next
          </button>
        </div>
      </div>
      {{/if}}

      {{#if norwegian}}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <p className="text-sm text-blue-800">
          ðŸ‡³ðŸ‡´ This component follows Norwegian UU accessibility guidelines
        </p>
      </div>
      {{/if}}
    </div>
  );
};

// =============================================================================
// {{className}}Form Component
// =============================================================================
interface {{className}}FormProps {
  readonly {{camelCase name}}?: Partial<{{className}}>;
  readonly onSubmit: (data: {{className}}FormData) => Promise<void>;
  readonly onCancel: () => void;
  readonly loading?: boolean;
}

interface {{className}}FormData {
  {{#each fields}}
  {{name}}: {{type}};
  {{/each}}
}

export const {{className}}Form: React.FC<{{className}}FormProps> = ({
  {{camelCase name}},
  onSubmit,
  onCancel,
  loading = false
}): JSX.Element => {
  const [formData, setFormData] = useState<{{className}}FormData>({
    {{#each fields}}
    {{name}}: {{camelCase ../name}}?.{{name}} || {{#if defaultValue}}{{defaultValue}}{{else}}''{{/if}},
    {{/each}}
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validate = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    {{#each fields}}
    {{#if required}}
    if (!formData.{{name}}) {
      newErrors.{{name}} = '{{displayName}} is required';
    }
    {{/if}}
    {{#if validation}}
    {{#each validation}}
    if (formData.{{../name}} && !{{this}}.test(formData.{{../name}})) {
      newErrors.{{../name}} = '{{../displayName}} is invalid';
    }
    {{/each}}
    {{/if}}
    {{/each}}
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validate()) return;
    
    try {
      await onSubmit(formData);
      {{#if norwegian}}
      auditLogger.logFormSubmission({
        form: '{{camelCase name}}',
        action: {{camelCase name}} ? 'update' : 'create',
        fields: Object.keys(formData)
      });
      {{/if}}
    } catch (error) {
      console.error('Form submission error:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {{#each fields}}
      <div>
        <label 
          htmlFor="{{name}}" 
          className="block text-sm font-medium text-gray-700 mb-2"
        >
          {{displayName}}{{#if required}} *{{/if}}
        </label>
        
        {{#if eq type 'text'}}
        <textarea
          id="{{name}}"
          name="{{name}}"
          value={formData.{{name}}}
          onChange={(e) => setFormData(prev => ({ ...prev, {{name}}: e.target.value }))}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          rows={4}
          {{#if required}}required{{/if}}
        />
        {{else if eq type 'boolean'}}
        <input
          type="checkbox"
          id="{{name}}"
          name="{{name}}"
          checked={formData.{{name}}}
          onChange={(e) => setFormData(prev => ({ ...prev, {{name}}: e.target.checked }))}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        {{else}}
        <input
          type="{{#if eq type 'email'}}email{{else if eq type 'date'}}date{{else if eq type 'number'}}number{{else}}text{{/if}}"
          id="{{name}}"
          name="{{name}}"
          value={formData.{{name}}}
          onChange={(e) => setFormData(prev => ({ ...prev, {{name}}: e.target.value }))}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          {{#if required}}required{{/if}}
        />
        {{/if}}
        
        {errors.{{name}} && (
          <p className="mt-1 text-sm text-red-600">{errors.{{name}}}</p>
        )}
      </div>
      {{/each}}
      
      <div className="flex justify-end space-x-4">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500"
          disabled={loading}
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={loading}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'Saving...' : ({{camelCase name}} ? 'Update' : 'Create')}
        </button>
      </div>
    </form>
  );
};
{{/if}}

// =============================================================================
// API Routes
// =============================================================================

// GET /api/{{kebabCase name}}
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    {{#if hasFeature 'pagination'}}
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const skip = (page - 1) * limit;
    {{/if}}
    {{#if hasFeature 'search'}}
    const search = searchParams.get('search') || '';
    {{/if}}
    {{#if hasFeature 'sorting'}}
    const sortField = searchParams.get('sortField') || 'createdAt';
    const sortOrder = searchParams.get('sortOrder') || 'desc';
    {{/if}}

    const whereClause = {
      {{#if hasFeature 'search'}}
      ...(search && {
        OR: [
          {{#each fields}}
          {{#if searchable}}
          { {{name}}: { contains: search, mode: 'insensitive' } },
          {{/if}}
          {{/each}}
        ]
      }),
      {{/if}}
    };

    const {{camelCase name}}s = await prisma.{{camelCase name}}.findMany({
      where: whereClause,
      {{#if hasFeature 'pagination'}}
      skip,
      take: limit,
      {{/if}}
      {{#if hasFeature 'sorting'}}
      orderBy: { [sortField]: sortOrder },
      {{/if}}
    });

    {{#if hasFeature 'pagination'}}
    const total = await prisma.{{camelCase name}}.count({ where: whereClause });
    const totalPages = Math.ceil(total / limit);
    {{/if}}

    return Response.json({
      {{camelCase name}}s,
      {{#if hasFeature 'pagination'}}
      pagination: {
        page,
        limit,
        total,
        totalPages,
      },
      {{/if}}
    });
  } catch (error) {
    console.error('GET {{kebabCase name}} error:', error);
    return Response.json(
      { error: 'Failed to fetch {{camelCase name}}s' },
      { status: 500 }
    );
  }
}

// POST /api/{{kebabCase name}}
export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Validation
    {{#each fields}}
    {{#if required}}
    if (!body.{{name}}) {
      return Response.json(
        { error: '{{displayName}} is required' },
        { status: 400 }
      );
    }
    {{/if}}
    {{/each}}

    const {{camelCase name}} = await prisma.{{camelCase name}}.create({
      data: {
        {{#each fields}}
        {{name}}: body.{{name}},
        {{/each}}
        {{#if norwegian}}
        uuAccessible: true,
        languagePreference: 'nb-NO',
        {{/if}}
      },
    });

    {{#if norwegian}}
    auditLogger.logDataCreation({
      resource: '{{camelCase name}}',
      resourceId: {{camelCase name}}.id,
      data: body
    });
    {{/if}}

    return Response.json({{camelCase name}}, { status: 201 });
  } catch (error) {
    console.error('POST {{kebabCase name}} error:', error);
    return Response.json(
      { error: 'Failed to create {{camelCase name}}' },
      { status: 500 }
    );
  }
}

export default {
  {{className}}List,
  {{className}}Form,
};