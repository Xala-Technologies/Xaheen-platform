/**
 * Backend Generator System
 * Complete backend code generation for full-stack applications
 * Supports NestJS, Express, Fastify, Hono with database integration
 */

export interface BackendGeneratorOptions {
	readonly framework: "nestjs" | "express" | "fastify" | "hono";
	readonly database: "postgresql" | "mysql" | "mongodb" | "sqlite" | "supabase";
	readonly orm: "prisma" | "typeorm" | "mongoose" | "drizzle";
	readonly authentication: "jwt" | "oauth" | "bankid" | "firebase" | "supabase";
	readonly features: readonly BackendFeature[];
	readonly deployment: "docker" | "kubernetes" | "serverless" | "cloud";
	readonly testing: boolean;
	readonly documentation: boolean;
	readonly monitoring: boolean;
}

export type BackendFeature =
	| "rest-api"
	| "graphql"
	| "websockets"
	| "file-upload"
	| "email"
	| "payments"
	| "notifications"
	| "caching"
	| "queue"
	| "cron"
	| "audit"
	| "logging"
	| "metrics";

export interface BackendGeneratorResult {
	readonly success: boolean;
	readonly files: readonly GeneratedFile[];
	readonly commands: readonly string[];
	readonly dependencies: readonly PackageDependency[];
	readonly message: string;
	readonly nextSteps: readonly string[];
}

export interface GeneratedFile {
	readonly path: string;
	readonly content: string;
	readonly type: "source" | "config" | "test" | "documentation";
	readonly language:
		| "typescript"
		| "javascript"
		| "yaml"
		| "json"
		| "dockerfile"
		| "sql";
}

export interface PackageDependency {
	readonly name: string;
	readonly version: string;
	readonly type: "dependency" | "devDependency" | "peerDependency";
	readonly description: string;
}

/**
 * Main backend generator function
 * Generates complete backend application with specified framework and features
 */
export async function generateBackend(
	projectPath: string,
	options: BackendGeneratorOptions,
): Promise<BackendGeneratorResult> {
	try {
		const generator = createBackendGenerator(options.framework);
		const result = await generator.generate(projectPath, options);

		return {
			success: true,
			files: result.files,
			commands: result.commands,
			dependencies: result.dependencies,
			message: `Successfully generated ${options.framework} backend with ${options.features.length} features`,
			nextSteps: [
				"Install dependencies with your package manager",
				"Configure environment variables",
				"Set up database connection",
				"Run database migrations",
				"Start development server",
				"Review generated documentation",
			],
		};
	} catch (error) {
		return {
			success: false,
			files: [],
			commands: [],
			dependencies: [],
			message: `Failed to generate backend: ${error instanceof Error ? error.message : "Unknown error"}`,
			nextSteps: ["Check the error message and try again"],
		};
	}
}

/**
 * Backend generator factory
 * Creates appropriate generator based on framework choice
 */
function createBackendGenerator(
	framework: BackendGeneratorOptions["framework"],
): BackendGenerator {
	switch (framework) {
		case "nestjs":
			const { NestJSGenerator } = require("./nestjs/generator");
			return new NestJSGenerator();
		case "express":
			// TODO: Implement ExpressGenerator
			throw new Error("Express generator not yet implemented");
		case "fastify":
			// TODO: Implement FastifyGenerator
			throw new Error("Fastify generator not yet implemented");
		case "hono":
			// TODO: Implement HonoGenerator
			throw new Error("Hono generator not yet implemented");
		default:
			throw new Error(`Unsupported backend framework: ${framework}`);
	}
}

/**
 * Abstract base class for backend generators
 * Provides common functionality for all framework generators
 */
export abstract class BackendGenerator {
	abstract readonly framework: string;
	abstract readonly defaultPort: number;
	abstract readonly supportedDatabases: readonly string[];
	abstract readonly supportedFeatures: readonly BackendFeature[];

	abstract generate(
		projectPath: string,
		options: BackendGeneratorOptions,
	): Promise<BackendGeneratorResult>;

	/**
	 * Generate package.json with framework-specific dependencies
	 */
	protected generatePackageJson(
		options: BackendGeneratorOptions,
	): GeneratedFile {
		const baseDependencies = this.getBaseDependencies(options);
		const featureDependencies = this.getFeatureDependencies(options.features);
		const databaseDependencies = this.getDatabaseDependencies(
			options.database,
			options.orm,
		);

		const packageJson = {
			name: "xaheen-backend",
			version: "1.0.0",
			description: `${this.framework} backend application generated by Xaheen CLI`,
			main: "dist/main.js",
			scripts: this.getScripts(options),
			dependencies: {
				...baseDependencies,
				...featureDependencies,
				...databaseDependencies,
			},
			devDependencies: this.getDevDependencies(options),
			engines: {
				node: ">=18.0.0",
			},
		};

		return {
			path: "package.json",
			content: JSON.stringify(packageJson, null, 2),
			type: "config",
			language: "json",
		};
	}

	/**
	 * Generate TypeScript configuration
	 */
	protected generateTsConfig(): GeneratedFile {
		const tsConfig = {
			compilerOptions: {
				target: "ES2022",
				module: "commonjs",
				lib: ["ES2022"],
				allowJs: true,
				outDir: "./dist",
				rootDir: "./src",
				strict: true,
				moduleResolution: "node",
				baseUrl: "./",
				paths: {
					"@/*": ["src/*"],
					"@/config/*": ["src/config/*"],
					"@/modules/*": ["src/modules/*"],
					"@/shared/*": ["src/shared/*"],
				},
				allowSyntheticDefaultImports: true,
				esModuleInterop: true,
				experimentalDecorators: true,
				emitDecoratorMetadata: true,
				skipLibCheck: true,
				forceConsistentCasingInFileNames: true,
				resolveJsonModule: true,
				declaration: true,
				declarationMap: true,
				sourceMap: true,
			},
			include: ["src/**/*"],
			exclude: ["node_modules", "dist", "**/*.spec.ts", "**/*.test.ts"],
		};

		return {
			path: "tsconfig.json",
			content: JSON.stringify(tsConfig, null, 2),
			type: "config",
			language: "json",
		};
	}

	/**
	 * Generate environment configuration
	 */
	protected generateEnvironmentConfig(
		options: BackendGeneratorOptions,
	): GeneratedFile[] {
		const envExample = this.getEnvironmentVariables(options);

		return [
			{
				path: ".env.example",
				content: Object.entries(envExample)
					.map(([key, value]) => `${key}=${value}`)
					.join("\n"),
				type: "config",
				language: "typescript",
			},
			{
				path: ".env",
				content: Object.entries(envExample)
					.map(([key, value]) => `${key}=${value}`)
					.join("\n"),
				type: "config",
				language: "typescript",
			},
		];
	}

	/**
	 * Generate Docker configuration
	 */
	protected generateDockerConfig(): GeneratedFile[] {
		const dockerfile = `# Multi-stage build for ${this.framework} application
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

FROM node:18-alpine AS development
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
EXPOSE ${this.defaultPort}
CMD ["npm", "run", "dev"]

FROM builder AS production
WORKDIR /app
COPY . .
RUN npm run build
EXPOSE ${this.defaultPort}
CMD ["npm", "start"]`;

		const dockerCompose = `version: '3.8'

services:
  app:
    build:
      context: .
      target: development
    ports:
      - "${this.defaultPort}:${this.defaultPort}"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - database
      - redis

  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: xaheen_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:`;

		return [
			{
				path: "Dockerfile",
				content: dockerfile,
				type: "config",
				language: "dockerfile",
			},
			{
				path: "docker-compose.yml",
				content: dockerCompose,
				type: "config",
				language: "yaml",
			},
		];
	}

	/**
	 * Generate README documentation
	 */
	protected generateReadme(options: BackendGeneratorOptions): GeneratedFile {
		const readme = `# ${this.framework.toUpperCase()} Backend Application

Generated by Xaheen CLI - Enterprise-grade ${this.framework} backend with TypeScript.

## Features

${options.features.map((feature) => `- ✅ ${feature.replace("-", " ").toUpperCase()}`).join("\n")}

## Quick Start

1. **Install Dependencies**
   \`\`\`bash
   npm install
   \`\`\`

2. **Configure Environment**
   \`\`\`bash
   cp .env.example .env
   # Edit .env with your configuration
   \`\`\`

3. **Start Database**
   \`\`\`bash
   docker-compose up -d database redis
   \`\`\`

4. **Run Migrations**
   \`\`\`bash
   npm run db:migrate
   \`\`\`

5. **Start Development Server**
   \`\`\`bash
   npm run dev
   \`\`\`

## API Documentation

- **Development**: http://localhost:${this.defaultPort}/docs
- **Health Check**: http://localhost:${this.defaultPort}/health

## Project Structure

\`\`\`
src/
├── config/          # Configuration files
├── modules/         # Feature modules
├── shared/          # Shared utilities
├── database/        # Database configuration
└── main.ts         # Application entry point
\`\`\`

## Available Scripts

- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production
- \`npm run start\` - Start production server
- \`npm run test\` - Run tests
- \`npm run test:e2e\` - Run end-to-end tests
- \`npm run db:migrate\` - Run database migrations
- \`npm run db:seed\` - Seed database with test data

## Deployment

### Docker
\`\`\`bash
docker build -t xaheen-backend .
docker run -p ${this.defaultPort}:${this.defaultPort} xaheen-backend
\`\`\`

### Kubernetes
\`\`\`bash
kubectl apply -f k8s/
\`\`\`

## Environment Variables

See \`.env.example\` for all available configuration options.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## License

MIT License - see LICENSE file for details.
`;

		return {
			path: "README.md",
			content: readme,
			type: "documentation",
			language: "typescript",
		};
	}

	// Abstract methods to be implemented by framework-specific generators
	protected abstract getBaseDependencies(
		options: BackendGeneratorOptions,
	): Record<string, string>;
	protected abstract getDevDependencies(
		options: BackendGeneratorOptions,
	): Record<string, string>;
	protected abstract getScripts(
		options: BackendGeneratorOptions,
	): Record<string, string>;
	protected abstract getEnvironmentVariables(
		options: BackendGeneratorOptions,
	): Record<string, string>;
	protected abstract getFeatureDependencies(
		features: readonly BackendFeature[],
	): Record<string, string>;
	protected abstract getDatabaseDependencies(
		database: string,
		orm: string,
	): Record<string, string>;
}

// Export framework-specific generators
export { NestJSGenerator } from "./nestjs/generator";

// TODO: Implement additional framework generators
// export { ExpressGenerator } from './express/generator';
// export { FastifyGenerator } from './fastify/generator';
// export { HonoGenerator } from './hono/generator';

// TODO: Implement utility functions
// export { generateDatabaseMigration } from './database/migrations';
// export { generateDatabaseSeeds } from './database/seeds';
// export { generateAPIDocumentation } from './documentation/api';
// export { generateTestSuite } from './testing/generator';
// export { generateDeploymentConfig } from './deployment/generator';
