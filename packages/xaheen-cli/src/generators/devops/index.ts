// DevOps and CI/CD Pipeline Generators
// Generated by Xaheen CLI - Stories 4.1, 4.2, and 4.3

export { DockerGenerator } from "./docker.generator";
export { DockerComposeGenerator } from "./docker-compose.generator";
export { KubernetesGenerator } from "./kubernetes.generator";
export { HelmGenerator } from "./helm.generator";
export { GitHubActionsGenerator } from "./github-actions.generator";
export { AzureDevOpsGenerator } from "./azure-devops.generator";
export { GitLabCIGenerator } from "./gitlab-ci.generator";
export { MonitoringGenerator } from "./monitoring.generator";
export { SecurityGenerator } from "./security.generator";
export { AutoScalingGenerator } from "./autoscaling.generator";
export { ServerlessScalingGenerator } from "./serverless-scaling.generator";

export type {
	AutoScalingOptions,
} from "./autoscaling.generator";

export type {
	ServerlessScalingOptions,
} from "./serverless-scaling.generator";

export type {
	DockerGeneratorOptions,
	DockerConfig,
} from "./docker.generator";

export type {
	DockerComposeGeneratorOptions,
	ComposeService,
	ComposeNetwork,
	ComposeVolume,
} from "./docker-compose.generator";

export type {
	KubernetesGeneratorOptions,
	KubernetesManifests,
} from "./kubernetes.generator";

export type {
	HelmGeneratorOptions,
	HelmValue,
	HelmDependency,
	HelmHook,
	HelmTest,
} from "./helm.generator";

export type {
	GitHubActionsGeneratorOptions,
	Environment as GitHubEnvironment,
	DeploymentTarget as GitHubDeploymentTarget,
	Registry as GitHubRegistry,
	WorkflowJob,
	WorkflowStep,
} from "./github-actions.generator";

export type {
	AzureDevOpsGeneratorOptions,
	AzureEnvironment,
	ServiceConnection,
	ScheduledTrigger,
	PipelineStage,
	PipelineJob,
	PipelineStep,
} from "./azure-devops.generator";

export type {
	GitLabCIGeneratorOptions,
	GitLabService,
	GitLabCache,
	GitLabArtifacts,
	GitLabEnvironment as GitLabCIEnvironment,
	GitLabRule,
	GitLabInclude,
	GitLabJob,
} from "./gitlab-ci.generator";

export type {
	MonitoringGeneratorOptions,
	MonitoredApplication,
	GrafanaDashboard,
	PrometheusAlert,
	ResourceRequirements,
	SecurityConfig,
} from "./monitoring.generator";

export type {
	SecurityGeneratorOptions,
	DataClassification,
	SecurityPolicy,
	SecurityAlert,
	SecurityTool,
	CertificateConfig,
	SecretConfig,
	AccessControlConfig,
	ComplianceConfig,
} from "./security.generator";

// DevOps Generator Factory
export class DevOpsGeneratorFactory {
	static createDockerGenerator() {
		return new DockerGenerator();
	}

	static createDockerComposeGenerator() {
		return new DockerComposeGenerator();
	}

	static createKubernetesGenerator() {
		return new KubernetesGenerator();
	}

	static createHelmGenerator() {
		return new HelmGenerator();
	}

	static createGitHubActionsGenerator() {
		return new GitHubActionsGenerator();
	}

	static createAzureDevOpsGenerator() {
		return new AzureDevOpsGenerator();
	}

	static createGitLabCIGenerator() {
		return new GitLabCIGenerator();
	}

	static createMonitoringGenerator() {
		return new MonitoringGenerator();
	}

	static createSecurityGenerator() {
		return new SecurityGenerator();
	}

	static createAutoScalingGenerator() {
		return new AutoScalingGenerator();
	}

	static createServerlessScalingGenerator() {
		return new ServerlessScalingGenerator();
	}

	static getSupportedPlatforms() {
		return [
			"docker",
			"kubernetes",
			"github-actions",
			"azure-devops",
			"gitlab-ci",
			"monitoring",
		] as const;
	}

	static createGenerator(platform: string) {
		switch (platform) {
			case "docker":
				return this.createDockerGenerator();
			case "kubernetes":
				return this.createKubernetesGenerator();
			case "github-actions":
				return this.createGitHubActionsGenerator();
			case "azure-devops":
				return this.createAzureDevOpsGenerator();
			case "gitlab-ci":
				return this.createGitLabCIGenerator();
			case "monitoring":
				return this.createMonitoringGenerator();
			default:
				throw new Error(`Unsupported DevOps platform: ${platform}`);
		}
	}
}

// DevOps Templates Registry
export const DEVOPS_TEMPLATES = {
	docker: {
		dockerfile: "devops/docker/Dockerfile.hbs",
		compose: "devops/docker/docker-compose.yml.hbs",
		dockerignore: "devops/docker/dockerignore.hbs",
		devcontainer: "devops/docker/devcontainer.json.hbs",
	},
	kubernetes: {
		deployment: "devops/kubernetes/deployment.yaml.hbs",
		service: "devops/kubernetes/service.yaml.hbs",
		ingress: "devops/kubernetes/ingress.yaml.hbs",
		namespace: "devops/kubernetes/namespace.yaml.hbs",
		configmap: "devops/kubernetes/configmap.yaml.hbs",
		secrets: "devops/kubernetes/secrets.yaml.hbs",
		hpa: "devops/kubernetes/hpa.yaml.hbs",
		networkPolicy: "devops/kubernetes/network-policy.yaml.hbs",
		kustomization: "devops/kubernetes/kustomization.yaml.hbs",
	},
	githubActions: {
		main: "devops/github-actions/main-workflow.yml.hbs",
		ci: "devops/github-actions/ci-workflow.yml.hbs",
		security: "devops/github-actions/security-workflow.yml.hbs",
		release: "devops/github-actions/release-workflow.yml.hbs",
		deployment: "devops/github-actions/deployment-workflow.yml.hbs",
	},
	azureDevOps: {
		main: "devops/azure-devops/azure-pipelines.yml.hbs",
		ci: "devops/azure-devops/ci-pipeline.yml.hbs",
		cd: "devops/azure-devops/cd-pipeline.yml.hbs",
		security: "devops/azure-devops/security-pipeline.yml.hbs",
	},
	gitlabCI: {
		main: "devops/gitlab-ci/gitlab-ci.yml.hbs",
		security: "devops/gitlab-ci/security-pipeline.yml.hbs",
		docker: "devops/gitlab-ci/docker.yml.hbs",
		pages: "devops/gitlab-ci/pages.yml.hbs",
	},
	monitoring: {
		prometheus: {
			config: "monitoring/prometheus/prometheus.yml.hbs",
			rules: "monitoring/prometheus/rules.yml.hbs",
			alerts: "monitoring/prometheus/alerts.yml.hbs",
		},
		grafana: {
			datasources: "monitoring/grafana/datasources.yml.hbs",
			dashboards: {
				application: "monitoring/grafana/dashboards/application.json.hbs",
				infrastructure: "monitoring/grafana/dashboards/infrastructure.json.hbs",
				logs: "monitoring/grafana/dashboards/logs.json.hbs",
				traces: "monitoring/grafana/dashboards/traces.json.hbs",
			},
			provisioning: "monitoring/grafana/provisioning.yml.hbs",
		},
		opentelemetry: {
			collector: "monitoring/opentelemetry/collector-config.yml.hbs",
			instrumentation: {
				node: "monitoring/instrumentation/node/index.ts.hbs",
				python: "monitoring/instrumentation/python/setup.py.hbs",
				go: "monitoring/instrumentation/go/main.go.hbs",
				java: "monitoring/instrumentation/java/Application.java.hbs",
			},
		},
		jaeger: {
			config: "monitoring/jaeger/jaeger.env.hbs",
		},
		loki: {
			config: "monitoring/loki/loki-config.yml.hbs",
			promtail: "monitoring/loki/promtail-config.yml.hbs",
		},
		tempo: {
			config: "monitoring/tempo/tempo-config.yml.hbs",
		},
		alertmanager: {
			config: "monitoring/alertmanager/alertmanager.yml.hbs",
			templates: "monitoring/alertmanager/templates.tmpl.hbs",
		},
		exporters: {
			nodeExporter: "monitoring/exporters/node-exporter-config.yml.hbs",
			blackboxExporter: "monitoring/exporters/blackbox-config.yml.hbs",
		},
		docker: {
			compose: "monitoring/docker/docker-compose.yml.hbs",
			dockerfile: "monitoring/docker/Dockerfile.hbs",
		},
		kubernetes: {
			namespace: "monitoring/kubernetes/namespace.yaml.hbs",
			serviceMonitor: "monitoring/kubernetes/service-monitor.yaml.hbs",
			prometheusRule: "monitoring/kubernetes/prometheus-rule.yaml.hbs",
			grafanaDeployment: "monitoring/kubernetes/grafana-deployment.yaml.hbs",
		},
		scripts: {
			start: "monitoring/scripts/start-monitoring.sh.hbs",
			stop: "monitoring/scripts/stop-monitoring.sh.hbs",
			cleanup: "monitoring/scripts/cleanup-monitoring.sh.hbs",
		},
	},
} as const;

// DevOps Configuration Presets
export const DEVOPS_PRESETS = {
	microservice: {
		platforms: ["docker", "kubernetes", "github-actions", "monitoring"],
		features: [
			"ci",
			"cd",
			"security",
			"monitoring",
			"distributed-tracing",
			"custom-metrics",
		],
	},
	webapp: {
		platforms: ["docker", "github-actions", "monitoring"],
		features: ["ci", "cd", "pages", "security", "monitoring"],
	},
	api: {
		platforms: ["docker", "kubernetes", "github-actions", "monitoring"],
		features: [
			"ci",
			"cd",
			"security",
			"testing",
			"monitoring",
			"custom-metrics",
		],
	},
	fullstack: {
		platforms: ["docker", "kubernetes", "github-actions", "monitoring"],
		features: [
			"ci",
			"cd",
			"security",
			"testing",
			"monitoring",
			"distributed-tracing",
			"log-correlation",
		],
	},
	observability: {
		platforms: ["monitoring"],
		features: [
			"prometheus",
			"grafana",
			"opentelemetry",
			"jaeger",
			"loki",
			"alertmanager",
			"distributed-tracing",
			"custom-metrics",
			"log-correlation",
			"sli-slo",
		],
	},
} as const;

export type DevOpsPlatform = keyof typeof DEVOPS_TEMPLATES;
export type DevOpsPreset = keyof typeof DEVOPS_PRESETS;
