// DevOps and CI/CD Pipeline Generators
// Generated by Xaheen CLI - Stories 4.1 and 4.2

export { DockerGenerator } from './docker.generator';
export { KubernetesGenerator } from './kubernetes.generator';
export { GitHubActionsGenerator } from './github-actions.generator';
export { AzureDevOpsGenerator } from './azure-devops.generator';
export { GitLabCIGenerator } from './gitlab-ci.generator';

export type {
  DockerGeneratorOptions,
  DockerConfig
} from './docker.generator';

export type {
  KubernetesGeneratorOptions,
  KubernetesManifests
} from './kubernetes.generator';

export type {
  GitHubActionsGeneratorOptions,
  Environment as GitHubEnvironment,
  DeploymentTarget as GitHubDeploymentTarget,
  Registry as GitHubRegistry,
  WorkflowJob,
  WorkflowStep
} from './github-actions.generator';

export type {
  AzureDevOpsGeneratorOptions,
  AzureEnvironment,
  ServiceConnection,
  ScheduledTrigger,
  PipelineStage,
  PipelineJob,
  PipelineStep
} from './azure-devops.generator';

export type {
  GitLabCIGeneratorOptions,
  GitLabService,
  GitLabCache,
  GitLabArtifacts,
  GitLabEnvironment as GitLabCIEnvironment,
  GitLabRule,
  GitLabInclude,
  GitLabJob
} from './gitlab-ci.generator';

// DevOps Generator Factory
export class DevOpsGeneratorFactory {
  static createDockerGenerator() {
    return new DockerGenerator();
  }

  static createKubernetesGenerator() {
    return new KubernetesGenerator();
  }

  static createGitHubActionsGenerator() {
    return new GitHubActionsGenerator();
  }

  static createAzureDevOpsGenerator() {
    return new AzureDevOpsGenerator();
  }

  static createGitLabCIGenerator() {
    return new GitLabCIGenerator();
  }

  static getSupportedPlatforms() {
    return [
      'docker',
      'kubernetes',
      'github-actions',
      'azure-devops',
      'gitlab-ci'
    ] as const;
  }

  static createGenerator(platform: string) {
    switch (platform) {
      case 'docker':
        return this.createDockerGenerator();
      case 'kubernetes':
        return this.createKubernetesGenerator();
      case 'github-actions':
        return this.createGitHubActionsGenerator();
      case 'azure-devops':
        return this.createAzureDevOpsGenerator();
      case 'gitlab-ci':
        return this.createGitLabCIGenerator();
      default:
        throw new Error(`Unsupported DevOps platform: ${platform}`);
    }
  }
}

// DevOps Templates Registry
export const DEVOPS_TEMPLATES = {
  docker: {
    dockerfile: 'devops/docker/Dockerfile.hbs',
    compose: 'devops/docker/docker-compose.yml.hbs',
    dockerignore: 'devops/docker/dockerignore.hbs',
    devcontainer: 'devops/docker/devcontainer.json.hbs'
  },
  kubernetes: {
    deployment: 'devops/kubernetes/deployment.yaml.hbs',
    service: 'devops/kubernetes/service.yaml.hbs',
    ingress: 'devops/kubernetes/ingress.yaml.hbs',
    namespace: 'devops/kubernetes/namespace.yaml.hbs',
    configmap: 'devops/kubernetes/configmap.yaml.hbs',
    secrets: 'devops/kubernetes/secrets.yaml.hbs',
    hpa: 'devops/kubernetes/hpa.yaml.hbs',
    networkPolicy: 'devops/kubernetes/network-policy.yaml.hbs',
    kustomization: 'devops/kubernetes/kustomization.yaml.hbs'
  },
  githubActions: {
    main: 'devops/github-actions/main-workflow.yml.hbs',
    ci: 'devops/github-actions/ci-workflow.yml.hbs',
    security: 'devops/github-actions/security-workflow.yml.hbs',
    release: 'devops/github-actions/release-workflow.yml.hbs',
    deployment: 'devops/github-actions/deployment-workflow.yml.hbs'
  },
  azureDevOps: {
    main: 'devops/azure-devops/azure-pipelines.yml.hbs',
    ci: 'devops/azure-devops/ci-pipeline.yml.hbs',
    cd: 'devops/azure-devops/cd-pipeline.yml.hbs',
    security: 'devops/azure-devops/security-pipeline.yml.hbs'
  },
  gitlabCI: {
    main: 'devops/gitlab-ci/gitlab-ci.yml.hbs',
    security: 'devops/gitlab-ci/security-pipeline.yml.hbs',
    docker: 'devops/gitlab-ci/docker.yml.hbs',
    pages: 'devops/gitlab-ci/pages.yml.hbs'
  }
} as const;

// DevOps Configuration Presets
export const DEVOPS_PRESETS = {
  microservice: {
    platforms: ['docker', 'kubernetes', 'github-actions'],
    features: ['ci', 'cd', 'security', 'monitoring']
  },
  webapp: {
    platforms: ['docker', 'github-actions'],
    features: ['ci', 'cd', 'pages', 'security']
  },
  api: {
    platforms: ['docker', 'kubernetes', 'github-actions'],
    features: ['ci', 'cd', 'security', 'testing']
  },
  fullstack: {
    platforms: ['docker', 'kubernetes', 'github-actions'],
    features: ['ci', 'cd', 'security', 'testing', 'monitoring']
  }
} as const;

export type DevOpsPlatform = keyof typeof DEVOPS_TEMPLATES;
export type DevOpsPreset = keyof typeof DEVOPS_PRESETS;