{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "calendar",
  "type": "registry:component",
  "title": "Calendar",
  "description": "Date selection with Norwegian locale support",
  "category": "components",
  "categories": [
    "components",
    "form",
    "date"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "react-day-picker"
  ],
  "registryDependencies": [
    "utils",
    "button"
  ],
  "files": [
    {
      "path": "components/calendar/calendar.tsx",
      "type": "registry:component",
      "content": "/**\n * Calendar Component - Professional Date Display and Selection\n * CLAUDE.md Compliant: Professional styling and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n */\n\nimport React, { useState, useMemo, useCallback, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// CALENDAR VARIANTS\n// =============================================================================\n\nconst calendarVariants = cva(\n  [\n    'rounded-lg border border-border bg-background p-6',\n    'shadow-md',\n    'focus-within:ring-2 focus-within:ring-primary/20 focus-within:ring-offset-2',\n    'min-w-80'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'border-border bg-background',\n        minimal: 'border-0 shadow-none bg-transparent p-4',\n        card: 'border-border bg-card shadow-lg',\n        compact: 'p-3 min-w-72'\n      },\n      size: {\n        sm: 'text-sm p-4 min-w-72',\n        md: 'text-base p-6 min-w-80',\n        lg: 'text-lg p-8 min-w-96'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst dayVariants = cva(\n  [\n    'inline-flex items-center justify-center',\n    'w-10 h-10 text-sm font-medium',\n    'rounded-md transition-all duration-200',\n    'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-1',\n    'disabled:opacity-50 disabled:cursor-not-allowed',\n    'hover:bg-accent hover:text-accent-foreground'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'text-foreground',\n        selected: [\n          'bg-primary text-primary-foreground',\n          'hover:bg-primary/90 focus:bg-primary/90',\n          'shadow-sm'\n        ],\n        today: [\n          'bg-accent text-accent-foreground',\n          'font-semibold border border-primary/50',\n          'hover:bg-accent/80'\n        ],\n        outside: 'text-muted-foreground opacity-50',\n        disabled: 'text-muted-foreground opacity-30 cursor-not-allowed',\n        range: [\n          'bg-accent/50 text-accent-foreground',\n          'hover:bg-accent/70'\n        ],\n        rangeStart: [\n          'bg-primary text-primary-foreground',\n          'rounded-r-none'\n        ],\n        rangeEnd: [\n          'bg-primary text-primary-foreground', \n          'rounded-l-none'\n        ]\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst headerVariants = cva([\n  'flex items-center justify-between',\n  'mb-6 pb-2 border-b border-border'\n]);\n\nconst navigationButtonVariants = cva([\n  'inline-flex items-center justify-center',\n  'w-10 h-10 rounded-md',\n  'text-muted-foreground hover:text-foreground',\n  'hover:bg-accent hover:text-accent-foreground',\n  'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-1',\n  'disabled:opacity-50 disabled:cursor-not-allowed',\n  'transition-colors duration-200'\n]);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface CalendarProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof calendarVariants> {\n  readonly selectedDate?: Date | null;\n  readonly selectedRange?: readonly [Date | null, Date | null];\n  readonly onDateSelect?: (date: Date | null) => void;\n  readonly onRangeSelect?: (range: readonly [Date | null, Date | null]) => void;\n  readonly mode?: 'single' | 'range' | 'multiple';\n  readonly disabled?: boolean | ((date: Date) => boolean);\n  readonly minDate?: Date;\n  readonly maxDate?: Date;\n  readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  readonly showOutsideDays?: boolean;\n  readonly locale?: string;\n  readonly numberOfMonths?: number;\n  readonly defaultMonth?: Date;\n  readonly fixedWeeks?: boolean;\n  readonly ariaLabel?: string;\n}\n\nexport interface CalendarHeaderProps {\n  readonly currentMonth: Date;\n  readonly onPreviousMonth: () => void;\n  readonly onNextMonth: () => void;\n  readonly onMonthSelect?: (month: Date) => void;\n  readonly locale?: string;\n  readonly disabled?: boolean;\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\nconst getDaysInMonth = (date: Date): number => {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n};\n\nconst getFirstDayOfMonth = (date: Date): number => {\n  return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n};\n\nconst addMonths = (date: Date, months: number): Date => {\n  const result = new Date(date);\n  result.setMonth(result.getMonth() + months);\n  return result;\n};\n\nconst addDays = (date: Date, days: number): Date => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\nconst isSameDay = (date1: Date | null, date2: Date | null): boolean => {\n  if (!date1 || !date2) return false;\n  return date1.getFullYear() === date2.getFullYear() &&\n         date1.getMonth() === date2.getMonth() &&\n         date1.getDate() === date2.getDate();\n};\n\nconst isToday = (date: Date): boolean => {\n  const today = new Date();\n  return isSameDay(date, today);\n};\n\nconst formatMonthYear = (date: Date, locale = 'nb-NO'): string => {\n  return new Intl.DateTimeFormat(locale, { \n    month: 'long', \n    year: 'numeric' \n  }).format(date);\n};\n\nconst formatWeekday = (date: Date, locale = 'nb-NO'): string => {\n  return new Intl.DateTimeFormat(locale, { \n    weekday: 'short' \n  }).format(date);\n};\n\n// =============================================================================\n// CALENDAR HEADER COMPONENT\n// =============================================================================\n\nconst CalendarHeader: React.FC<CalendarHeaderProps> = ({\n  currentMonth,\n  onPreviousMonth,\n  onNextMonth,\n  onMonthSelect,\n  locale = 'nb-NO',\n  disabled = false\n}) => (\n  <div className={headerVariants()}>\n    <button\n      className={navigationButtonVariants()}\n      onClick={onPreviousMonth}\n      disabled={disabled}\n      aria-label=\"Forrige m책ned\"\n      type=\"button\"\n    >\n      <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\" />\n      </svg>\n    </button>\n    \n    <div className=\"flex flex-col items-center\">\n      <button\n        className=\"text-lg font-semibold text-foreground hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary/20 rounded px-2 py-1\"\n        onClick={() => onMonthSelect?.(currentMonth)}\n        disabled={disabled}\n        aria-label={`Velg m책ned og 책r: ${formatMonthYear(currentMonth, locale)}`}\n        type=\"button\"\n      >\n        {formatMonthYear(currentMonth, locale)}\n      </button>\n    </div>\n    \n    <button\n      className={navigationButtonVariants()}\n      onClick={onNextMonth}\n      disabled={disabled}\n      aria-label=\"Neste m책ned\"\n      type=\"button\"\n    >\n      <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n      </svg>\n    </button>\n  </div>\n);\n\n// =============================================================================\n// MAIN CALENDAR COMPONENT\n// =============================================================================\n\nexport const Calendar = React.forwardRef<HTMLDivElement, CalendarProps>(({\n  className,\n  variant,\n  size,\n  selectedDate,\n  selectedRange,\n  onDateSelect,\n  onRangeSelect,\n  mode = 'single',\n  disabled = false,\n  minDate,\n  maxDate,\n  weekStartsOn = 1, // Monday = 1 (Norwegian standard)\n  showOutsideDays = true,\n  locale = 'nb-NO',\n  numberOfMonths = 1,\n  defaultMonth,\n  fixedWeeks = false,\n  ariaLabel,\n  ...props\n}, ref) => {\n  const [currentMonth, setCurrentMonth] = useState(\n    defaultMonth || selectedDate || new Date()\n  );\n  const [focusedDate, setFocusedDate] = useState<Date | null>(null);\n  const calendarRef = useRef<HTMLDivElement>(null);\n\n  // Generate calendar days\n  const calendarDays = useMemo(() => {\n    const daysInMonth = getDaysInMonth(currentMonth);\n    const firstDayOfMonth = getFirstDayOfMonth(currentMonth);\n    \n    // Adjust first day based on weekStartsOn\n    const adjustedFirstDay = (firstDayOfMonth - weekStartsOn + 7) % 7;\n    \n    const days: Array<{\n      date: Date;\n      isCurrentMonth: boolean;\n      isToday: boolean;\n      isSelected: boolean;\n      isInRange: boolean;\n      isRangeStart: boolean;\n      isRangeEnd: boolean;\n      isDisabled: boolean;\n    }> = [];\n    \n    // Previous month days\n    if (showOutsideDays) {\n      const previousMonth = addMonths(currentMonth, -1);\n      const daysInPreviousMonth = getDaysInMonth(previousMonth);\n      \n      for (let i = adjustedFirstDay - 1; i >= 0; i--) {\n        const date = new Date(previousMonth.getFullYear(), previousMonth.getMonth(), daysInPreviousMonth - i);\n        days.push({\n          date,\n          isCurrentMonth: false,\n          isToday: isToday(date),\n          isSelected: mode === 'single' ? isSameDay(date, selectedDate) : false,\n          isInRange: false,\n          isRangeStart: false,\n          isRangeEnd: false,\n          isDisabled: typeof disabled === 'function' ? disabled(date) : !!disabled\n        });\n      }\n    }\n    \n    // Current month days\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);\n      const isDateSelected = mode === 'single' ? isSameDay(date, selectedDate) : false;\n      \n      let isInRange = false;\n      let isRangeStart = false;\n      let isRangeEnd = false;\n      \n      if (mode === 'range' && selectedRange) {\n        const [start, end] = selectedRange;\n        if (start && end) {\n          isInRange = date >= start && date <= end;\n          isRangeStart = isSameDay(date, start);\n          isRangeEnd = isSameDay(date, end);\n        } else if (start) {\n          isRangeStart = isSameDay(date, start);\n        }\n      }\n      \n      const isDateDisabled = typeof disabled === 'function' ? disabled(date) : !!disabled ||\n        (minDate && date < minDate) ||\n        (maxDate && date > maxDate);\n      \n      days.push({\n        date,\n        isCurrentMonth: true,\n        isToday: isToday(date),\n        isSelected: isDateSelected,\n        isInRange,\n        isRangeStart,\n        isRangeEnd,\n        isDisabled: isDateDisabled\n      });\n    }\n    \n    // Next month days\n    const remainingDays = fixedWeeks ? 42 - days.length : Math.ceil((days.length) / 7) * 7 - days.length;\n    if (showOutsideDays && remainingDays > 0) {\n      const nextMonth = addMonths(currentMonth, 1);\n      \n      for (let day = 1; day <= remainingDays; day++) {\n        const date = new Date(nextMonth.getFullYear(), nextMonth.getMonth(), day);\n        days.push({\n          date,\n          isCurrentMonth: false,\n          isToday: isToday(date),\n          isSelected: mode === 'single' ? isSameDay(date, selectedDate) : false,\n          isInRange: false,\n          isRangeStart: false,\n          isRangeEnd: false,\n          isDisabled: typeof disabled === 'function' ? disabled(date) : !!disabled\n        });\n      }\n    }\n    \n    return days;\n  }, [currentMonth, selectedDate, selectedRange, mode, disabled, minDate, maxDate, weekStartsOn, showOutsideDays, fixedWeeks]);\n\n  // Generate weekday headers\n  const weekdays = useMemo(() => {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const date = addDays(new Date(2024, 0, 1 + weekStartsOn + i), 0); // Start from a known Monday\n      days.push(formatWeekday(date, locale));\n    }\n    return days;\n  }, [weekStartsOn, locale]);\n\n  // Handle date selection\n  const handleDateSelect = useCallback((date: Date, dayInfo: typeof calendarDays[0]) => {\n    if (dayInfo.isDisabled) return;\n    \n    if (mode === 'single') {\n      onDateSelect?.(date);\n    } else if (mode === 'range') {\n      if (!selectedRange || !selectedRange[0]) {\n        onRangeSelect?.([date, null]);\n      } else if (!selectedRange[1]) {\n        const [start] = selectedRange;\n        if (date < start) {\n          onRangeSelect?.([date, start]);\n        } else {\n          onRangeSelect?.([start, date]);\n        }\n      } else {\n        onRangeSelect?.([date, null]);\n      }\n    }\n    \n    setFocusedDate(date);\n  }, [mode, selectedRange, onDateSelect, onRangeSelect]);\n\n  // Navigation handlers\n  const goToPreviousMonth = useCallback(() => {\n    setCurrentMonth(prev => addMonths(prev, -1));\n  }, []);\n\n  const goToNextMonth = useCallback(() => {\n    setCurrentMonth(prev => addMonths(prev, 1));\n  }, []);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (!calendarRef.current?.contains(event.target as Node)) return;\n      if (!focusedDate) return;\n      \n      let newFocusedDate = focusedDate;\n      \n      switch (event.key) {\n        case 'ArrowLeft':\n          event.preventDefault();\n          newFocusedDate = addDays(focusedDate, -1);\n          break;\n        case 'ArrowRight':\n          event.preventDefault();\n          newFocusedDate = addDays(focusedDate, 1);\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          newFocusedDate = addDays(focusedDate, -7);\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          newFocusedDate = addDays(focusedDate, 7);\n          break;\n        case 'PageUp':\n          event.preventDefault();\n          newFocusedDate = addMonths(focusedDate, event.shiftKey ? -12 : -1);\n          break;\n        case 'PageDown':\n          event.preventDefault();\n          newFocusedDate = addMonths(focusedDate, event.shiftKey ? 12 : 1);\n          break;\n        case 'Home':\n          event.preventDefault();\n          newFocusedDate = new Date(focusedDate.getFullYear(), focusedDate.getMonth(), 1);\n          break;\n        case 'End':\n          event.preventDefault();\n          newFocusedDate = new Date(focusedDate.getFullYear(), focusedDate.getMonth() + 1, 0);\n          break;\n        case 'Enter':\n        case ' ':\n          event.preventDefault();\n          const dayInfo = calendarDays.find(day => isSameDay(day.date, focusedDate));\n          if (dayInfo) {\n            handleDateSelect(focusedDate, dayInfo);\n          }\n          return;\n        default:\n          return;\n      }\n      \n      setFocusedDate(newFocusedDate);\n      \n      // Update current month if focused date moves to a different month\n      if (newFocusedDate.getMonth() !== currentMonth.getMonth() || \n          newFocusedDate.getFullYear() !== currentMonth.getFullYear()) {\n        setCurrentMonth(new Date(newFocusedDate.getFullYear(), newFocusedDate.getMonth(), 1));\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [focusedDate, currentMonth, calendarDays, handleDateSelect]);\n\n  // Get day variant\n  const getDayVariant = useCallback((dayInfo: typeof calendarDays[0]) => {\n    if (dayInfo.isDisabled) return 'disabled';\n    if (!dayInfo.isCurrentMonth) return 'outside';\n    if (dayInfo.isRangeStart) return 'rangeStart';\n    if (dayInfo.isRangeEnd) return 'rangeEnd';\n    if (dayInfo.isInRange) return 'range';\n    if (dayInfo.isSelected) return 'selected';\n    if (dayInfo.isToday) return 'today';\n    return 'default';\n  }, []);\n\n  return (\n    <div\n      ref={ref || calendarRef}\n      className={cn(calendarVariants({ variant, size }), className)}\n      role=\"application\"\n      aria-label={ariaLabel || 'Kalender'}\n      {...props}\n    >\n      <CalendarHeader\n        currentMonth={currentMonth}\n        onPreviousMonth={goToPreviousMonth}\n        onNextMonth={goToNextMonth}\n        locale={locale}\n        disabled={typeof disabled === 'boolean' ? disabled : false}\n      />\n      \n      <div className=\"space-y-4\">\n        {/* Weekday headers */}\n        <div className=\"grid grid-cols-7 gap-1\">\n          {weekdays.map((weekday, index) => (\n            <div\n              key={index}\n              className=\"text-center text-sm font-medium text-muted-foreground py-2\"\n              aria-hidden=\"true\"\n            >\n              {weekday}\n            </div>\n          ))}\n        </div>\n        \n        {/* Calendar grid */}\n        <div className=\"grid grid-cols-7 gap-1\" role=\"grid\">\n          {calendarDays.map((dayInfo, index) => {\n            const isFocused = focusedDate && isSameDay(dayInfo.date, focusedDate);\n            \n            return (\n              <button\n                key={index}\n                className={cn(\n                  dayVariants({ variant: getDayVariant(dayInfo) }),\n                  isFocused && 'ring-2 ring-primary ring-offset-1'\n                )}\n                onClick={() => handleDateSelect(dayInfo.date, dayInfo)}\n                onFocus={() => setFocusedDate(dayInfo.date)}\n                disabled={dayInfo.isDisabled}\n                type=\"button\"\n                role=\"gridcell\"\n                aria-selected={dayInfo.isSelected || dayInfo.isInRange}\n                aria-current={dayInfo.isToday ? 'date' : undefined}\n                aria-label={`${dayInfo.date.getDate()} ${formatMonthYear(dayInfo.date, locale)}`}\n                tabIndex={isFocused ? 0 : -1}\n              >\n                {dayInfo.date.getDate()}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Screen reader instructions */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        Bruk piltastene for 책 navigere. Enter eller mellomrom for 책 velge dato.\n        Page Up/Page Down for 책 bytte m책ned. Shift + Page Up/Page Down for 책 bytte 책r.\n      </div>\n    </div>\n  );\n});\n\nCalendar.displayName = 'Calendar';\n\n// Export types and variants\nexport type { VariantProps };\nexport { calendarVariants, dayVariants };"
    }
  ]
}