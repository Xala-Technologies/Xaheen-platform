{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "label",
  "type": "registry:component",
  "title": "Label",
  "description": "Form field labels with accessibility",
  "category": "components",
  "categories": [
    "components",
    "form"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-label"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/label/label.tsx",
      "type": "registry:component",
      "content": "/**\n * Label Component - Form Field Labels\n * CLAUDE.md Compliant: Professional styling and accessibility standards\n * WCAG AAA: Proper form labeling, required indicators, and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst labelVariants = cva(\n  [\n    'text-sm font-medium leading-none',\n    'peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n    'cursor-pointer select-none'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-xs',\n        md: 'text-sm',\n        lg: 'text-base',\n        xl: 'text-lg'\n      },\n      variant: {\n        default: 'text-foreground',\n        muted: 'text-muted-foreground',\n        destructive: 'text-destructive',\n        success: 'text-green-600 dark:text-green-400',\n        warning: 'text-yellow-600 dark:text-yellow-400',\n        info: 'text-blue-600 dark:text-blue-400',\n        // NSM Security Classification variants\n        nsmOpen: 'text-green-700 dark:text-green-400',\n        nsmRestricted: 'text-yellow-700 dark:text-yellow-400',\n        nsmConfidential: 'text-red-700 dark:text-red-400',\n        nsmSecret: 'text-gray-700 dark:text-gray-400'\n      },\n      weight: {\n        normal: 'font-normal',\n        medium: 'font-medium',\n        semibold: 'font-semibold',\n        bold: 'font-bold'\n      },\n      required: {\n        true: 'after:content-[\"*\"] after:ml-1 after:text-destructive after:font-medium',\n        false: ''\n      },\n      disabled: {\n        true: 'cursor-not-allowed opacity-50',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      variant: 'default',\n      weight: 'medium',\n      required: false,\n      disabled: false\n    }\n  }\n);\n\nconst labelHelpTextVariants = cva(\n  [\n    'mt-1 block text-xs text-muted-foreground'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'text-muted-foreground',\n        muted: 'text-muted-foreground/70',\n        destructive: 'text-destructive/70',\n        success: 'text-green-600/70 dark:text-green-400/70',\n        warning: 'text-yellow-600/70 dark:text-yellow-400/70',\n        info: 'text-blue-600/70 dark:text-blue-400/70'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\n// Types\nexport interface LabelProps extends \n  React.LabelHTMLAttributes<HTMLLabelElement>,\n  VariantProps<typeof labelVariants> {\n  readonly helpText?: string;\n  readonly tooltip?: string;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly requiredIndicator?: React.ReactNode;\n  readonly optional?: boolean;\n}\n\nexport interface LabelGroupProps extends React.HTMLAttributes<HTMLDivElement> {\n  readonly orientation?: 'horizontal' | 'vertical';\n  readonly spacing?: 'tight' | 'normal' | 'loose';\n}\n\n// Main Label Component\nexport const Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  ({ \n    className, \n    size = 'md',\n    variant = 'default',\n    weight = 'medium',\n    required = false,\n    disabled = false,\n    helpText,\n    tooltip,\n    nsmClassification,\n    requiredIndicator,\n    optional = false,\n    children,\n    htmlFor,\n    ...props \n  }, ref) => {\n    const labelId = React.useId();\n    const helpTextId = helpText ? `${labelId}-help` : undefined;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    return (\n      <div className=\"flex flex-col\">\n        <label\n          ref={ref}\n          htmlFor={htmlFor}\n          className={cn(\n            labelVariants({ \n              size, \n              variant: finalVariant, \n              weight, \n              required: required && !optional, \n              disabled \n            }),\n            className\n          )}\n          title={tooltip}\n          {...props}\n        >\n          <span className=\"flex items-center gap-2\">\n            {children}\n            \n            {/* Custom Required Indicator */}\n            {required && !optional && requiredIndicator && (\n              <span className=\"text-destructive\" aria-label=\"Obligatorisk felt\">\n                {requiredIndicator}\n              </span>\n            )}\n            \n            {/* Optional Indicator */}\n            {optional && (\n              <span className=\"text-muted-foreground text-xs font-normal\">\n                (valgfritt)\n              </span>\n            )}\n            \n            {/* Tooltip Indicator */}\n            {tooltip && (\n              <span \n                className=\"text-muted-foreground hover:text-foreground cursor-help transition-colors\"\n                title={tooltip}\n                aria-label=\"Hjelpetekst tilgjengelig\"\n              >\n                â„¹\n              </span>\n            )}\n          </span>\n        </label>\n        \n        {/* Help Text */}\n        {helpText && (\n          <span \n            id={helpTextId}\n            className={cn(labelHelpTextVariants({ variant: finalVariant }))}\n            role=\"note\"\n          >\n            {helpText}\n          </span>\n        )}\n        \n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            Felt NSM-klassifisering: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nLabel.displayName = 'Label';\n\n// Label Group Component - For grouping related labels\nexport const LabelGroup = React.forwardRef<HTMLDivElement, LabelGroupProps>(\n  ({ \n    className, \n    orientation = 'vertical',\n    spacing = 'normal',\n    children,\n    ...props \n  }, ref) => {\n    const spacingClasses = {\n      tight: orientation === 'vertical' ? 'space-y-2' : 'space-x-2',\n      normal: orientation === 'vertical' ? 'space-y-4' : 'space-x-4',\n      loose: orientation === 'vertical' ? 'space-y-6' : 'space-x-6'\n    };\n\n    const orientationClasses = {\n      vertical: 'flex flex-col',\n      horizontal: 'flex flex-row items-center'\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          orientationClasses[orientation],\n          spacingClasses[spacing],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nLabelGroup.displayName = 'LabelGroup';\n\n// Floating Label Component - For input fields with floating labels\nexport interface FloatingLabelProps extends LabelProps {\n  readonly active?: boolean;\n  readonly focused?: boolean;\n  readonly hasValue?: boolean;\n}\n\nexport const FloatingLabel = React.forwardRef<HTMLLabelElement, FloatingLabelProps>(\n  ({ \n    className, \n    active = false,\n    focused = false,\n    hasValue = false,\n    size = 'md',\n    variant = 'default',\n    children,\n    ...props \n  }, ref) => {\n    const isFloating = active || focused || hasValue;\n\n    const floatingClasses = isFloating\n      ? 'transform -translate-y-3 scale-75 origin-top-left'\n      : 'transform translate-y-0 scale-100';\n\n    const sizeClasses = {\n      sm: isFloating ? 'text-xs' : 'text-sm',\n      md: isFloating ? 'text-xs' : 'text-base',\n      lg: isFloating ? 'text-sm' : 'text-lg',\n      xl: isFloating ? 'text-base' : 'text-xl'\n    };\n\n    return (\n      <Label\n        ref={ref}\n        className={cn(\n          'absolute left-3 transition-all duration-200 ease-in-out pointer-events-none',\n          floatingClasses,\n          sizeClasses[size],\n          focused && 'text-primary',\n          className\n        )}\n        size={size}\n        variant={variant}\n        {...props}\n      >\n        {children}\n      </Label>\n    );\n  }\n);\n\nFloatingLabel.displayName = 'FloatingLabel';\n\n// Label with Icon Component\nexport interface LabelWithIconProps extends LabelProps {\n  readonly icon?: React.ReactNode;\n  readonly iconPosition?: 'left' | 'right';\n}\n\nexport const LabelWithIcon = React.forwardRef<HTMLLabelElement, LabelWithIconProps>(\n  ({ \n    className, \n    icon,\n    iconPosition = 'left',\n    children,\n    ...props \n  }, ref) => {\n    return (\n      <Label\n        ref={ref}\n        className={cn('flex items-center gap-2', className)}\n        {...props}\n      >\n        {icon && iconPosition === 'left' && (\n          <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n            {icon}\n          </span>\n        )}\n        \n        <span className=\"flex-1\">\n          {children}\n        </span>\n        \n        {icon && iconPosition === 'right' && (\n          <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n            {icon}\n          </span>\n        )}\n      </Label>\n    );\n  }\n);\n\nLabelWithIcon.displayName = 'LabelWithIcon';\n\n// Field Label Component - Specifically for form fields with enhanced features\nexport interface FieldLabelProps extends LabelProps {\n  readonly fieldId: string;\n  readonly error?: string;\n  readonly description?: string;\n}\n\nexport const FieldLabel = React.forwardRef<HTMLLabelElement, FieldLabelProps>(\n  ({ \n    className, \n    fieldId,\n    error,\n    description,\n    variant,\n    helpText,\n    children,\n    ...props \n  }, ref) => {\n    const descriptionId = description ? `${fieldId}-description` : undefined;\n    const errorId = error ? `${fieldId}-error` : undefined;\n    \n    // Override variant based on error state\n    const finalVariant = error ? 'destructive' : variant;\n    const finalHelpText = error || helpText || description;\n\n    return (\n      <Label\n        ref={ref}\n        htmlFor={fieldId}\n        className={className}\n        variant={finalVariant}\n        helpText={finalHelpText}\n        {...props}\n      >\n        {children}\n      </Label>\n    );\n  }\n);\n\nFieldLabel.displayName = 'FieldLabel';\n\n// Label variants for convenience\nexport interface LabelTypeProps extends Omit<LabelProps, 'variant'> {}\n\nexport const LabelRequired = React.forwardRef<HTMLLabelElement, LabelTypeProps>(\n  (props, ref) => <Label ref={ref} variant=\"default\" required {...props} />\n);\nLabelRequired.displayName = 'LabelRequired';\n\nexport const LabelOptional = React.forwardRef<HTMLLabelElement, LabelTypeProps>(\n  (props, ref) => <Label ref={ref} variant=\"default\" optional {...props} />\n);\nLabelOptional.displayName = 'LabelOptional';\n\nexport const LabelError = React.forwardRef<HTMLLabelElement, LabelTypeProps>(\n  (props, ref) => <Label ref={ref} variant=\"destructive\" {...props} />\n);\nLabelError.displayName = 'LabelError';\n\nexport const LabelSuccess = React.forwardRef<HTMLLabelElement, LabelTypeProps>(\n  (props, ref) => <Label ref={ref} variant=\"success\" {...props} />\n);\nLabelSuccess.displayName = 'LabelSuccess';\n\nexport const LabelMuted = React.forwardRef<HTMLLabelElement, LabelTypeProps>(\n  (props, ref) => <Label ref={ref} variant=\"muted\" {...props} />\n);\nLabelMuted.displayName = 'LabelMuted';\n\n// Export variants and types\nexport { labelVariants, labelHelpTextVariants };\nexport type { VariantProps };"
    }
  ]
}