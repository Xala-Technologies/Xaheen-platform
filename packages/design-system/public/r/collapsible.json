{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "collapsible",
  "type": "registry:component",
  "title": "Collapsible",
  "description": "Expandable content area",
  "category": "components",
  "categories": [
    "components",
    "disclosure",
    "navigation"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-collapsible"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/collapsible/collapsible.tsx",
      "type": "registry:component",
      "content": "import React, { useState, useCallback, useRef, useEffect, createContext, useContext } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { tokens } from '../../core/universal-tokens';\n\nconst collapsibleVariants = cva(\n  'overflow-hidden transition-all duration-300 ease-in-out',\n  {\n    variants: {\n      variant: {\n        default: 'border border-gray-200 rounded-xl bg-white',\n        ghost: '',\n        outline: 'border border-gray-200 rounded-xl',\n        card: 'border border-gray-200 rounded-xl bg-white shadow-sm',\n      },\n      state: {\n        closed: '',\n        open: '',\n        collapsing: '',\n        expanding: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      state: 'closed',\n    },\n  }\n);\n\nconst triggerVariants = cva(\n  'flex items-center justify-between w-full text-left transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'p-4 hover:bg-gray-50',\n        ghost: 'py-2 hover:bg-gray-50 rounded-lg',\n        outline: 'p-4 hover:bg-gray-50',\n        card: 'p-4 hover:bg-gray-50',\n      },\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg',\n      },\n      disabled: {\n        true: 'cursor-not-allowed opacity-50',\n        false: 'cursor-pointer',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      disabled: false,\n    },\n  }\n);\n\nconst contentVariants = cva(\n  'overflow-hidden transition-all duration-300 ease-in-out',\n  {\n    variants: {\n      variant: {\n        default: 'border-t border-gray-200 px-4 pb-4',\n        ghost: 'px-0',\n        outline: 'border-t border-gray-200 px-4 pb-4',\n        card: 'border-t border-gray-200 px-4 pb-4',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\ninterface CollapsibleContextValue {\n  readonly open: boolean;\n  readonly disabled: boolean;\n  readonly onToggle: () => void;\n  readonly variant: 'default' | 'ghost' | 'outline' | 'card';\n}\n\nconst CollapsibleContext = createContext<CollapsibleContextValue | null>(null);\n\nexport const useCollapsible = (): CollapsibleContextValue => {\n  const context = useContext(CollapsibleContext);\n  if (!context) {\n    throw new Error('useCollapsible must be used within a Collapsible component');\n  }\n  return context;\n};\n\ninterface CollapsibleProps extends VariantProps<typeof collapsibleVariants> {\n  readonly children: React.ReactNode;\n  readonly open?: boolean;\n  readonly defaultOpen?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n  readonly disabled?: boolean;\n  readonly className?: string;\n  readonly animationDuration?: number;\n}\n\nexport const Collapsible = ({\n  children,\n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n  disabled = false,\n  variant,\n  className,\n  animationDuration = 300,\n}: CollapsibleProps): JSX.Element => {\n  const [uncontrolledOpen, setUncontrolledOpen] = useState(defaultOpen);\n  const isOpen = controlledOpen !== undefined ? controlledOpen : uncontrolledOpen;\n  const [state, setState] = useState<'closed' | 'open' | 'collapsing' | 'expanding'>(\n    isOpen ? 'open' : 'closed'\n  );\n\n  const handleOpenChange = useCallback((newOpen: boolean) => {\n    if (disabled) return;\n    \n    if (controlledOpen === undefined) {\n      setUncontrolledOpen(newOpen);\n    }\n    onOpenChange?.(newOpen);\n  }, [controlledOpen, onOpenChange, disabled]);\n\n  const handleToggle = useCallback(() => {\n    if (disabled) return;\n    \n    const newOpen = !isOpen;\n    setState(newOpen ? 'expanding' : 'collapsing');\n    handleOpenChange(newOpen);\n    \n    // Update state after animation completes\n    setTimeout(() => {\n      setState(newOpen ? 'open' : 'closed');\n    }, animationDuration);\n  }, [isOpen, handleOpenChange, disabled, animationDuration]);\n\n  useEffect(() => {\n    if (controlledOpen !== undefined) {\n      setState(controlledOpen ? (isOpen ? 'open' : 'expanding') : (isOpen ? 'open' : 'collapsing'));\n      \n      if (controlledOpen !== isOpen) {\n        setTimeout(() => {\n          setState(controlledOpen ? 'open' : 'closed');\n        }, animationDuration);\n      }\n    }\n  }, [controlledOpen, isOpen, animationDuration]);\n\n  const contextValue: CollapsibleContextValue = {\n    open: isOpen,\n    disabled,\n    onToggle: handleToggle,\n    variant: variant || 'default',\n  };\n\n  return (\n    <CollapsibleContext.Provider value={contextValue}>\n      <div \n        className={collapsibleVariants({ variant, state, className })}\n        style={{\n          '--animation-duration': `${animationDuration}ms`,\n        } as React.CSSProperties}\n      >\n        {children}\n      </div>\n    </CollapsibleContext.Provider>\n  );\n};\n\ninterface CollapsibleTriggerProps extends VariantProps<typeof triggerVariants> {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n  readonly asChild?: boolean;\n}\n\nexport const CollapsibleTrigger = ({\n  children,\n  className,\n  size,\n  asChild,\n}: CollapsibleTriggerProps): JSX.Element => {\n  const { open, disabled, onToggle, variant } = useCollapsible();\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      onClick: (e: React.MouseEvent) => {\n        children.props.onClick?.(e);\n        onToggle();\n      },\n      'aria-expanded': open,\n      'aria-disabled': disabled,\n      disabled,\n    });\n  }\n\n  return (\n    <button\n      onClick={onToggle}\n      disabled={disabled}\n      aria-expanded={open}\n      aria-disabled={disabled}\n      className={triggerVariants({ variant, size, disabled, className })}\n    >\n      <div className=\"flex-1 text-left\">\n        {children}\n      </div>\n      <ChevronIcon open={open} disabled={disabled} />\n    </button>\n  );\n};\n\ninterface CollapsibleContentProps extends VariantProps<typeof contentVariants> {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n  readonly forceMount?: boolean;\n}\n\nexport const CollapsibleContent = ({\n  children,\n  className,\n  forceMount = false,\n}: CollapsibleContentProps): JSX.Element => {\n  const { open, variant } = useCollapsible();\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState<number | 'auto'>(open ? 'auto' : 0);\n\n  useEffect(() => {\n    if (!contentRef.current) return;\n\n    if (open) {\n      const scrollHeight = contentRef.current.scrollHeight;\n      setHeight(scrollHeight);\n      \n      // Set to auto after animation completes\n      const timer = setTimeout(() => {\n        setHeight('auto');\n      }, 300);\n      \n      return () => clearTimeout(timer);\n    } else {\n      // Set explicit height first, then animate to 0\n      const scrollHeight = contentRef.current.scrollHeight;\n      setHeight(scrollHeight);\n      \n      requestAnimationFrame(() => {\n        setHeight(0);\n      });\n    }\n  }, [open]);\n\n  if (!open && !forceMount) {\n    return <></>;\n  }\n\n  return (\n    <div\n      ref={contentRef}\n      className={contentVariants({ variant, className })}\n      style={{\n        height: height === 'auto' ? 'auto' : `${height}px`,\n        opacity: open ? 1 : 0,\n      }}\n      aria-hidden={!open}\n    >\n      <div className=\"py-2\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\ninterface ChevronIconProps {\n  readonly open: boolean;\n  readonly disabled: boolean;\n  readonly className?: string;\n}\n\nconst ChevronIcon = ({ open, disabled, className }: ChevronIconProps): JSX.Element => {\n  return (\n    <svg\n      className={`h-5 w-5 transition-transform duration-200 ${\n        open ? 'rotate-180' : 'rotate-0'\n      } ${disabled ? 'opacity-50' : ''} ${className || ''}`}\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      aria-hidden=\"true\"\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 9l-7 7-7-7\" />\n    </svg>\n  );\n};\n\ninterface CollapsibleTitleProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n  readonly level?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const CollapsibleTitle = ({ \n  children, \n  className,\n  level = 3 \n}: CollapsibleTitleProps): JSX.Element => {\n  const Tag = `h${level}` as keyof JSX.IntrinsicElements;\n  \n  return (\n    <Tag className={`font-semibold text-gray-900 ${className || ''}`}>\n      {children}\n    </Tag>\n  );\n};\n\ninterface CollapsibleDescriptionProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n}\n\nexport const CollapsibleDescription = ({ \n  children, \n  className \n}: CollapsibleDescriptionProps): JSX.Element => {\n  return (\n    <p className={`text-sm text-gray-600 mt-1 ${className || ''}`}>\n      {children}\n    </p>\n  );\n};\n\n// Preset components for common use cases\ninterface CollapsibleItemProps {\n  readonly title: string;\n  readonly description?: string;\n  readonly children: React.ReactNode;\n  readonly open?: boolean;\n  readonly defaultOpen?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n  readonly disabled?: boolean;\n  readonly variant?: 'default' | 'ghost' | 'outline' | 'card';\n  readonly className?: string;\n}\n\nexport const CollapsibleItem = ({\n  title,\n  description,\n  children,\n  open,\n  defaultOpen,\n  onOpenChange,\n  disabled,\n  variant = 'default',\n  className,\n}: CollapsibleItemProps): JSX.Element => {\n  return (\n    <Collapsible\n      open={open}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}\n      disabled={disabled}\n      variant={variant}\n      className={className}\n    >\n      <CollapsibleTrigger>\n        <div>\n          <CollapsibleTitle>{title}</CollapsibleTitle>\n          {description && (\n            <CollapsibleDescription>{description}</CollapsibleDescription>\n          )}\n        </div>\n      </CollapsibleTrigger>\n      <CollapsibleContent>\n        {children}\n      </CollapsibleContent>\n    </Collapsible>\n  );\n};\n\ninterface CollapsibleGroupProps {\n  readonly children: React.ReactNode;\n  readonly type?: 'single' | 'multiple';\n  readonly value?: string | string[];\n  readonly defaultValue?: string | string[];\n  readonly onValueChange?: (value: string | string[]) => void;\n  readonly className?: string;\n  readonly collapsible?: boolean;\n}\n\nexport const CollapsibleGroup = ({\n  children,\n  type = 'single',\n  value: controlledValue,\n  defaultValue,\n  onValueChange,\n  className,\n  collapsible = true,\n}: CollapsibleGroupProps): JSX.Element => {\n  const [uncontrolledValue, setUncontrolledValue] = useState(\n    defaultValue || (type === 'single' ? '' : [])\n  );\n  \n  const value = controlledValue !== undefined ? controlledValue : uncontrolledValue;\n\n  const handleValueChange = useCallback((newValue: string | string[]) => {\n    if (controlledValue === undefined) {\n      setUncontrolledValue(newValue);\n    }\n    onValueChange?.(newValue);\n  }, [controlledValue, onValueChange]);\n\n  const handleItemOpenChange = useCallback((itemValue: string, open: boolean) => {\n    if (type === 'single') {\n      const currentValue = value as string;\n      if (open) {\n        handleValueChange(itemValue);\n      } else if (currentValue === itemValue && collapsible) {\n        handleValueChange('');\n      }\n    } else {\n      const currentValue = value as string[];\n      if (open) {\n        if (!currentValue.includes(itemValue)) {\n          handleValueChange([...currentValue, itemValue]);\n        }\n      } else {\n        handleValueChange(currentValue.filter(v => v !== itemValue));\n      }\n    }\n  }, [type, value, collapsible, handleValueChange]);\n\n  return (\n    <div className={`space-y-2 ${className || ''}`}>\n      {React.Children.map(children, (child, index) => {\n        if (React.isValidElement(child)) {\n          const itemValue = child.props.value || index.toString();\n          const isOpen = type === 'single' \n            ? value === itemValue \n            : (value as string[]).includes(itemValue);\n\n          return React.cloneElement(child, {\n            open: isOpen,\n            onOpenChange: (open: boolean) => handleItemOpenChange(itemValue, open),\n          });\n        }\n        return child;\n      })}\n    </div>\n  );\n};"
    }
  ]
}