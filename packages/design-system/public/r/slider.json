{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "slider",
  "type": "registry:component",
  "title": "Slider",
  "description": "Range input with keyboard support",
  "category": "components",
  "categories": [
    "components",
    "form",
    "input"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-slider"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/slider/slider.tsx",
      "type": "registry:component",
      "content": "/**\n * Slider Component - Professional range input control\n * CLAUDE.md Compliant: Professional sizing with h-12+ touch targets\n * WCAG AAA: Full keyboard support, screen reader compatibility, and proper labeling\n * Universal tokens integration for consistent theming\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst sliderRootVariants = cva(\n  [\n    'relative flex w-full touch-none select-none items-center',\n    'cursor-pointer',\n    'disabled:cursor-not-allowed disabled:opacity-50'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'h-10',     // 40px (still professional)\n        md: 'h-12',     // 48px (CLAUDE.md compliant)\n        lg: 'h-14',     // 56px (premium)\n        xl: 'h-16'      // 64px (luxury)\n      },\n      orientation: {\n        horizontal: 'w-full',\n        vertical: 'h-full flex-col'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      orientation: 'horizontal'\n    }\n  }\n);\n\nconst sliderTrackVariants = cva(\n  [\n    'relative grow overflow-hidden rounded-full bg-secondary/20',\n    'transition-colors duration-200'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'h-2',      // 8px\n        md: 'h-3',      // 12px\n        lg: 'h-4',      // 16px\n        xl: 'h-5'       // 20px\n      },\n      orientation: {\n        horizontal: 'w-full',\n        vertical: 'h-full w-full'\n      },\n      variant: {\n        default: 'bg-secondary/20',\n        success: 'bg-green-100',\n        warning: 'bg-yellow-100',\n        destructive: 'bg-red-100',\n        // NSM Security Classification variants\n        nsmOpen: 'bg-green-100 border-l-2 border-l-green-600',\n        nsmRestricted: 'bg-yellow-100 border-l-2 border-l-yellow-600',\n        nsmConfidential: 'bg-red-100 border-l-2 border-l-red-600',\n        nsmSecret: 'bg-gray-100 border-l-2 border-l-gray-800'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      orientation: 'horizontal',\n      variant: 'default'\n    }\n  }\n);\n\nconst sliderRangeVariants = cva(\n  [\n    'absolute h-full rounded-full transition-all duration-200',\n    'data-[disabled]:opacity-50'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary',\n        success: 'bg-green-600',\n        warning: 'bg-yellow-600',\n        destructive: 'bg-red-600',\n        nsmOpen: 'bg-green-600',\n        nsmRestricted: 'bg-yellow-600',\n        nsmConfidential: 'bg-red-600',\n        nsmSecret: 'bg-gray-800'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst sliderThumbVariants = cva(\n  [\n    'block rounded-full border-2 border-primary bg-background ring-offset-background',\n    'transition-all duration-200 ease-in-out',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'focus-visible:ring-primary/20',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'hover:scale-105 active:scale-95',\n    'shadow-md hover:shadow-lg'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'h-5 w-5',      // 20px\n        md: 'h-6 w-6',      // 24px\n        lg: 'h-7 w-7',      // 28px\n        xl: 'h-8 w-8'       // 32px\n      },\n      variant: {\n        default: 'border-primary',\n        success: 'border-green-600',\n        warning: 'border-yellow-600',\n        destructive: 'border-red-600',\n        nsmOpen: 'border-green-600',\n        nsmRestricted: 'border-yellow-600',\n        nsmConfidential: 'border-red-600',\n        nsmSecret: 'border-gray-800'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      variant: 'default'\n    }\n  }\n);\n\nexport interface SliderProps extends \n  Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange'>,\n  VariantProps<typeof sliderRootVariants> {\n  readonly value?: number[];\n  readonly defaultValue?: number[];\n  readonly onValueChange?: (value: number[]) => void;\n  readonly min?: number;\n  readonly max?: number;\n  readonly step?: number;\n  readonly disabled?: boolean;\n  readonly name?: string;\n  readonly form?: string;\n  readonly required?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly showValue?: boolean;\n  readonly formatValue?: (value: number) => string;\n  readonly helperText?: string;\n  readonly variant?: 'default' | 'success' | 'warning' | 'destructive';\n}\n\nexport const Slider = React.forwardRef<HTMLDivElement, SliderProps>(\n  ({\n    className,\n    size,\n    orientation = 'horizontal',\n    variant = 'default',\n    value,\n    defaultValue = [0],\n    onValueChange,\n    min = 0,\n    max = 100,\n    step = 1,\n    disabled = false,\n    name,\n    form,\n    required,\n    nsmClassification,\n    showValue = false,\n    formatValue,\n    helperText,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    ...props\n  }, ref) => {\n    const [internalValue, setInternalValue] = React.useState(defaultValue);\n    const isControlled = value !== undefined;\n    const currentValue = isControlled ? value : internalValue;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n    \n    // Generate unique IDs\n    const sliderId = React.useId();\n    const helperTextId = helperText ? `${sliderId}-helper` : undefined;\n    const combinedAriaDescribedBy = [ariaDescribedBy, helperTextId]\n      .filter(Boolean)\n      .join(' ') || undefined;\n\n    const handleValueChange = React.useCallback((newValue: number[]) => {\n      if (disabled) return;\n      \n      try {\n        if (!isControlled) {\n          setInternalValue(newValue);\n        }\n        onValueChange?.(newValue);\n      } catch (error) {\n        console.error('Slider value change error:', error);\n      }\n    }, [disabled, isControlled, onValueChange]);\n\n    const handleMouseDown = React.useCallback((event: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) return;\n      \n      const rect = event.currentTarget.getBoundingClientRect();\n      const percentage = orientation === 'horizontal' \n        ? (event.clientX - rect.left) / rect.width\n        : 1 - (event.clientY - rect.top) / rect.height;\n      \n      const newValue = Math.round((min + percentage * (max - min)) / step) * step;\n      const clampedValue = Math.max(min, Math.min(max, newValue));\n      \n      handleValueChange([clampedValue]);\n    }, [disabled, orientation, min, max, step, handleValueChange]);\n\n    const handleKeyDown = React.useCallback((event: React.KeyboardEvent) => {\n      if (disabled) return;\n      \n      const currentVal = currentValue[0] || min;\n      let newValue = currentVal;\n      \n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowUp':\n          event.preventDefault();\n          newValue = Math.min(max, currentVal + step);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowDown':\n          event.preventDefault();\n          newValue = Math.max(min, currentVal - step);\n          break;\n        case 'Home':\n          event.preventDefault();\n          newValue = min;\n          break;\n        case 'End':\n          event.preventDefault();\n          newValue = max;\n          break;\n        case 'PageUp':\n          event.preventDefault();\n          newValue = Math.min(max, currentVal + step * 10);\n          break;\n        case 'PageDown':\n          event.preventDefault();\n          newValue = Math.max(min, currentVal - step * 10);\n          break;\n        default:\n          return;\n      }\n      \n      handleValueChange([newValue]);\n    }, [disabled, currentValue, min, max, step, handleValueChange]);\n\n    const percentage = ((currentValue[0] || min) - min) / (max - min) * 100;\n\n    const sliderElement = (\n      <div className=\"space-y-2\">\n        {showValue && (\n          <div className=\"flex justify-between text-sm text-muted-foreground\">\n            <span>{formatValue ? formatValue(min) : min}</span>\n            <span className=\"font-medium text-foreground\">\n              {formatValue ? formatValue(currentValue[0] || min) : (currentValue[0] || min)}\n            </span>\n            <span>{formatValue ? formatValue(max) : max}</span>\n          </div>\n        )}\n        \n        <div\n          ref={ref}\n          className={cn(sliderRootVariants({ size, orientation }), className)}\n          role=\"slider\"\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={combinedAriaDescribedBy}\n          aria-valuenow={currentValue[0] || min}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          aria-required={required}\n          aria-disabled={disabled}\n          data-disabled={disabled ? '' : undefined}\n          tabIndex={disabled ? -1 : 0}\n          onMouseDown={handleMouseDown}\n          onKeyDown={handleKeyDown}\n          {...props}\n        >\n          {/* Track */}\n          <div \n            className={cn(sliderTrackVariants({ \n              size, \n              orientation, \n              variant: finalVariant \n            }))}\n          >\n            {/* Range */}\n            <div\n              className={cn(sliderRangeVariants({ variant: finalVariant }))}\n              style={{\n                [orientation === 'horizontal' ? 'width' : 'height']: `${percentage}%`\n              }}\n              data-disabled={disabled ? '' : undefined}\n            />\n          </div>\n          \n          {/* Thumb */}\n          <div\n            className={cn(sliderThumbVariants({ size, variant: finalVariant }))}\n            style={{\n              [orientation === 'horizontal' ? 'left' : 'bottom']: `${percentage}%`,\n              transform: orientation === 'horizontal' \n                ? 'translateX(-50%)' \n                : 'translateY(50%)'\n            }}\n            aria-hidden=\"true\"\n          />\n          \n          {/* Hidden input for form integration */}\n          <input\n            type=\"range\"\n            name={name}\n            form={form}\n            value={currentValue[0] || min}\n            min={min}\n            max={max}\n            step={step}\n            required={required}\n            disabled={disabled}\n            onChange={() => {}} // Controlled by slider\n            className=\"sr-only\"\n            tabIndex={-1}\n            aria-hidden=\"true\"\n          />\n        </div>\n        \n        {/* Helper Text */}\n        {helperText && (\n          <p \n            id={helperTextId}\n            className=\"text-sm text-muted-foreground\"\n          >\n            {helperText}\n          </p>\n        )}\n        \n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM Classification: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n\n    return sliderElement;\n  }\n);\n\nSlider.displayName = 'Slider';\n\n// Export types and variants\nexport { sliderRootVariants, sliderTrackVariants, sliderRangeVariants, sliderThumbVariants };\nexport type { VariantProps };"
    }
  ]
}