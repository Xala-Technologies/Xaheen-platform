{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "avatar",
  "type": "registry:component",
  "title": "Avatar",
  "description": "User profile image with fallback initials",
  "category": "components",
  "categories": [
    "components",
    "display",
    "media"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-avatar"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/avatar/avatar.tsx",
      "type": "registry:component",
      "content": "/**\n * Avatar Component - User Profile Images with Fallbacks\n * CLAUDE.md Compliant: Professional sizing and spacing\n * WCAG AAA: Proper alt text, fallbacks, and accessibility support\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { UserIcon } from '@heroicons/react/24/outline';\nimport { cn, getInitials } from '../../lib/utils';\n\nconst avatarVariants = cva(\n  [\n    'relative flex shrink-0 overflow-hidden',\n    'bg-muted border border-border',\n    'transition-all duration-200 ease-in-out'\n  ],\n  {\n    variants: {\n      size: {\n        xs: 'h-6 w-6 text-xs',\n        sm: 'h-8 w-8 text-sm',\n        md: 'h-12 w-12 text-base',    // Professional minimum size\n        lg: 'h-14 w-14 text-lg',      // CLAUDE.md compliant\n        xl: 'h-16 w-16 text-xl',      // Premium size\n        '2xl': 'h-20 w-20 text-2xl',  // Extra large\n        '3xl': 'h-24 w-24 text-3xl',  // Hero size\n        '4xl': 'h-32 w-32 text-4xl'   // Massive size\n      },\n      shape: {\n        circle: 'rounded-full',\n        square: 'rounded-lg',\n        rounded: 'rounded-xl'\n      },\n      variant: {\n        default: 'hover:shadow-md',\n        elevated: 'shadow-md hover:shadow-lg',\n        outline: 'border-2 border-primary',\n        ghost: 'border-transparent',\n        // NSM Security Classification variants\n        nsmOpen: 'border-2 border-green-600 shadow-sm',\n        nsmRestricted: 'border-2 border-yellow-600 shadow-sm',\n        nsmConfidential: 'border-2 border-red-600 shadow-sm',\n        nsmSecret: 'border-2 border-gray-800 shadow-sm'\n      },\n      status: {\n        none: '',\n        online: 'ring-2 ring-green-500',\n        offline: 'ring-2 ring-gray-400',\n        away: 'ring-2 ring-yellow-500',\n        busy: 'ring-2 ring-red-500'\n      }\n    },\n    defaultVariants: {\n      size: 'lg',\n      shape: 'circle',\n      variant: 'default',\n      status: 'none'\n    }\n  }\n);\n\nconst avatarImageVariants = cva(\n  [\n    'aspect-square h-full w-full object-cover',\n    'transition-opacity duration-200'\n  ]\n);\n\nconst avatarFallbackVariants = cva(\n  [\n    'flex h-full w-full items-center justify-center',\n    'bg-muted font-medium text-muted-foreground',\n    'transition-colors duration-200'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary/10 text-primary',\n        colored: 'bg-gradient-to-br from-blue-500 to-purple-600 text-white',\n        muted: 'bg-muted text-muted-foreground',\n        // NSM variants for fallbacks\n        nsmOpen: 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300',\n        nsmRestricted: 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-300',\n        nsmConfidential: 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300',\n        nsmSecret: 'bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-300'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\n// Types\nexport interface AvatarProps extends \n  React.HTMLAttributes<HTMLSpanElement>,\n  VariantProps<typeof avatarVariants> {\n  readonly src?: string;\n  readonly alt?: string;\n  readonly name?: string;\n  readonly loading?: boolean;\n  readonly onLoadingStatusChange?: (loading: boolean) => void;\n  readonly fallback?: React.ReactNode;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly showStatusIndicator?: boolean;\n}\n\nexport interface AvatarImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  readonly onLoadingStatusChange?: (loading: boolean) => void;\n}\n\nexport interface AvatarFallbackProps extends \n  React.HTMLAttributes<HTMLSpanElement>,\n  VariantProps<typeof avatarFallbackVariants> {\n  readonly delayMs?: number;\n}\n\n// Context for managing avatar state\ninterface AvatarContextType {\n  imageLoadingStatus: 'idle' | 'loading' | 'loaded' | 'error';\n  onImageLoadingStatusChange: (status: 'idle' | 'loading' | 'loaded' | 'error') => void;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';\n  nsmVariant?: 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret';\n}\n\nconst AvatarContext = React.createContext<AvatarContextType | null>(null);\n\nfunction useAvatarContext(): AvatarContextType {\n  const context = React.useContext(AvatarContext);\n  if (!context) {\n    throw new Error('Avatar components must be used within an Avatar');\n  }\n  return context;\n}\n\n// Main Avatar Component\nexport const Avatar = React.forwardRef<HTMLSpanElement, AvatarProps>(\n  ({ \n    className, \n    size = 'lg', \n    shape = 'circle',\n    variant = 'default',\n    status = 'none',\n    src,\n    alt,\n    name,\n    loading = false,\n    onLoadingStatusChange,\n    fallback,\n    nsmClassification,\n    showStatusIndicator = false,\n    children,\n    ...props \n  }, ref) => {\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState<'idle' | 'loading' | 'loaded' | 'error'>('idle');\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    const handleImageLoadingStatusChange = React.useCallback((status: 'idle' | 'loading' | 'loaded' | 'error') => {\n      setImageLoadingStatus(status);\n      onLoadingStatusChange?.(status === 'loading');\n    }, [onLoadingStatusChange]);\n\n    const contextValue: AvatarContextType = {\n      imageLoadingStatus,\n      onImageLoadingStatusChange: handleImageLoadingStatusChange,\n      size,\n      nsmVariant: nsmClassification ? finalVariant as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret' : undefined\n    };\n\n    // Status indicator position classes based on size\n    const getStatusIndicatorClasses = () => {\n      const sizeMap = {\n        xs: 'h-2 w-2 -bottom-0.5 -right-0.5',\n        sm: 'h-2.5 w-2.5 -bottom-0.5 -right-0.5',\n        md: 'h-3 w-3 -bottom-1 -right-1',\n        lg: 'h-3.5 w-3.5 -bottom-1 -right-1',\n        xl: 'h-4 w-4 -bottom-1 -right-1',\n        '2xl': 'h-5 w-5 -bottom-1.5 -right-1.5',\n        '3xl': 'h-6 w-6 -bottom-2 -right-2',\n        '4xl': 'h-8 w-8 -bottom-2 -right-2'\n      };\n      return sizeMap[size];\n    };\n\n    const statusColors = {\n      online: 'bg-green-500',\n      offline: 'bg-gray-400',\n      away: 'bg-yellow-500',\n      busy: 'bg-red-500',\n      none: ''\n    };\n\n    return (\n      <AvatarContext.Provider value={contextValue}>\n        <span\n          ref={ref}\n          className={cn(\n            avatarVariants({ size, shape, variant: finalVariant, status: showStatusIndicator ? status : 'none' }),\n            loading && 'animate-pulse',\n            className\n          )}\n          data-state={imageLoadingStatus}\n          {...props}\n        >\n          {/* Image or Children */}\n          {src ? (\n            <AvatarImage src={src} alt={alt || name || 'Avatar'} />\n          ) : (\n            children\n          )}\n          \n          {/* Fallback - only shown when image fails or no src */}\n          {(!src || imageLoadingStatus === 'error') && (\n            <AvatarFallback>\n              {fallback || (name ? getInitials(name) : <UserIcon className=\"h-1/2 w-1/2\" />)}\n            </AvatarFallback>\n          )}\n\n          {/* Status Indicator */}\n          {showStatusIndicator && status !== 'none' && (\n            <span \n              className={cn(\n                'absolute rounded-full border-2 border-background',\n                getStatusIndicatorClasses(),\n                statusColors[status]\n              )}\n              aria-label={`Status: ${status}`}\n            />\n          )}\n\n          {/* Loading Indicator */}\n          {loading && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-background/80\">\n              <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\n            </div>\n          )}\n\n          {/* NSM Classification for screen readers */}\n          {nsmClassification && (\n            <span className=\"sr-only\">\n              NSM-klassifisering: {nsmClassification}\n            </span>\n          )}\n        </span>\n      </AvatarContext.Provider>\n    );\n  }\n);\n\nAvatar.displayName = 'Avatar';\n\n// Avatar Image Component\nexport const AvatarImage = React.forwardRef<HTMLImageElement, AvatarImageProps>(\n  ({ \n    className, \n    onLoadingStatusChange,\n    onLoad, \n    onError,\n    ...props \n  }, ref) => {\n    const { onImageLoadingStatusChange } = useAvatarContext();\n\n    React.useEffect(() => {\n      onImageLoadingStatusChange('loading');\n    }, [onImageLoadingStatusChange]);\n\n    const handleLoad = React.useCallback((event: React.SyntheticEvent<HTMLImageElement, Event>) => {\n      onImageLoadingStatusChange('loaded');\n      onLoadingStatusChange?.(false);\n      onLoad?.(event);\n    }, [onImageLoadingStatusChange, onLoadingStatusChange, onLoad]);\n\n    const handleError = React.useCallback((event: React.SyntheticEvent<HTMLImageElement, Event>) => {\n      onImageLoadingStatusChange('error');\n      onLoadingStatusChange?.(false);\n      onError?.(event);\n    }, [onImageLoadingStatusChange, onLoadingStatusChange, onError]);\n\n    return (\n      <img\n        ref={ref}\n        className={cn(avatarImageVariants(), className)}\n        onLoad={handleLoad}\n        onError={handleError}\n        {...props}\n      />\n    );\n  }\n);\n\nAvatarImage.displayName = 'AvatarImage';\n\n// Avatar Fallback Component\nexport const AvatarFallback = React.forwardRef<HTMLSpanElement, AvatarFallbackProps>(\n  ({ \n    className, \n    variant = 'default',\n    delayMs = 0,\n    children,\n    ...props \n  }, ref) => {\n    const { imageLoadingStatus, nsmVariant } = useAvatarContext();\n    const [canRender, setCanRender] = React.useState(delayMs === 0);\n\n    React.useEffect(() => {\n      if (delayMs > 0) {\n        const timer = setTimeout(() => setCanRender(true), delayMs);\n        return () => clearTimeout(timer);\n      }\n    }, [delayMs]);\n\n    // Use NSM variant if available, otherwise use provided variant\n    const finalVariant = nsmVariant || variant;\n\n    if (!canRender) {\n      return null;\n    }\n\n    return (\n      <span\n        ref={ref}\n        className={cn(avatarFallbackVariants({ variant: finalVariant }), className)}\n        {...props}\n      >\n        {children}\n      </span>\n    );\n  }\n);\n\nAvatarFallback.displayName = 'AvatarFallback';\n\n// Avatar Group Component for multiple avatars\nexport interface AvatarGroupProps extends React.HTMLAttributes<HTMLDivElement> {\n  readonly max?: number;\n  readonly spacing?: 'tight' | 'normal' | 'loose';\n  readonly size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';\n}\n\nexport const AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\n  ({ \n    className, \n    max = 5, \n    spacing = 'normal',\n    size = 'lg',\n    children,\n    ...props \n  }, ref) => {\n    const childArray = React.Children.toArray(children);\n    const visibleChildren = max ? childArray.slice(0, max) : childArray;\n    const hiddenCount = max ? Math.max(0, childArray.length - max) : 0;\n\n    const spacingClasses = {\n      tight: '-space-x-2',\n      normal: '-space-x-3',\n      loose: '-space-x-1'\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'flex items-center',\n          spacingClasses[spacing],\n          className\n        )}\n        {...props}\n      >\n        {visibleChildren.map((child, index) => (\n          <div key={index} className=\"ring-2 ring-background\">\n            {React.isValidElement(child) \n              ? React.cloneElement(child, { size } as any)\n              : child\n            }\n          </div>\n        ))}\n        \n        {hiddenCount > 0 && (\n          <Avatar size={size} variant=\"muted\">\n            <AvatarFallback variant=\"muted\">\n              +{hiddenCount}\n            </AvatarFallback>\n          </Avatar>\n        )}\n      </div>\n    );\n  }\n);\n\nAvatarGroup.displayName = 'AvatarGroup';\n\n// Export variants and types\nexport { avatarVariants, avatarImageVariants, avatarFallbackVariants };\nexport type { VariantProps };"
    }
  ]
}