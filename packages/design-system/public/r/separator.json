{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "separator",
  "type": "registry:component",
  "title": "Separator",
  "description": "Visual content dividers",
  "category": "components",
  "categories": [
    "components",
    "layout"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-separator"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/separator/separator.tsx",
      "type": "registry:component",
      "content": "/**\n * Separator Component - Professional Visual Content Dividers\n * CLAUDE.md Compliant: Professional styling and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// SEPARATOR VARIANTS\n// =============================================================================\n\nconst separatorVariants = cva(\n  [\n    'shrink-0',\n    'transition-colors duration-200'\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: 'h-px w-full',\n        vertical: 'w-px h-full'\n      },\n      variant: {\n        default: 'bg-border',\n        solid: 'bg-border',\n        dashed: 'border-dashed bg-transparent',\n        dotted: 'border-dotted bg-transparent',\n        gradient: 'bg-gradient-to-r from-transparent via-border to-transparent',\n        primary: 'bg-primary/20',\n        secondary: 'bg-secondary',\n        muted: 'bg-muted',\n        accent: 'bg-accent'\n      },\n      size: {\n        xs: '',\n        sm: '',\n        md: '',\n        lg: '',\n        xl: ''\n      },\n      spacing: {\n        none: '',\n        xs: 'my-1',\n        sm: 'my-2', \n        md: 'my-4',\n        lg: 'my-6',\n        xl: 'my-8'\n      },\n      decorative: {\n        true: '',\n        false: ''\n      }\n    },\n    compoundVariants: [\n      // Horizontal size variants\n      {\n        orientation: 'horizontal',\n        size: 'xs',\n        className: 'h-px'\n      },\n      {\n        orientation: 'horizontal', \n        size: 'sm',\n        className: 'h-px'\n      },\n      {\n        orientation: 'horizontal',\n        size: 'md', \n        className: 'h-0.5'\n      },\n      {\n        orientation: 'horizontal',\n        size: 'lg',\n        className: 'h-1'\n      },\n      {\n        orientation: 'horizontal',\n        size: 'xl',\n        className: 'h-2'\n      },\n      // Vertical size variants\n      {\n        orientation: 'vertical',\n        size: 'xs',\n        className: 'w-px'\n      },\n      {\n        orientation: 'vertical',\n        size: 'sm', \n        className: 'w-px'\n      },\n      {\n        orientation: 'vertical',\n        size: 'md',\n        className: 'w-0.5'\n      },\n      {\n        orientation: 'vertical',\n        size: 'lg',\n        className: 'w-1'\n      },\n      {\n        orientation: 'vertical',\n        size: 'xl',\n        className: 'w-2'\n      },\n      // Dashed/dotted variants need border instead of background\n      {\n        variant: 'dashed',\n        orientation: 'horizontal',\n        className: 'border-t border-dashed border-border bg-transparent'\n      },\n      {\n        variant: 'dashed',\n        orientation: 'vertical',\n        className: 'border-l border-dashed border-border bg-transparent'\n      },\n      {\n        variant: 'dotted',\n        orientation: 'horizontal', \n        className: 'border-t border-dotted border-border bg-transparent'\n      },\n      {\n        variant: 'dotted',\n        orientation: 'vertical',\n        className: 'border-l border-dotted border-border bg-transparent'\n      },\n      // Vertical spacing adjustments\n      {\n        orientation: 'vertical',\n        spacing: 'xs',\n        className: 'mx-1 my-0'\n      },\n      {\n        orientation: 'vertical',\n        spacing: 'sm',\n        className: 'mx-2 my-0'\n      },\n      {\n        orientation: 'vertical',\n        spacing: 'md',\n        className: 'mx-4 my-0'\n      },\n      {\n        orientation: 'vertical',\n        spacing: 'lg',\n        className: 'mx-6 my-0'\n      },\n      {\n        orientation: 'vertical',\n        spacing: 'xl',\n        className: 'mx-8 my-0'\n      }\n    ],\n    defaultVariants: {\n      orientation: 'horizontal',\n      variant: 'default',\n      size: 'sm',\n      spacing: 'none',\n      decorative: true\n    }\n  }\n);\n\nconst separatorLabelVariants = cva([\n  'flex items-center',\n  'text-sm text-muted-foreground',\n  'whitespace-nowrap'\n]);\n\nconst separatorContentVariants = cva([\n  'relative flex items-center justify-center'\n]);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface SeparatorProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof separatorVariants> {\n  readonly ariaLabel?: string;\n  readonly ariaOrientation?: 'horizontal' | 'vertical';\n}\n\nexport interface SeparatorWithLabelProps extends \n  Omit<SeparatorProps, 'children'> {\n  readonly label: string;\n  readonly labelPosition?: 'left' | 'center' | 'right';\n  readonly icon?: React.ReactNode;\n}\n\nexport interface SeparatorWithIconProps extends \n  Omit<SeparatorProps, 'children'> {\n  readonly icon: React.ReactNode;\n  readonly iconPosition?: 'left' | 'center' | 'right';\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\nconst getDefaultAriaLabel = (\n  orientation: 'horizontal' | 'vertical' = 'horizontal',\n  decorative: boolean = true\n): string | undefined => {\n  if (decorative) return undefined;\n  return orientation === 'horizontal' ? 'Horizontal separator' : 'Vertical separator';\n};\n\n// =============================================================================\n// SEPARATOR COMPONENTS\n// =============================================================================\n\nexport const Separator = React.forwardRef<HTMLDivElement, SeparatorProps>(({\n  className,\n  orientation = 'horizontal',\n  variant,\n  size,\n  spacing,\n  decorative = true,\n  ariaLabel,\n  ariaOrientation,\n  role,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn(separatorVariants({ orientation, variant, size, spacing, decorative }), className)}\n    role={decorative ? 'presentation' : role || 'separator'}\n    aria-label={decorative ? undefined : (ariaLabel || getDefaultAriaLabel(orientation, decorative))}\n    aria-orientation={decorative ? undefined : (ariaOrientation || orientation)}\n    data-orientation={orientation}\n    {...props}\n  />\n));\n\nexport const SeparatorWithLabel = React.forwardRef<HTMLDivElement, SeparatorWithLabelProps>(({\n  className,\n  orientation = 'horizontal',\n  variant = 'default',\n  size = 'sm',\n  spacing,\n  label,\n  labelPosition = 'center',\n  icon,\n  ariaLabel,\n  decorative = false,\n  ...props\n}, ref) => {\n  if (orientation === 'vertical') {\n    // Vertical separator with label is complex, fallback to basic separator\n    return (\n      <div className=\"flex flex-col items-center\">\n        <Separator \n          ref={ref}\n          orientation=\"horizontal\" \n          variant={variant}\n          size={size}\n          className={cn('w-px h-4', className)}\n          decorative={decorative}\n          ariaLabel={ariaLabel}\n          {...props}\n        />\n        <span className={cn(separatorLabelVariants(), 'py-2 writing-mode-vertical')}>\n          {icon && <span className=\"mb-2\" aria-hidden=\"true\">{icon}</span>}\n          {label}\n        </span>\n        <Separator \n          orientation=\"horizontal\" \n          variant={variant}\n          size={size}\n          className=\"w-px h-4\"\n          decorative\n        />\n      </div>\n    );\n  }\n\n  const labelContent = (\n    <span className={separatorLabelVariants()}>\n      {icon && labelPosition !== 'right' && (\n        <span className=\"mr-2\" aria-hidden=\"true\">{icon}</span>\n      )}\n      {label}\n      {icon && labelPosition === 'right' && (\n        <span className=\"ml-2\" aria-hidden=\"true\">{icon}</span>\n      )}\n    </span>\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'relative flex items-center',\n        spacing === 'xs' && 'my-1',\n        spacing === 'sm' && 'my-2',\n        spacing === 'md' && 'my-4',\n        spacing === 'lg' && 'my-6',\n        spacing === 'xl' && 'my-8',\n        className\n      )}\n      role={decorative ? 'presentation' : 'separator'}\n      aria-label={decorative ? undefined : (ariaLabel || `Separator with label: ${label}`)}\n      data-orientation={orientation}\n      {...props}\n    >\n      {labelPosition === 'left' && (\n        <>\n          {labelContent}\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1 ml-4\"\n            decorative\n          />\n        </>\n      )}\n      \n      {labelPosition === 'center' && (\n        <>\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1\"\n            decorative\n          />\n          <div className=\"px-4\">\n            {labelContent}\n          </div>\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1\"\n            decorative\n          />\n        </>\n      )}\n      \n      {labelPosition === 'right' && (\n        <>\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1 mr-4\"\n            decorative\n          />\n          {labelContent}\n        </>\n      )}\n    </div>\n  );\n});\n\nexport const SeparatorWithIcon = React.forwardRef<HTMLDivElement, SeparatorWithIconProps>(({\n  className,\n  orientation = 'horizontal',\n  variant = 'default',\n  size = 'sm',\n  spacing,\n  icon,\n  iconPosition = 'center',\n  ariaLabel,\n  decorative = true,\n  ...props\n}, ref) => {\n  if (orientation === 'vertical') {\n    return (\n      <div className=\"flex flex-col items-center\">\n        <Separator \n          ref={ref}\n          orientation=\"horizontal\" \n          variant={variant}\n          size={size}\n          className={cn('w-px h-4', className)}\n          decorative={decorative}\n          ariaLabel={ariaLabel}\n          {...props}\n        />\n        <div className=\"py-2 text-muted-foreground\" aria-hidden={decorative}>\n          {icon}\n        </div>\n        <Separator \n          orientation=\"horizontal\" \n          variant={variant}\n          size={size}\n          className=\"w-px h-4\"\n          decorative\n        />\n      </div>\n    );\n  }\n\n  const iconContent = (\n    <div className=\"text-muted-foreground\" aria-hidden={decorative}>\n      {icon}\n    </div>\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'relative flex items-center',\n        spacing === 'xs' && 'my-1',\n        spacing === 'sm' && 'my-2', \n        spacing === 'md' && 'my-4',\n        spacing === 'lg' && 'my-6',\n        spacing === 'xl' && 'my-8',\n        className\n      )}\n      role={decorative ? 'presentation' : 'separator'}\n      aria-label={decorative ? undefined : (ariaLabel || 'Separator with icon')}\n      data-orientation={orientation}\n      {...props}\n    >\n      {iconPosition === 'left' && (\n        <>\n          {iconContent}\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1 ml-4\"\n            decorative\n          />\n        </>\n      )}\n      \n      {iconPosition === 'center' && (\n        <>\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1\"\n            decorative\n          />\n          <div className=\"px-4\">\n            {iconContent}\n          </div>\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1\"\n            decorative\n          />\n        </>\n      )}\n      \n      {iconPosition === 'right' && (\n        <>\n          <Separator\n            variant={variant}\n            size={size}\n            className=\"flex-1 mr-4\"\n            decorative\n          />\n          {iconContent}\n        </>\n      )}\n    </div>\n  );\n});\n\n// =============================================================================\n// SPECIALIZED SEPARATOR COMPONENTS\n// =============================================================================\n\n// Section separator with enhanced styling\nexport const SectionSeparator = React.forwardRef<HTMLDivElement, SeparatorProps>(({\n  className,\n  spacing = 'lg',\n  variant = 'gradient',\n  ...props\n}, ref) => (\n  <Separator\n    ref={ref}\n    variant={variant}\n    spacing={spacing}\n    className={cn('mx-auto max-w-xs', className)}\n    decorative\n    {...props}\n  />\n));\n\n// Breadcrumb separator for navigation\nexport const BreadcrumbSeparator = React.forwardRef<HTMLDivElement, Omit<SeparatorProps, 'orientation' | 'decorative'>>(({\n  className,\n  variant = 'muted',\n  size = 'xs',\n  children,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'flex items-center justify-center',\n      'text-muted-foreground',\n      'px-1',\n      className\n    )}\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    {...props}\n  >\n    {children || (\n      <svg \n        className=\"w-4 h-4\" \n        viewBox=\"0 0 24 24\" \n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n      </svg>\n    )}\n  </div>\n));\n\n// Menu separator for dropdown menus\nexport const MenuSeparator = React.forwardRef<HTMLDivElement, Omit<SeparatorProps, 'orientation' | 'spacing'>>(({\n  className,\n  variant = 'default',\n  size = 'xs',\n  ...props\n}, ref) => (\n  <Separator\n    ref={ref}\n    orientation=\"horizontal\"\n    variant={variant}\n    size={size}\n    className={cn('my-1', className)}\n    decorative\n    {...props}\n  />\n));\n\n// Toolbar separator for tool groups\nexport const ToolbarSeparator = React.forwardRef<HTMLDivElement, Omit<SeparatorProps, 'orientation' | 'spacing'>>(({\n  className,\n  variant = 'muted',\n  size = 'md',\n  ...props\n}, ref) => (\n  <Separator\n    ref={ref}\n    orientation=\"vertical\"\n    variant={variant}\n    size={size}\n    className={cn('mx-2 h-6', className)}\n    decorative={false}\n    ariaLabel=\"Toolbar separator\"\n    {...props}\n  />\n));\n\n// Card separator for content sections within cards\nexport const CardSeparator = React.forwardRef<HTMLDivElement, Omit<SeparatorProps, 'orientation'>>(({\n  className,\n  variant = 'default',\n  size = 'xs',\n  spacing = 'md',\n  ...props\n}, ref) => (\n  <Separator\n    ref={ref}\n    orientation=\"horizontal\"\n    variant={variant}\n    size={size}\n    spacing={spacing}\n    className={className}\n    decorative\n    {...props}\n  />\n));\n\n// Display names for React DevTools\nSeparator.displayName = 'Separator';\nSeparatorWithLabel.displayName = 'SeparatorWithLabel';\nSeparatorWithIcon.displayName = 'SeparatorWithIcon';\nSectionSeparator.displayName = 'SectionSeparator';\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\nMenuSeparator.displayName = 'MenuSeparator';\nToolbarSeparator.displayName = 'ToolbarSeparator';\nCardSeparator.displayName = 'CardSeparator';\n\n// Export types and variants\nexport type { VariantProps };\nexport { separatorVariants, separatorLabelVariants, separatorContentVariants };"
    }
  ]
}