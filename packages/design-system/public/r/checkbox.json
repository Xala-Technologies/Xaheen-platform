{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "checkbox",
  "type": "registry:component",
  "title": "Checkbox",
  "description": "Binary choice input with indeterminate state",
  "category": "components",
  "categories": [
    "components",
    "form",
    "input"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-checkbox"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/checkbox/checkbox.tsx",
      "type": "registry:component",
      "content": "/**\n * Checkbox Component - Boolean Input Controls\n * CLAUDE.md Compliant: Professional sizing (minimum h-14 equivalent)\n * WCAG AAA: Full keyboard navigation, ARIA support, and screen reader compatibility\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { CheckIcon, MinusIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst checkboxVariants = cva(\n  [\n    'peer shrink-0 rounded-md border-2 border-primary',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n    'data-[state=indeterminate]:bg-primary data-[state=indeterminate]:text-primary-foreground',\n    'transition-all duration-200 ease-in-out',\n    'hover:border-primary/80 hover:shadow-sm',\n    'cursor-pointer'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'h-4 w-4',\n        md: 'h-5 w-5',      // Professional minimum\n        lg: 'h-6 w-6',      // CLAUDE.md preferred\n        xl: 'h-7 w-7'       // Premium size\n      },\n      variant: {\n        default: [\n          'border-primary data-[state=checked]:bg-primary',\n          'data-[state=indeterminate]:bg-primary'\n        ],\n        destructive: [\n          'border-destructive data-[state=checked]:bg-destructive',\n          'data-[state=indeterminate]:bg-destructive',\n          'focus:ring-destructive/20'\n        ],\n        success: [\n          'border-green-600 data-[state=checked]:bg-green-600',\n          'data-[state=indeterminate]:bg-green-600',\n          'focus:ring-green-600/20'\n        ],\n        warning: [\n          'border-yellow-600 data-[state=checked]:bg-yellow-600',\n          'data-[state=indeterminate]:bg-yellow-600',\n          'focus:ring-yellow-600/20'\n        ],\n        // NSM Security Classification variants\n        nsmOpen: [\n          'border-green-600 data-[state=checked]:bg-green-600',\n          'data-[state=indeterminate]:bg-green-600',\n          'focus:ring-green-600/20 shadow-sm'\n        ],\n        nsmRestricted: [\n          'border-yellow-600 data-[state=checked]:bg-yellow-600',\n          'data-[state=indeterminate]:bg-yellow-600',\n          'focus:ring-yellow-600/20 shadow-sm'\n        ],\n        nsmConfidential: [\n          'border-red-600 data-[state=checked]:bg-red-600',\n          'data-[state=indeterminate]:bg-red-600',\n          'focus:ring-red-600/20 shadow-sm'\n        ],\n        nsmSecret: [\n          'border-gray-800 data-[state=checked]:bg-gray-800',\n          'data-[state=indeterminate]:bg-gray-800',\n          'focus:ring-gray-800/20 shadow-sm'\n        ]\n      },\n      shape: {\n        square: 'rounded-md',\n        rounded: 'rounded-lg',\n        circle: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      size: 'lg',\n      variant: 'default',\n      shape: 'rounded'\n    }\n  }\n);\n\nconst checkboxLabelVariants = cva(\n  [\n    'text-sm font-medium leading-none cursor-pointer',\n    'peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n    'select-none'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg',\n        xl: 'text-xl'\n      }\n    },\n    defaultVariants: {\n      size: 'lg'\n    }\n  }\n);\n\nconst checkboxGroupVariants = cva(\n  [\n    'grid gap-3'\n  ],\n  {\n    variants: {\n      orientation: {\n        vertical: 'grid-cols-1',\n        horizontal: 'grid-flow-col auto-cols-max gap-6'\n      },\n      size: {\n        sm: 'gap-2',\n        md: 'gap-3',\n        lg: 'gap-4',\n        xl: 'gap-5'\n      }\n    },\n    defaultVariants: {\n      orientation: 'vertical',\n      size: 'lg'\n    }\n  }\n);\n\n// Types\nexport interface CheckboxProps extends \n  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'type'>,\n  VariantProps<typeof checkboxVariants> {\n  readonly indeterminate?: boolean;\n  readonly label?: string;\n  readonly description?: string;\n  readonly error?: boolean;\n  readonly errorMessage?: string;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly onCheckedChange?: (checked: boolean | 'indeterminate') => void;\n}\n\nexport interface CheckboxGroupProps extends \n  Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>,\n  VariantProps<typeof checkboxGroupVariants> {\n  readonly value?: string[];\n  readonly defaultValue?: string[];\n  readonly onValueChange?: (value: string[]) => void;\n  readonly disabled?: boolean;\n  readonly required?: boolean;\n  readonly error?: boolean;\n  readonly errorMessage?: string;\n  readonly label?: string;\n  readonly description?: string;\n}\n\n// Main Checkbox Component\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  ({ \n    className, \n    size = 'lg',\n    variant = 'default',\n    shape = 'rounded',\n    indeterminate = false,\n    label,\n    description,\n    error = false,\n    errorMessage,\n    nsmClassification,\n    checked: checkedProp,\n    defaultChecked,\n    disabled = false,\n    onCheckedChange,\n    onChange,\n    id: idProp,\n    ...props \n  }, ref) => {\n    const [checkedState, setCheckedState] = React.useState(defaultChecked || false);\n    const isControlled = checkedProp !== undefined;\n    const checked = isControlled ? checkedProp : checkedState;\n    \n    // Generate unique ID\n    const generatedId = React.useId();\n    const id = idProp || generatedId;\n    const descriptionId = `${id}-description`;\n    const errorId = `${id}-error`;\n\n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : error ? 'destructive' : variant;\n\n    // Handle indeterminate state\n    const checkboxRef = React.useRef<HTMLInputElement>(null);\n    React.useImperativeHandle(ref, () => checkboxRef.current as HTMLInputElement);\n\n    React.useEffect(() => {\n      if (checkboxRef.current) {\n        checkboxRef.current.indeterminate = indeterminate;\n      }\n    }, [indeterminate]);\n\n    // Handle change events\n    const handleChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n      const newChecked = event.target.checked;\n      \n      if (!isControlled) {\n        setCheckedState(newChecked);\n      }\n      \n      onCheckedChange?.(indeterminate ? 'indeterminate' : newChecked);\n      onChange?.(event);\n    }, [isControlled, indeterminate, onCheckedChange, onChange]);\n\n    // Determine data state for styling\n    const getDataState = () => {\n      if (indeterminate) return 'indeterminate';\n      return checked ? 'checked' : 'unchecked';\n    };\n\n    // Build aria-describedby\n    const ariaDescribedBy = [\n      description && descriptionId,\n      error && errorMessage && errorId\n    ].filter(Boolean).join(' ') || undefined;\n\n    return (\n      <div className=\"flex items-start gap-3\">\n        {/* Checkbox Input Container */}\n        <div className=\"relative flex items-center justify-center\">\n          <input\n            ref={checkboxRef}\n            type=\"checkbox\"\n            id={id}\n            checked={checked}\n            disabled={disabled}\n            aria-invalid={error}\n            aria-describedby={ariaDescribedBy}\n            className=\"sr-only\"\n            onChange={handleChange}\n            {...props}\n          />\n          \n          {/* Visual Checkbox */}\n          <div\n            className={cn(\n              checkboxVariants({ size, variant: finalVariant, shape }),\n              className\n            )}\n            data-state={getDataState()}\n            onClick={() => {\n              if (!disabled && checkboxRef.current) {\n                checkboxRef.current.click();\n              }\n            }}\n          >\n            {/* Check Icon */}\n            {(checked && !indeterminate) && (\n              <CheckIcon \n                className={cn(\n                  'h-full w-full p-0.5 text-current',\n                  size === 'sm' && 'p-0',\n                  size === 'xl' && 'p-1'\n                )}\n              />\n            )}\n            \n            {/* Indeterminate Icon */}\n            {indeterminate && (\n              <MinusIcon \n                className={cn(\n                  'h-full w-full p-0.5 text-current',\n                  size === 'sm' && 'p-0',\n                  size === 'xl' && 'p-1'\n                )}\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Label and Description */}\n        {(label || description) && (\n          <div className=\"flex-1 min-w-0\">\n            {label && (\n              <label \n                htmlFor={id}\n                className={cn(checkboxLabelVariants({ size }))}\n              >\n                {label}\n                {props.required && (\n                  <span className=\"ml-1 text-destructive\" aria-label=\"Obligatorisk\">\n                    *\n                  </span>\n                )}\n              </label>\n            )}\n            \n            {description && (\n              <p \n                id={descriptionId}\n                className=\"mt-1 text-sm text-muted-foreground\"\n              >\n                {description}\n              </p>\n            )}\n            \n            {error && errorMessage && (\n              <p \n                id={errorId}\n                className=\"mt-1 text-sm text-destructive\"\n                role=\"alert\"\n              >\n                {errorMessage}\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM-klassifisering: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nCheckbox.displayName = 'Checkbox';\n\n// Checkbox Group Component\nexport const CheckboxGroup = React.forwardRef<HTMLDivElement, CheckboxGroupProps>(\n  ({ \n    className,\n    orientation = 'vertical',\n    size = 'lg',\n    value: controlledValue,\n    defaultValue = [],\n    onValueChange,\n    disabled = false,\n    required = false,\n    error = false,\n    errorMessage,\n    label,\n    description,\n    children,\n    ...props \n  }, ref) => {\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<string[]>(defaultValue);\n    \n    const isControlled = controlledValue !== undefined;\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    \n    // Generate unique IDs\n    const groupId = React.useId();\n    const descriptionId = `${groupId}-description`;\n    const errorId = `${groupId}-error`;\n\n    const handleValueChange = React.useCallback((newValue: string[]) => {\n      if (!isControlled) {\n        setUncontrolledValue(newValue);\n      }\n      onValueChange?.(newValue);\n    }, [isControlled, onValueChange]);\n\n    // Build aria-describedby for the group\n    const ariaDescribedBy = [\n      description && descriptionId,\n      error && errorMessage && errorId\n    ].filter(Boolean).join(' ') || undefined;\n\n    // Clone children with group props\n    const enhancedChildren = React.Children.map(children, (child) => {\n      if (React.isValidElement(child) && child.type === Checkbox) {\n        const childValue = child.props.value as string;\n        if (!childValue) return child;\n\n        const isChecked = value.includes(childValue);\n        \n        return React.cloneElement(child, {\n          ...child.props,\n          checked: isChecked,\n          disabled: disabled || child.props.disabled,\n          size: child.props.size || size,\n          onCheckedChange: (checked: boolean | 'indeterminate') => {\n            if (checked === 'indeterminate') return;\n            \n            const newValue = checked\n              ? [...value, childValue]\n              : value.filter(v => v !== childValue);\n            \n            handleValueChange(newValue);\n            child.props.onCheckedChange?.(checked);\n          }\n        });\n      }\n      return child;\n    });\n\n    return (\n      <div ref={ref} {...props}>\n        {/* Group Label */}\n        {label && (\n          <div className=\"mb-4\">\n            <label \n              className={cn(checkboxLabelVariants({ size }))}\n              id={`${groupId}-label`}\n            >\n              {label}\n              {required && (\n                <span className=\"ml-1 text-destructive\" aria-label=\"Obligatorisk\">\n                  *\n                </span>\n              )}\n            </label>\n            \n            {description && (\n              <p \n                id={descriptionId}\n                className=\"mt-1 text-sm text-muted-foreground\"\n              >\n                {description}\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Checkbox Group */}\n        <div\n          role=\"group\"\n          aria-labelledby={label ? `${groupId}-label` : undefined}\n          aria-describedby={ariaDescribedBy}\n          aria-required={required}\n          aria-invalid={error}\n          className={cn(\n            checkboxGroupVariants({ orientation, size }),\n            className\n          )}\n        >\n          {enhancedChildren}\n        </div>\n\n        {/* Error Message */}\n        {error && errorMessage && (\n          <p \n            id={errorId}\n            className=\"mt-2 text-sm text-destructive\"\n            role=\"alert\"\n          >\n            {errorMessage}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nCheckboxGroup.displayName = 'CheckboxGroup';\n\n// Checkbox Card - Enhanced checkbox with card-like appearance\nexport interface CheckboxCardProps extends CheckboxProps {\n  readonly icon?: React.ReactNode;\n  readonly title?: string;\n  readonly subtitle?: string;\n}\n\nexport const CheckboxCard = React.forwardRef<HTMLInputElement, CheckboxCardProps>(\n  ({ \n    icon,\n    title,\n    subtitle,\n    label,\n    description,\n    className,\n    ...props \n  }, ref) => {\n    return (\n      <div className={cn(\n        'relative rounded-lg border-2 border-border p-4',\n        'hover:border-primary/50 transition-colors duration-200',\n        'has-[:checked]:border-primary has-[:checked]:bg-primary/5',\n        className\n      )}>\n        <Checkbox\n          ref={ref}\n          className=\"absolute top-4 right-4\"\n          {...props}\n        />\n        \n        <div className=\"pr-12\">\n          {icon && (\n            <div className=\"mb-3 text-primary\">\n              {icon}\n            </div>\n          )}\n          \n          {title && (\n            <h3 className=\"font-semibold text-foreground mb-1\">\n              {title}\n            </h3>\n          )}\n          \n          {subtitle && (\n            <p className=\"text-sm text-muted-foreground mb-2\">\n              {subtitle}\n            </p>\n          )}\n          \n          {(label || description) && (\n            <div>\n              {label && (\n                <p className=\"text-sm font-medium text-foreground\">\n                  {label}\n                </p>\n              )}\n              {description && (\n                <p className=\"text-sm text-muted-foreground\">\n                  {description}\n                </p>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nCheckboxCard.displayName = 'CheckboxCard';\n\n// Export variants and types\nexport { checkboxVariants, checkboxLabelVariants, checkboxGroupVariants };\nexport type { VariantProps };"
    }
  ]
}