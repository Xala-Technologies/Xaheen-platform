{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "loading-spinner",
  "type": "registry:component",
  "title": "Loading Spinner",
  "description": "Accessible loading indicators with reduced motion support",
  "category": "components",
  "platforms": [
    "react",
    "nextjs"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/loading-spinner/loading-spinner.tsx",
      "type": "registry:component",
      "content": "/**\n * Loading Spinner Component - Accessible Loading States\n * WCAG AAA: Proper ARIA attributes and reduced motion support\n * Professional styling with multiple sizes\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst spinnerVariants = cva(\n  [\n    'animate-spin rounded-full border-solid border-current',\n    'border-r-transparent',\n    // Respect reduced motion preferences\n    'motion-reduce:animate-none'\n  ],\n  {\n    variants: {\n      size: {\n        xs: 'h-3 w-3 border',      // 12px\n        sm: 'h-4 w-4 border',      // 16px\n        md: 'h-6 w-6 border-2',    // 24px\n        lg: 'h-8 w-8 border-2',    // 32px\n        xl: 'h-12 w-12 border-2',  // 48px\n        '2xl': 'h-16 w-16 border-4' // 64px\n      },\n      variant: {\n        default: 'text-current',\n        primary: 'text-primary',\n        muted: 'text-muted-foreground',\n        white: 'text-white',\n        // NSM Classifications\n        nsmOpen: 'text-green-600',\n        nsmRestricted: 'text-yellow-600',\n        nsmConfidential: 'text-red-600',\n        nsmSecret: 'text-gray-900'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      variant: 'default'\n    }\n  }\n);\n\nexport interface LoadingSpinnerProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof spinnerVariants> {\n  readonly label?: string;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport const LoadingSpinner = React.forwardRef<HTMLDivElement, LoadingSpinnerProps>(\n  ({ \n    className, \n    size, \n    variant,\n    label = 'Loading',\n    nsmClassification,\n    ...props \n  }, ref) => {\n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    return (\n      <div\n        ref={ref}\n        className={cn(spinnerVariants({ size, variant: finalVariant }), className)}\n        role=\"status\"\n        aria-label={label}\n        aria-live=\"polite\"\n        {...props}\n      >\n        <span className=\"sr-only\">{label}...</span>\n      </div>\n    );\n  }\n);\n\nLoadingSpinner.displayName = 'LoadingSpinner';\n\n// Skeleton Loading Component for content placeholders\nconst skeletonVariants = cva(\n  [\n    'animate-pulse rounded-md bg-muted',\n    // Respect reduced motion preferences\n    'motion-reduce:animate-none motion-reduce:opacity-50'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-muted',\n        shimmer: [\n          'bg-gradient-to-r from-muted via-muted/50 to-muted',\n          'bg-[length:200%_100%]',\n          'animate-[shimmer_1.5s_ease-in-out_infinite]'\n        ]\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nexport interface SkeletonProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof skeletonVariants> {\n  readonly width?: string | number;\n  readonly height?: string | number;\n}\n\nexport const Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>(\n  ({ \n    className, \n    variant,\n    width,\n    height,\n    style,\n    ...props \n  }, ref) => {\n    const skeletonStyle = {\n      width,\n      height,\n      ...style\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(skeletonVariants({ variant }), className)}\n        style={skeletonStyle}\n        aria-hidden=\"true\"\n        {...props}\n      />\n    );\n  }\n);\n\nSkeleton.displayName = 'Skeleton';\n\n// Pulse Loading Animation for text content\nexport interface PulseTextProps extends React.HTMLAttributes<HTMLSpanElement> {\n  readonly length?: 'short' | 'medium' | 'long';\n}\n\nexport const PulseText = React.forwardRef<HTMLSpanElement, PulseTextProps>(\n  ({ className, length = 'medium', ...props }, ref) => {\n    const widths = {\n      short: 'w-16',\n      medium: 'w-32', \n      long: 'w-48'\n    };\n\n    return (\n      <span\n        ref={ref}\n        className={cn(\n          'inline-block h-4 rounded animate-pulse bg-muted',\n          widths[length],\n          // Respect reduced motion preferences  \n          'motion-reduce:animate-none motion-reduce:opacity-50',\n          className\n        )}\n        aria-hidden=\"true\"\n        {...props}\n      />\n    );\n  }\n);\n\nPulseText.displayName = 'PulseText';\n\n// Loading States Container\nexport interface LoadingStateProps {\n  readonly isLoading: boolean;\n  readonly children: React.ReactNode;\n  readonly fallback?: React.ReactNode;\n  readonly delay?: number;\n}\n\nexport const LoadingState: React.FC<LoadingStateProps> = ({\n  isLoading,\n  children,\n  fallback,\n  delay = 0\n}) => {\n  const [showLoader, setShowLoader] = React.useState(!delay);\n\n  React.useEffect(() => {\n    if (isLoading && delay > 0) {\n      const timer = setTimeout(() => setShowLoader(true), delay);\n      return () => clearTimeout(timer);\n    } else {\n      setShowLoader(isLoading);\n      return undefined;\n    }\n  }, [isLoading, delay]);\n\n  if (isLoading && showLoader) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        {fallback || <LoadingSpinner size=\"lg\" label=\"Loading content\" />}\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n};\n\nLoadingState.displayName = 'LoadingState';\n\n// Export types and variants\nexport { spinnerVariants, skeletonVariants };\nexport type { VariantProps };"
    }
  ]
}