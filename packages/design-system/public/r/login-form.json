{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "login-form",
  "type": "registry:block",
  "title": "Login Form",
  "description": "Accessible login form with Norwegian language support",
  "category": "patterns",
  "nsm": {
    "classification": "RESTRICTED",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card"
  ],
  "files": [
    {
      "path": "blocks/login-form/login-form.tsx",
      "type": "registry:component",
      "content": "/**\n * Login Form Block - Simplified Login Interface\n * WCAG AAA compliant with BankID integration and Norwegian standards\n * Focused on essential login functionality with professional styling\n */\n\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Input } from '../../components/input/input';\nimport { Card, CardContent, CardFooter, CardHeader } from '../../components/card/card';\n\nexport interface LoginCredentials {\n  readonly email: string;\n  readonly password: string;\n  readonly rememberMe?: boolean;\n}\n\nexport interface LoginFormTexts {\n  readonly heading: string;\n  readonly subheading: string;\n  readonly emailLabel: string;\n  readonly emailPlaceholder: string;\n  readonly passwordLabel: string;\n  readonly passwordPlaceholder: string;\n  readonly rememberMeLabel: string;\n  readonly loginButtonText: string;\n  readonly bankIdButtonText: string;\n  readonly forgotPasswordText: string;\n  readonly loadingText: string;\n  readonly bankIdLoadingText: string;\n  readonly emailRequiredError: string;\n  readonly emailInvalidError: string;\n  readonly passwordRequiredError: string;\n  readonly generalError: string;\n  readonly successMessage: string;\n  readonly bankIdSuccessMessage: string;\n  readonly formDescription: string;\n  readonly loginAttemptAnnouncement: string;\n  readonly loginSuccessAnnouncement: string;\n  readonly loginFailedAnnouncement: string;\n}\n\nexport interface LoginFormState {\n  readonly email: string;\n  readonly password: string;\n  readonly rememberMe: boolean;\n  readonly loading: boolean;\n  readonly bankIdLoading: boolean;\n  readonly errors: {\n    readonly email?: string;\n    readonly password?: string;\n    readonly general?: string;\n  };\n}\n\nexport interface LoginFormCallbacks {\n  readonly onLogin: (credentials: LoginCredentials) => Promise<void>;\n  readonly onBankIdLogin?: () => Promise<void>;\n  readonly onForgotPassword?: (email: string) => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onStateChange?: (state: Partial<LoginFormState>) => void;\n  readonly onFieldChange?: (field: keyof LoginFormState, value: any) => void;\n  readonly onValidationError?: (errors: LoginFormState['errors']) => void;\n}\n\nexport interface LoginFormProps {\n  readonly texts?: Partial<LoginFormTexts>;\n  readonly callbacks: LoginFormCallbacks;\n  readonly state?: Partial<LoginFormState>;\n  readonly className?: string;\n  readonly showBankId?: boolean;\n  readonly showRememberMe?: boolean;\n  readonly showForgotPassword?: boolean;\n  readonly autoFocus?: boolean;\n  readonly validateOnBlur?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly companyLogo?: React.ReactNode;\n  readonly companyName?: string;\n}\n\nconst defaultTexts: LoginFormTexts = {\n  heading: 'Velkommen tilbake',\n  subheading: 'Logg inn på din konto for å fortsette',\n  emailLabel: 'E-postadresse',\n  emailPlaceholder: 'din@epost.no',\n  passwordLabel: 'Passord',\n  passwordPlaceholder: 'Skriv inn ditt passord',\n  rememberMeLabel: 'Husk meg på denne enheten',\n  loginButtonText: 'Logg inn',\n  bankIdButtonText: 'Logg inn med BankID',\n  forgotPasswordText: 'Glemt passord?',\n  loadingText: 'Logger inn...',\n  bankIdLoadingText: 'Kobler til BankID...',\n  emailRequiredError: 'E-postadresse er påkrevd',\n  emailInvalidError: 'Ugyldig e-postadresse',\n  passwordRequiredError: 'Passord er påkrevd',\n  generalError: 'Innlogging feilet. Sjekk dine legitimasjoner.',\n  successMessage: 'Innlogging vellykket!',\n  bankIdSuccessMessage: 'BankID innlogging vellykket!',\n  formDescription: 'Logg inn med dine legitimasjoner eller bruk BankID for sikker autentisering',\n  loginAttemptAnnouncement: 'Forsøker å logge inn',\n  loginSuccessAnnouncement: 'Innlogging vellykket',\n  loginFailedAnnouncement: 'Innlogging feilet'\n};\n\nconst defaultState: LoginFormState = {\n  email: '',\n  password: '',\n  rememberMe: false,\n  loading: false,\n  bankIdLoading: false,\n  errors: {}\n};\n\nexport const LoginForm: React.FC<LoginFormProps> = ({\n  texts = {},\n  callbacks,\n  state = {},\n  className,\n  showBankId = true,\n  showRememberMe = true,\n  showForgotPassword = true,\n  autoFocus = true,\n  validateOnBlur = true,\n  nsmClassification,\n  companyLogo,\n  companyName\n}) => {\n  const t = { ...defaultTexts, ...texts };\n  const currentState = { ...defaultState, ...state };\n  \n  const {\n    email,\n    password,\n    rememberMe,\n    loading,\n    bankIdLoading,\n    errors\n  } = currentState;\n\n  const emailRef = useRef<HTMLInputElement>(null);\n  const passwordRef = useRef<HTMLInputElement>(null);\n\n  // Auto-focus email field\n  useEffect(() => {\n    if (autoFocus && emailRef.current) {\n      emailRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  // Update state helper\n  const updateState = useCallback((updates: Partial<LoginFormState>) => {\n    callbacks.onStateChange?.(updates);\n  }, [callbacks]);\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Validation functions\n  const validateEmail = (emailValue: string): string | undefined => {\n    if (!emailValue.trim()) {\n      return t.emailRequiredError;\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(emailValue)) {\n      return t.emailInvalidError;\n    }\n    return undefined;\n  };\n\n  const validatePassword = (passwordValue: string): string | undefined => {\n    if (!passwordValue.trim()) {\n      return t.passwordRequiredError;\n    }\n    return undefined;\n  };\n\n  const validateForm = (): LoginFormState['errors'] => {\n    return {\n      ...(validateEmail(email) && { email: validateEmail(email) }),\n      ...(validatePassword(password) && { password: validatePassword(password) })\n    };\n  };\n\n  // Event handlers\n  const handleFieldChange = useCallback((field: keyof LoginFormState, value: any) => {\n    callbacks.onFieldChange?.(field, value);\n    updateState({ [field]: value });\n    \n    // Clear field-specific errors when user starts typing\n    if (errors[field as keyof typeof errors]) {\n      const newErrors = { ...errors };\n      delete newErrors[field as keyof typeof errors];\n      updateState({ errors: newErrors });\n    }\n  }, [callbacks, updateState, errors]);\n\n  const handleEmailChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFieldChange('email', e.target.value);\n  }, [handleFieldChange]);\n\n  const handlePasswordChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFieldChange('password', e.target.value);\n  }, [handleFieldChange]);\n\n  const handleRememberMeChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFieldChange('rememberMe', e.target.checked);\n  }, [handleFieldChange]);\n\n  const handleEmailBlur = useCallback(() => {\n    if (validateOnBlur && email) {\n      const emailError = validateEmail(email);\n      if (emailError) {\n        const newErrors = { ...errors, email: emailError };\n        updateState({ errors: newErrors });\n        callbacks.onValidationError?.(newErrors);\n      }\n    }\n  }, [validateOnBlur, email, errors, updateState, callbacks]);\n\n  const handlePasswordBlur = useCallback(() => {\n    if (validateOnBlur && password) {\n      const passwordError = validatePassword(password);\n      if (passwordError) {\n        const newErrors = { ...errors, password: passwordError };\n        updateState({ errors: newErrors });\n        callbacks.onValidationError?.(newErrors);\n      }\n    }\n  }, [validateOnBlur, password, errors, updateState, callbacks]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    \n    if (loading || bankIdLoading) return;\n\n    // Validate form\n    const validationErrors = validateForm();\n    if (Object.keys(validationErrors).length > 0) {\n      updateState({ errors: validationErrors });\n      callbacks.onValidationError?.(validationErrors);\n      announce(`${t.loginFailedAnnouncement}: ${Object.values(validationErrors).join(', ')}`);\n      \n      // Focus first field with error\n      if (validationErrors.email && emailRef.current) {\n        emailRef.current.focus();\n      } else if (validationErrors.password && passwordRef.current) {\n        passwordRef.current.focus();\n      }\n      return;\n    }\n\n    try {\n      updateState({ loading: true, errors: {} });\n      announce(t.loginAttemptAnnouncement);\n\n      await callbacks.onLogin({\n        email: email.trim(),\n        password,\n        rememberMe\n      });\n\n      announce(t.loginSuccessAnnouncement);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : t.generalError;\n      const newErrors = { general: errorMessage };\n      updateState({ errors: newErrors });\n      callbacks.onValidationError?.(newErrors);\n      announce(`${t.loginFailedAnnouncement}: ${errorMessage}`);\n    } finally {\n      updateState({ loading: false });\n    }\n  }, [\n    email, password, rememberMe, loading, bankIdLoading,\n    callbacks, updateState, announce, t, validateForm\n  ]);\n\n  const handleBankIdLogin = useCallback(async () => {\n    if (loading || bankIdLoading || !callbacks.onBankIdLogin) return;\n\n    try {\n      updateState({ bankIdLoading: true, errors: {} });\n      announce('Starter BankID autentisering');\n\n      await callbacks.onBankIdLogin();\n      announce(t.bankIdSuccessMessage);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'BankID innlogging feilet';\n      const newErrors = { general: errorMessage };\n      updateState({ errors: newErrors });\n      callbacks.onValidationError?.(newErrors);\n      announce(`BankID feil: ${errorMessage}`);\n    } finally {\n      updateState({ bankIdLoading: false });\n    }\n  }, [loading, bankIdLoading, callbacks, updateState, announce, t]);\n\n  const handleForgotPassword = useCallback(() => {\n    if (callbacks.onForgotPassword) {\n      callbacks.onForgotPassword(email);\n      announce('Navigerer til glemt passord');\n    }\n  }, [callbacks, email, announce]);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && e.currentTarget === emailRef.current) {\n      e.preventDefault();\n      passwordRef.current?.focus();\n    }\n  }, []);\n\n  return (\n    <div className={cn('w-full max-w-md mx-auto', className)}>\n      <Card\n        variant=\"elevated\"\n        nsmClassification={nsmClassification}\n        className=\"overflow-hidden\"\n      >\n        <CardHeader className=\"text-center pb-6\">\n          {/* Company Logo */}\n          {companyLogo && (\n            <div className=\"flex justify-center mb-4\">\n              {companyLogo}\n            </div>\n          )}\n          \n          <div className=\"space-y-2\">\n            <h1 className=\"text-2xl font-bold tracking-tight\">\n              {t.heading}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {t.subheading}\n            </p>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* General Error Alert */}\n          {errors.general && (\n            <div\n              role=\"alert\"\n              aria-live=\"polite\"\n              className=\"mb-6 p-4 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive text-sm font-medium\"\n            >\n              {errors.general}\n            </div>\n          )}\n\n          {/* Login Form */}\n          <form \n            onSubmit={handleSubmit} \n            className=\"space-y-6\"\n            noValidate\n            aria-describedby=\"form-description\"\n          >\n            <p id=\"form-description\" className=\"sr-only\">\n              {t.formDescription}\n            </p>\n\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <label\n                htmlFor=\"login-email\"\n                className=\"text-sm font-medium text-foreground block\"\n              >\n                {t.emailLabel}\n              </label>\n              <Input\n                ref={emailRef}\n                id=\"login-email\"\n                name=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={handleEmailChange}\n                onBlur={handleEmailBlur}\n                onKeyDown={handleKeyDown}\n                placeholder={t.emailPlaceholder}\n                error={!!errors.email}\n                helperText={errors.email}\n                disabled={loading || bankIdLoading}\n                required\n                autoComplete=\"email\"\n                norwegianFormat=\"phone\" // Support for Norwegian phone number format as email alternative\n                size=\"lg\"\n                leadingIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                  </svg>\n                }\n              />\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <label\n                htmlFor=\"login-password\"\n                className=\"text-sm font-medium text-foreground block\"\n              >\n                {t.passwordLabel}\n              </label>\n              <Input\n                ref={passwordRef}\n                id=\"login-password\"\n                name=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={handlePasswordChange}\n                onBlur={handlePasswordBlur}\n                placeholder={t.passwordPlaceholder}\n                error={!!errors.password}\n                helperText={errors.password}\n                disabled={loading || bankIdLoading}\n                required\n                autoComplete=\"current-password\"\n                size=\"lg\"\n                leadingIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                  </svg>\n                }\n              />\n            </div>\n\n            {/* Remember Me Checkbox */}\n            {showRememberMe && (\n              <div className=\"flex items-center\">\n                <input\n                  id=\"login-remember\"\n                  name=\"remember-me\"\n                  type=\"checkbox\"\n                  checked={rememberMe}\n                  onChange={handleRememberMeChange}\n                  disabled={loading || bankIdLoading}\n                  className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <label \n                  htmlFor=\"login-remember\" \n                  className=\"ml-3 text-sm text-foreground select-none\"\n                >\n                  {t.rememberMeLabel}\n                </label>\n              </div>\n            )}\n\n            {/* Login Button */}\n            <Button\n              type=\"submit\"\n              fullWidth\n              loading={loading}\n              loadingText={t.loadingText}\n              disabled={loading || bankIdLoading}\n              size=\"lg\"\n              variant=\"primary\"\n              className=\"font-semibold\"\n            >\n              {t.loginButtonText}\n            </Button>\n          </form>\n\n          {/* BankID Login */}\n          {showBankId && callbacks.onBankIdLogin && (\n            <div className=\"mt-6\">\n              {/* Divider */}\n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-border\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-card px-4 text-muted-foreground font-medium\">eller</span>\n                </div>\n              </div>\n\n              {/* BankID Button */}\n              <Button\n                type=\"button\"\n                fullWidth\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={handleBankIdLogin}\n                loading={bankIdLoading}\n                loadingText={t.bankIdLoadingText}\n                disabled={loading || bankIdLoading}\n                className=\"font-semibold border-2\"\n                leftIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                  </svg>\n                }\n              >\n                {t.bankIdButtonText}\n              </Button>\n            </div>\n          )}\n        </CardContent>\n\n        {/* Footer with Forgot Password */}\n        {showForgotPassword && callbacks.onForgotPassword && (\n          <CardFooter className=\"justify-center\">\n            <button\n              type=\"button\"\n              onClick={handleForgotPassword}\n              disabled={loading || bankIdLoading}\n              className=\"text-sm text-primary hover:text-primary/80 transition-colors focus:outline-none focus:ring-2 focus:ring-primary/20 rounded px-3 py-2 font-medium disabled:opacity-50\"\n            >\n              {t.forgotPasswordText}\n            </button>\n          </CardFooter>\n        )}\n      </Card>\n\n      {/* Company Name Footer */}\n      {companyName && (\n        <div className=\"text-center mt-6\">\n          <p className=\"text-sm text-muted-foreground\">\n            © 2024 {companyName}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};"
    }
  ]
}