{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "card",
  "type": "registry:component",
  "title": "Card",
  "description": "Card component with NSM security classification support",
  "category": "components",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA"
  },
  "platforms": [
    "react",
    "nextjs"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/card/card.tsx",
      "type": "registry:component",
      "content": "/**\n * Card Component - Container with NSM Security Classification\n * WCAG AAA: Semantic HTML structure with proper headings\n * Professional elevation and spacing standards\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst cardVariants = cva(\n  [\n    'bg-card text-card-foreground',\n    'border border-border',\n    'transition-all duration-200'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'shadow-md hover:shadow-lg',\n        elevated: 'shadow-lg hover:shadow-xl',\n        outline: 'shadow-sm hover:shadow-md',\n        ghost: 'shadow-none hover:shadow-sm',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600 shadow-md',\n        nsmRestricted: 'border-l-4 border-l-yellow-600 shadow-md',\n        nsmConfidential: 'border-l-4 border-l-red-600 shadow-md',\n        nsmSecret: 'border-l-4 border-l-gray-800 shadow-md'\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      },\n      rounded: {\n        none: 'rounded-none',\n        sm: 'rounded-md',\n        md: 'rounded-lg',\n        lg: 'rounded-xl',\n        xl: 'rounded-2xl',\n        full: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      rounded: 'lg'\n    }\n  }\n);\n\nconst cardHeaderVariants = cva(\n  [\n    'flex flex-col space-y-1.5'\n  ],\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\nconst cardContentVariants = cva(\n  [],\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\nconst cardFooterVariants = cva(\n  [\n    'flex items-center'\n  ],\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\n// Card Root Component\nexport interface CardProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardVariants> {\n  readonly asChild?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, variant, padding, rounded, nsmClassification, ...props }, ref) => {\n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    return (\n      <div\n        ref={ref}\n        className={cn(cardVariants({ variant: finalVariant, padding, rounded }), className)}\n        {...props}\n      >\n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM Classification: {nsmClassification}\n          </span>\n        )}\n        {props.children}\n      </div>\n    );\n  }\n);\n\nCard.displayName = 'Card';\n\n// Card Header Component\nexport interface CardHeaderProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardHeaderVariants> {}\n\nexport const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardHeaderVariants({ padding }), className)}\n      {...props}\n    />\n  )\n);\n\nCardHeader.displayName = 'CardHeader';\n\n// Card Title Component\nexport interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  readonly as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(\n  ({ className, as: Component = 'h3', ...props }, ref) => (\n    <Component\n      ref={ref}\n      className={cn(\n        'text-2xl font-semibold leading-none tracking-tight',\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nCardTitle.displayName = 'CardTitle';\n\n// Card Description Component\nexport interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>(\n  ({ className, ...props }, ref) => (\n    <p\n      ref={ref}\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  )\n);\n\nCardDescription.displayName = 'CardDescription';\n\n// Card Content Component\nexport interface CardContentProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardContentVariants> {}\n\nexport const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardContentVariants({ padding }), className)}\n      {...props}\n    />\n  )\n);\n\nCardContent.displayName = 'CardContent';\n\n// Card Footer Component\nexport interface CardFooterProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardFooterVariants> {}\n\nexport const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardFooterVariants({ padding }), className)}\n      {...props}\n    />\n  )\n);\n\nCardFooter.displayName = 'CardFooter';\n\n// Export variants for external use\nexport { cardVariants };\nexport type { VariantProps };"
    }
  ]
}