{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "skeleton",
  "type": "registry:component",
  "title": "Skeleton",
  "description": "Loading placeholder components",
  "category": "components",
  "categories": [
    "components",
    "feedback",
    "loading"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/skeleton/skeleton.tsx",
      "type": "registry:component",
      "content": "/**\n * Skeleton Component - Professional Loading State Placeholders\n * CLAUDE.md Compliant: Professional styling and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n */\n\nimport React, { useMemo, useCallback } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// SKELETON VARIANTS\n// =============================================================================\n\nconst skeletonVariants = cva(\n  [\n    'animate-pulse bg-muted rounded',\n    'relative overflow-hidden',\n    'before:absolute before:inset-0',\n    'before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent',\n    'before:animate-[shimmer_2s_infinite]'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-muted',\n        card: 'bg-card border border-border shadow-sm',\n        text: 'bg-muted/80',\n        avatar: 'rounded-full bg-muted',\n        button: 'bg-muted rounded-lg',\n        image: 'bg-muted aspect-video'\n      },\n      animation: {\n        pulse: 'animate-pulse',\n        shimmer: 'animate-pulse before:animate-[shimmer_2s_infinite]',\n        wave: 'animate-pulse before:animate-[wave_2s_infinite]',\n        none: ''\n      },\n      intensity: {\n        subtle: 'opacity-60',\n        normal: 'opacity-80',\n        strong: 'opacity-100'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      animation: 'shimmer',\n      intensity: 'normal'\n    }\n  }\n);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface SkeletonProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof skeletonVariants> {\n  readonly width?: string | number;\n  readonly height?: string | number;\n  readonly lines?: number;\n  readonly aspectRatio?: 'square' | 'video' | 'portrait' | 'landscape';\n  readonly ariaLabel?: string;\n}\n\nexport interface SkeletonTextProps extends \n  React.HTMLAttributes<HTMLDivElement> {\n  readonly lines?: number;\n  readonly lastLineWidth?: string;\n  readonly fontSize?: 'xs' | 'sm' | 'base' | 'lg' | 'xl';\n  readonly ariaLabel?: string;\n}\n\nexport interface SkeletonCardProps extends \n  React.HTMLAttributes<HTMLDivElement> {\n  readonly showAvatar?: boolean;\n  readonly showImage?: boolean;\n  readonly imageAspectRatio?: 'square' | 'video' | 'portrait' | 'landscape';\n  readonly textLines?: number;\n  readonly showActions?: boolean;\n  readonly ariaLabel?: string;\n}\n\nexport interface SkeletonTableProps extends \n  React.HTMLAttributes<HTMLDivElement> {\n  readonly columns?: number;\n  readonly rows?: number;\n  readonly showHeader?: boolean;\n  readonly ariaLabel?: string;\n}\n\nexport interface SkeletonListProps extends \n  React.HTMLAttributes<HTMLDivElement> {\n  readonly items?: number;\n  readonly showAvatar?: boolean;\n  readonly showMeta?: boolean;\n  readonly ariaLabel?: string;\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\nconst getAspectRatioClass = (aspectRatio?: string) => {\n  switch (aspectRatio) {\n    case 'square': return 'aspect-square';\n    case 'video': return 'aspect-video';\n    case 'portrait': return 'aspect-[3/4]';\n    case 'landscape': return 'aspect-[4/3]';\n    default: return '';\n  }\n};\n\nconst getFontSizeClass = (fontSize?: string) => {\n  switch (fontSize) {\n    case 'xs': return 'h-3';\n    case 'sm': return 'h-4';\n    case 'base': return 'h-5';\n    case 'lg': return 'h-6';\n    case 'xl': return 'h-7';\n    default: return 'h-4';\n  }\n};\n\n// =============================================================================\n// SKELETON COMPONENTS\n// =============================================================================\n\nexport const Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>(({\n  className,\n  variant,\n  animation,\n  intensity,\n  width,\n  height,\n  lines = 1,\n  aspectRatio,\n  ariaLabel,\n  style,\n  ...props\n}, ref) => {\n  const inlineStyles = useMemo(() => ({\n    width: typeof width === 'number' ? `${width}px` : width,\n    height: typeof height === 'number' ? `${height}px` : height,\n    ...style\n  }), [width, height, style]);\n\n  // For multi-line text skeletons\n  if (lines > 1) {\n    return (\n      <div\n        ref={ref}\n        className={cn('space-y-2', className)}\n        role=\"status\"\n        aria-label={ariaLabel || 'Loading content'}\n        {...props}\n      >\n        {Array.from({ length: lines }).map((_, index) => (\n          <div\n            key={index}\n            className={cn(\n              skeletonVariants({ variant: 'text', animation, intensity }),\n              'h-4',\n              index === lines - 1 && lines > 2 && 'w-3/4' // Last line is shorter\n            )}\n          />\n        ))}\n        <span className=\"sr-only\">Loading content...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        skeletonVariants({ variant, animation, intensity }),\n        aspectRatio && getAspectRatioClass(aspectRatio),\n        className\n      )}\n      style={inlineStyles}\n      role=\"status\"\n      aria-label={ariaLabel || 'Loading'}\n      {...props}\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n});\n\nexport const SkeletonText = React.forwardRef<HTMLDivElement, SkeletonTextProps>(({\n  className,\n  lines = 3,\n  lastLineWidth = '75%',\n  fontSize = 'base',\n  ariaLabel,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn('space-y-3', className)}\n    role=\"status\"\n    aria-label={ariaLabel || 'Loading text content'}\n    {...props}\n  >\n    {Array.from({ length: lines }).map((_, index) => (\n      <div\n        key={index}\n        className={cn(\n          skeletonVariants({ variant: 'text' }),\n          getFontSizeClass(fontSize)\n        )}\n        style={{\n          width: index === lines - 1 && lines > 1 ? lastLineWidth : '100%'\n        }}\n      />\n    ))}\n    <span className=\"sr-only\">Loading text content...</span>\n  </div>\n));\n\nexport const SkeletonCard = React.forwardRef<HTMLDivElement, SkeletonCardProps>(({\n  className,\n  showAvatar = false,\n  showImage = false,\n  imageAspectRatio = 'video',\n  textLines = 3,\n  showActions = false,\n  ariaLabel,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'rounded-lg border border-border bg-card p-6 shadow-sm',\n      className\n    )}\n    role=\"status\"\n    aria-label={ariaLabel || 'Loading card content'}\n    {...props}\n  >\n    {/* Header with avatar */}\n    {showAvatar && (\n      <div className=\"flex items-center space-x-4 mb-4\">\n        <Skeleton variant=\"avatar\" width={40} height={40} />\n        <div className=\"space-y-2 flex-1\">\n          <Skeleton variant=\"text\" height={16} width=\"60%\" />\n          <Skeleton variant=\"text\" height={14} width=\"40%\" />\n        </div>\n      </div>\n    )}\n    \n    {/* Image */}\n    {showImage && (\n      <Skeleton \n        variant=\"image\" \n        aspectRatio={imageAspectRatio}\n        className=\"mb-4\"\n      />\n    )}\n    \n    {/* Text content */}\n    <div className=\"space-y-3\">\n      {Array.from({ length: textLines }).map((_, index) => (\n        <Skeleton\n          key={index}\n          variant=\"text\"\n          height={16}\n          width={index === textLines - 1 ? '75%' : '100%'}\n        />\n      ))}\n    </div>\n    \n    {/* Actions */}\n    {showActions && (\n      <div className=\"flex gap-3 mt-6 pt-4 border-t border-border\">\n        <Skeleton variant=\"button\" height={40} width={100} />\n        <Skeleton variant=\"button\" height={40} width={80} />\n      </div>\n    )}\n    \n    <span className=\"sr-only\">Loading card content...</span>\n  </div>\n));\n\nexport const SkeletonTable = React.forwardRef<HTMLDivElement, SkeletonTableProps>(({\n  className,\n  columns = 4,\n  rows = 5,\n  showHeader = true,\n  ariaLabel,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'w-full border border-border rounded-lg overflow-hidden bg-background',\n      className\n    )}\n    role=\"status\"\n    aria-label={ariaLabel || 'Loading table data'}\n    {...props}\n  >\n    {showHeader && (\n      <div className=\"bg-muted/50 p-4\">\n        <div className=\"grid gap-4\" style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>\n          {Array.from({ length: columns }).map((_, index) => (\n            <Skeleton key={index} variant=\"text\" height={18} />\n          ))}\n        </div>\n      </div>\n    )}\n    \n    <div className=\"divide-y divide-border\">\n      {Array.from({ length: rows }).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"p-4\">\n          <div className=\"grid gap-4\" style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton \n                key={colIndex} \n                variant=\"text\" \n                height={16}\n                width={colIndex === 0 ? '80%' : '100%'}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n    \n    <span className=\"sr-only\">Loading table data...</span>\n  </div>\n));\n\nexport const SkeletonList = React.forwardRef<HTMLDivElement, SkeletonListProps>(({\n  className,\n  items = 5,\n  showAvatar = true,\n  showMeta = true,\n  ariaLabel,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn('divide-y divide-border', className)}\n    role=\"status\"\n    aria-label={ariaLabel || 'Loading list items'}\n    {...props}\n  >\n    {Array.from({ length: items }).map((_, index) => (\n      <div key={index} className=\"flex items-center space-x-4 py-4\">\n        {showAvatar && (\n          <Skeleton variant=\"avatar\" width={48} height={48} />\n        )}\n        \n        <div className=\"flex-1 space-y-2\">\n          <Skeleton variant=\"text\" height={18} width=\"60%\" />\n          <Skeleton variant=\"text\" height={14} width=\"40%\" />\n          \n          {showMeta && (\n            <div className=\"flex items-center gap-4 mt-2\">\n              <Skeleton variant=\"text\" height={12} width={80} />\n              <Skeleton variant=\"text\" height={12} width={60} />\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Skeleton variant=\"button\" width={24} height={24} />\n          <Skeleton variant=\"button\" width={24} height={24} />\n        </div>\n      </div>\n    ))}\n    \n    <span className=\"sr-only\">Loading list items...</span>\n  </div>\n));\n\n// Composed skeleton patterns for common use cases\nexport const SkeletonAvatar = React.forwardRef<HTMLDivElement, SkeletonProps>(({\n  className,\n  width = 40,\n  height = 40,\n  ...props\n}, ref) => (\n  <Skeleton \n    ref={ref}\n    variant=\"avatar\" \n    width={width} \n    height={height}\n    className={className}\n    {...props}\n  />\n));\n\nexport const SkeletonButton = React.forwardRef<HTMLDivElement, SkeletonProps>(({\n  className,\n  width = 100,\n  height = 40,\n  ...props\n}, ref) => (\n  <Skeleton \n    ref={ref}\n    variant=\"button\" \n    width={width} \n    height={height}\n    className={className}\n    {...props}\n  />\n));\n\nexport const SkeletonImage = React.forwardRef<HTMLDivElement, SkeletonProps>(({\n  className,\n  aspectRatio = 'video',\n  ...props\n}, ref) => (\n  <Skeleton \n    ref={ref}\n    variant=\"image\" \n    aspectRatio={aspectRatio}\n    className={className}\n    {...props}\n  />\n));\n\n// Complex skeleton patterns\nexport const SkeletonPost = React.forwardRef<HTMLDivElement, SkeletonCardProps>(({\n  className,\n  ...props\n}, ref) => (\n  <SkeletonCard\n    ref={ref}\n    showAvatar\n    showImage\n    textLines={4}\n    showActions\n    className={className}\n    ariaLabel=\"Loading post content\"\n    {...props}\n  />\n));\n\nexport const SkeletonProfile = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({\n  className,\n  ...props\n}, ref) => (\n  <div\n    ref={ref}\n    className={cn('space-y-6', className)}\n    role=\"status\"\n    aria-label=\"Loading profile\"\n    {...props}\n  >\n    {/* Profile header */}\n    <div className=\"flex items-center space-x-6\">\n      <SkeletonAvatar width={80} height={80} />\n      <div className=\"space-y-3 flex-1\">\n        <Skeleton variant=\"text\" height={24} width=\"40%\" />\n        <Skeleton variant=\"text\" height={16} width=\"60%\" />\n        <div className=\"flex gap-3\">\n          <SkeletonButton width={120} height={36} />\n          <SkeletonButton width={100} height={36} />\n        </div>\n      </div>\n    </div>\n    \n    {/* Profile stats */}\n    <div className=\"grid grid-cols-3 gap-6 py-6 border-y border-border\">\n      {Array.from({ length: 3 }).map((_, index) => (\n        <div key={index} className=\"text-center space-y-2\">\n          <Skeleton variant=\"text\" height={28} width={60} className=\"mx-auto\" />\n          <Skeleton variant=\"text\" height={16} width={80} className=\"mx-auto\" />\n        </div>\n      ))}\n    </div>\n    \n    {/* Profile content */}\n    <SkeletonText lines={5} />\n    \n    <span className=\"sr-only\">Loading profile...</span>\n  </div>\n));\n\n// Display names for React DevTools\nSkeleton.displayName = 'Skeleton';\nSkeletonText.displayName = 'SkeletonText';\nSkeletonCard.displayName = 'SkeletonCard';\nSkeletonTable.displayName = 'SkeletonTable';\nSkeletonList.displayName = 'SkeletonList';\nSkeletonAvatar.displayName = 'SkeletonAvatar';\nSkeletonButton.displayName = 'SkeletonButton';\nSkeletonImage.displayName = 'SkeletonImage';\nSkeletonPost.displayName = 'SkeletonPost';\nSkeletonProfile.displayName = 'SkeletonProfile';\n\n// Export types and variants\nexport type { VariantProps };\nexport { skeletonVariants };"
    }
  ]
}