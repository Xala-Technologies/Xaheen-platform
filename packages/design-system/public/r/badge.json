{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "badge",
  "type": "registry:component",
  "title": "Badge",
  "description": "Small status indicators and labels",
  "category": "components",
  "categories": [
    "components",
    "display",
    "status"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/badge/badge.tsx",
      "type": "registry:component",
      "content": "/**\n * Badge Component - Status Indicators and Labels\n * CLAUDE.md Compliant: Professional sizing and semantic colors\n * WCAG AAA: High contrast colors and proper accessibility attributes\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst badgeVariants = cva(\n  [\n    'inline-flex items-center justify-center rounded-full border px-2.5 py-0.5',\n    'text-xs font-semibold transition-all duration-200 ease-in-out',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2',\n    'whitespace-nowrap',\n    // Professional minimum height\n    'min-h-[1.5rem] gap-1'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'border-transparent bg-primary text-primary-foreground',\n          'hover:bg-primary/80 shadow-sm'\n        ],\n        secondary: [\n          'border-transparent bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80'\n        ],\n        destructive: [\n          'border-transparent bg-destructive text-destructive-foreground',\n          'hover:bg-destructive/80 shadow-sm'\n        ],\n        outline: [\n          'border-border text-foreground bg-background',\n          'hover:bg-accent hover:text-accent-foreground'\n        ],\n        success: [\n          'border-transparent bg-green-100 text-green-800',\n          'hover:bg-green-200 dark:bg-green-900/20 dark:text-green-400',\n          'shadow-sm'\n        ],\n        warning: [\n          'border-transparent bg-yellow-100 text-yellow-800',\n          'hover:bg-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',\n          'shadow-sm'\n        ],\n        info: [\n          'border-transparent bg-blue-100 text-blue-800',\n          'hover:bg-blue-200 dark:bg-blue-900/20 dark:text-blue-400',\n          'shadow-sm'\n        ],\n        // NSM Security Classification variants\n        nsmOpen: [\n          'border-transparent bg-green-100 text-green-800',\n          'hover:bg-green-200 dark:bg-green-900/20 dark:text-green-400',\n          'ring-1 ring-green-600/20 shadow-sm'\n        ],\n        nsmRestricted: [\n          'border-transparent bg-yellow-100 text-yellow-800',\n          'hover:bg-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',\n          'ring-1 ring-yellow-600/20 shadow-sm'\n        ],\n        nsmConfidential: [\n          'border-transparent bg-red-100 text-red-800',\n          'hover:bg-red-200 dark:bg-red-900/20 dark:text-red-400',\n          'ring-1 ring-red-600/20 shadow-sm'\n        ],\n        nsmSecret: [\n          'border-transparent bg-gray-100 text-gray-800',\n          'hover:bg-gray-200 dark:bg-gray-900/20 dark:text-gray-400',\n          'ring-1 ring-gray-600/20 shadow-sm'\n        ]\n      },\n      size: {\n        sm: 'px-2 py-0.5 text-xs min-h-[1.25rem]',\n        md: 'px-2.5 py-0.5 text-xs min-h-[1.5rem]',\n        lg: 'px-3 py-1 text-sm min-h-[1.75rem]',\n        xl: 'px-4 py-1.5 text-base min-h-[2rem]'\n      },\n      shape: {\n        rounded: 'rounded-full',\n        square: 'rounded-md',\n        pill: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      shape: 'rounded'\n    }\n  }\n);\n\nconst badgeDotVariants = cva(\n  [\n    'mr-1 h-2 w-2 rounded-full'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary-foreground',\n        secondary: 'bg-secondary-foreground',\n        destructive: 'bg-destructive-foreground',\n        outline: 'bg-current',\n        success: 'bg-green-600',\n        warning: 'bg-yellow-600', \n        info: 'bg-blue-600',\n        nsmOpen: 'bg-green-600',\n        nsmRestricted: 'bg-yellow-600',\n        nsmConfidential: 'bg-red-600',\n        nsmSecret: 'bg-gray-600'\n      }\n    }\n  }\n);\n\n// Types\nexport interface BadgeProps extends \n  React.HTMLAttributes<HTMLSpanElement>,\n  VariantProps<typeof badgeVariants> {\n  readonly leftIcon?: React.ReactNode;\n  readonly rightIcon?: React.ReactNode;\n  readonly removable?: boolean;\n  readonly onRemove?: () => void;\n  readonly dot?: boolean;\n  readonly pulse?: boolean;\n  readonly count?: number;\n  readonly max?: number;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly ariaLabel?: string;\n}\n\n// Main Badge Component\nexport const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(\n  ({ \n    className, \n    variant = 'default',\n    size = 'md',\n    shape = 'rounded',\n    leftIcon,\n    rightIcon,\n    removable = false,\n    onRemove,\n    dot = false,\n    pulse = false,\n    count,\n    max = 99,\n    nsmClassification,\n    ariaLabel,\n    children,\n    ...props \n  }, ref) => {\n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    // Handle remove action\n    const handleRemove = React.useCallback((event: React.MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      onRemove?.();\n    }, [onRemove]);\n\n    // Handle keyboard interaction for removal\n    const handleKeyDown = React.useCallback((event: React.KeyboardEvent) => {\n      if (removable && (event.key === 'Delete' || event.key === 'Backspace')) {\n        event.preventDefault();\n        onRemove?.();\n      }\n    }, [removable, onRemove]);\n\n    // Format count for display\n    const displayCount = count !== undefined \n      ? count > max ? `${max}+` : count.toString()\n      : undefined;\n\n    return (\n      <span\n        ref={ref}\n        className={cn(\n          badgeVariants({ variant: finalVariant, size, shape }),\n          pulse && 'animate-pulse',\n          removable && 'pr-1',\n          className\n        )}\n        role={removable ? 'button' : undefined}\n        tabIndex={removable ? 0 : undefined}\n        aria-label={ariaLabel || (removable ? `Remove ${children}` : undefined)}\n        onKeyDown={handleKeyDown}\n        data-variant={finalVariant}\n        {...props}\n      >\n        {/* Left Icon */}\n        {leftIcon && (\n          <span className=\"mr-1 flex-shrink-0\" aria-hidden=\"true\">\n            {leftIcon}\n          </span>\n        )}\n\n        {/* Dot Indicator */}\n        {dot && (\n          <span \n            className={cn(\n              badgeDotVariants({ variant: finalVariant }),\n              pulse && 'animate-ping'\n            )}\n            aria-hidden=\"true\" \n          />\n        )}\n\n        {/* Content */}\n        <span className=\"truncate\">\n          {displayCount || children}\n        </span>\n\n        {/* Right Icon */}\n        {rightIcon && (\n          <span className=\"ml-1 flex-shrink-0\" aria-hidden=\"true\">\n            {rightIcon}\n          </span>\n        )}\n\n        {/* Remove Button */}\n        {removable && (\n          <button\n            type=\"button\"\n            onClick={handleRemove}\n            className={cn(\n              'ml-1 flex-shrink-0 rounded-full p-0.5',\n              'hover:bg-black/10 dark:hover:bg-white/10',\n              'focus:outline-none focus:ring-1 focus:ring-current',\n              'transition-colors duration-200'\n            )}\n            aria-label={`Remove ${children}`}\n            tabIndex={-1}\n          >\n            <XMarkIcon className=\"h-3 w-3\" />\n          </button>\n        )}\n\n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM-klassifisering: {nsmClassification}\n          </span>\n        )}\n      </span>\n    );\n  }\n);\n\nBadge.displayName = 'Badge';\n\n// Badge variants for convenience\nexport interface BadgeTypeProps extends Omit<BadgeProps, 'variant'> {}\n\nexport const BadgeSuccess = React.forwardRef<HTMLSpanElement, BadgeTypeProps>(\n  (props, ref) => <Badge ref={ref} variant=\"success\" {...props} />\n);\nBadgeSuccess.displayName = 'BadgeSuccess';\n\nexport const BadgeWarning = React.forwardRef<HTMLSpanElement, BadgeTypeProps>(\n  (props, ref) => <Badge ref={ref} variant=\"warning\" {...props} />\n);\nBadgeWarning.displayName = 'BadgeWarning';\n\nexport const BadgeError = React.forwardRef<HTMLSpanElement, BadgeTypeProps>(\n  (props, ref) => <Badge ref={ref} variant=\"destructive\" {...props} />\n);\nBadgeError.displayName = 'BadgeError';\n\nexport const BadgeInfo = React.forwardRef<HTMLSpanElement, BadgeTypeProps>(\n  (props, ref) => <Badge ref={ref} variant=\"info\" {...props} />\n);\nBadgeInfo.displayName = 'BadgeInfo';\n\n// Notification Badge Component (for counts)\nexport interface NotificationBadgeProps extends Omit<BadgeProps, 'children'> {\n  readonly count: number;\n  readonly showZero?: boolean;\n}\n\nexport const NotificationBadge = React.forwardRef<HTMLSpanElement, NotificationBadgeProps>(\n  ({ \n    count,\n    max = 99,\n    showZero = false,\n    size = 'sm',\n    variant = 'destructive',\n    ...props \n  }, ref) => {\n    if (count === 0 && !showZero) {\n      return null;\n    }\n\n    const displayValue = count > max ? `${max}+` : count.toString();\n\n    return (\n      <Badge\n        ref={ref}\n        variant={variant}\n        size={size}\n        shape=\"rounded\"\n        aria-label={`${count} notifications`}\n        {...props}\n      >\n        {displayValue}\n      </Badge>\n    );\n  }\n);\n\nNotificationBadge.displayName = 'NotificationBadge';\n\n// Status Badge Component (with dots)\nexport interface StatusBadgeProps extends Omit<BadgeProps, 'dot'> {\n  readonly status: 'online' | 'offline' | 'away' | 'busy' | 'idle';\n}\n\nexport const StatusBadge = React.forwardRef<HTMLSpanElement, StatusBadgeProps>(\n  ({ \n    status,\n    pulse: pulseProp,\n    ...props \n  }, ref) => {\n    const statusConfig = {\n      online: { variant: 'success' as const, pulse: true, label: 'Online' },\n      offline: { variant: 'outline' as const, pulse: false, label: 'Offline' },\n      away: { variant: 'warning' as const, pulse: false, label: 'Away' },\n      busy: { variant: 'destructive' as const, pulse: false, label: 'Busy' },\n      idle: { variant: 'secondary' as const, pulse: false, label: 'Idle' }\n    };\n\n    const config = statusConfig[status];\n    const shouldPulse = pulseProp !== undefined ? pulseProp : config.pulse;\n\n    return (\n      <Badge\n        ref={ref}\n        variant={config.variant}\n        dot\n        pulse={shouldPulse}\n        ariaLabel={`Status: ${config.label}`}\n        {...props}\n      >\n        {config.label}\n      </Badge>\n    );\n  }\n);\n\nStatusBadge.displayName = 'StatusBadge';\n\n// Export variants and types\nexport { badgeVariants, badgeDotVariants };\nexport type { VariantProps };"
    }
  ]
}