{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "toast",
  "type": "registry:component",
  "title": "Toast",
  "description": "Temporary notification messages",
  "category": "components",
  "categories": [
    "components",
    "feedback",
    "notification"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-toast"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/toast/toast.tsx",
      "type": "registry:component",
      "content": "import React, { useState, useCallback, useRef, useEffect, createContext, useContext } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { createPortal } from 'react-dom';\nimport { tokens } from '../../core/universal-tokens';\n\nconst toastVariants = cva(\n  'relative flex items-start gap-3 p-4 rounded-xl shadow-lg border pointer-events-auto transition-all duration-300 ease-out max-w-sm w-full',\n  {\n    variants: {\n      variant: {\n        default: 'bg-white border-gray-200 text-gray-900',\n        success: 'bg-green-50 border-green-200 text-green-900',\n        warning: 'bg-yellow-50 border-yellow-200 text-yellow-900',\n        error: 'bg-red-50 border-red-200 text-red-900',\n        info: 'bg-blue-50 border-blue-200 text-blue-900',\n      },\n      position: {\n        'top-left': 'animate-slide-in-left',\n        'top-right': 'animate-slide-in-right',\n        'top-center': 'animate-slide-in-down',\n        'bottom-left': 'animate-slide-in-left',\n        'bottom-right': 'animate-slide-in-right',\n        'bottom-center': 'animate-slide-in-up',\n      },\n      state: {\n        entering: 'opacity-0 scale-95',\n        entered: 'opacity-100 scale-100',\n        exiting: 'opacity-0 scale-95 translate-y-[-8px]',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      position: 'top-right',\n      state: 'entering',\n    },\n  }\n);\n\nconst containerVariants = cva(\n  'fixed z-50 flex flex-col gap-2 max-h-screen overflow-hidden pointer-events-none p-4',\n  {\n    variants: {\n      position: {\n        'top-left': 'top-0 left-0',\n        'top-right': 'top-0 right-0',\n        'top-center': 'top-0 left-1/2 transform -translate-x-1/2',\n        'bottom-left': 'bottom-0 left-0',\n        'bottom-right': 'bottom-0 right-0',\n        'bottom-center': 'bottom-0 left-1/2 transform -translate-x-1/2',\n      },\n    },\n    defaultVariants: {\n      position: 'top-right',\n    },\n  }\n);\n\ninterface Toast {\n  readonly id: string;\n  readonly title: string;\n  readonly description?: string;\n  readonly variant?: 'default' | 'success' | 'warning' | 'error' | 'info';\n  readonly duration?: number;\n  readonly action?: {\n    readonly label: string;\n    readonly onClick: () => void;\n  };\n  readonly onClose?: () => void;\n  readonly persistent?: boolean;\n}\n\ninterface ToastContextValue {\n  readonly toasts: readonly Toast[];\n  readonly addToast: (toast: Omit<Toast, 'id'>) => string;\n  readonly removeToast: (id: string) => void;\n  readonly clearAllToasts: () => void;\n  readonly position: 'top-left' | 'top-right' | 'top-center' | 'bottom-left' | 'bottom-right' | 'bottom-center';\n  readonly setPosition: (position: ToastContextValue['position']) => void;\n}\n\nconst ToastContext = createContext<ToastContextValue | null>(null);\n\ninterface ToastProviderProps {\n  readonly children: React.ReactNode;\n  readonly position?: ToastContextValue['position'];\n  readonly maxToasts?: number;\n}\n\nexport const ToastProvider = ({ \n  children, \n  position: initialPosition = 'top-right',\n  maxToasts = 5 \n}: ToastProviderProps): JSX.Element => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n  const [position, setPosition] = useState<ToastContextValue['position']>(initialPosition);\n  const timersRef = useRef<Map<string, NodeJS.Timeout>>(new Map());\n\n  const addToast = useCallback((toast: Omit<Toast, 'id'>): string => {\n    const id = `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const newToast: Toast = { ...toast, id };\n\n    setToasts(prevToasts => {\n      const updatedToasts = [...prevToasts, newToast];\n      if (updatedToasts.length > maxToasts) {\n        const removed = updatedToasts.splice(0, updatedToasts.length - maxToasts);\n        removed.forEach(removedToast => {\n          const timer = timersRef.current.get(removedToast.id);\n          if (timer) {\n            clearTimeout(timer);\n            timersRef.current.delete(removedToast.id);\n          }\n        });\n      }\n      return updatedToasts;\n    });\n\n    // Auto-remove toast after duration\n    if (!toast.persistent && toast.duration !== 0) {\n      const duration = toast.duration || 5000;\n      const timer = setTimeout(() => {\n        removeToast(id);\n      }, duration);\n      timersRef.current.set(id, timer);\n    }\n\n    return id;\n  }, [maxToasts]);\n\n  const removeToast = useCallback((id: string) => {\n    const timer = timersRef.current.get(id);\n    if (timer) {\n      clearTimeout(timer);\n      timersRef.current.delete(id);\n    }\n\n    setToasts(prevToasts => prevToasts.filter(toast => toast.id !== id));\n  }, []);\n\n  const clearAllToasts = useCallback(() => {\n    timersRef.current.forEach(timer => clearTimeout(timer));\n    timersRef.current.clear();\n    setToasts([]);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      timersRef.current.forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  const contextValue: ToastContextValue = {\n    toasts,\n    addToast,\n    removeToast,\n    clearAllToasts,\n    position,\n    setPosition,\n  };\n\n  return (\n    <ToastContext.Provider value={contextValue}>\n      {children}\n      <ToastContainer />\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = (): ToastContextValue => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\nconst ToastContainer = (): JSX.Element => {\n  const { toasts, position } = useToast();\n\n  if (toasts.length === 0) return <></>;\n\n  return createPortal(\n    <div className={containerVariants({ position })}>\n      {toasts.map(toast => (\n        <ToastComponent key={toast.id} toast={toast} position={position} />\n      ))}\n    </div>,\n    document.body\n  );\n};\n\ninterface ToastComponentProps {\n  readonly toast: Toast;\n  readonly position: ToastContextValue['position'];\n}\n\nconst ToastComponent = ({ toast, position }: ToastComponentProps): JSX.Element => {\n  const { removeToast } = useToast();\n  const [state, setState] = useState<'entering' | 'entered' | 'exiting'>('entering');\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    // Enter animation\n    timeoutRef.current = setTimeout(() => {\n      setState('entered');\n    }, 50);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setState('exiting');\n    setTimeout(() => {\n      removeToast(toast.id);\n      toast.onClose?.();\n    }, 150);\n  }, [removeToast, toast.id, toast.onClose]);\n\n  const getIcon = (): JSX.Element => {\n    switch (toast.variant) {\n      case 'success':\n        return (\n          <svg className=\"h-5 w-5 text-green-600 flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n        );\n      case 'warning':\n        return (\n          <svg className=\"h-5 w-5 text-yellow-600 flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>\n        );\n      case 'error':\n        return (\n          <svg className=\"h-5 w-5 text-red-600 flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        );\n      case 'info':\n        return (\n          <svg className=\"h-5 w-5 text-blue-600 flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n        );\n      default:\n        return (\n          <svg className=\"h-5 w-5 text-gray-600 flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n        );\n    }\n  };\n\n  return (\n    <div\n      role=\"alert\"\n      aria-live=\"polite\"\n      className={toastVariants({ variant: toast.variant, position, state })}\n    >\n      {getIcon()}\n      \n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium\">{toast.title}</div>\n        {toast.description && (\n          <div className=\"text-sm opacity-75 mt-1\">{toast.description}</div>\n        )}\n        \n        {toast.action && (\n          <div className=\"mt-3\">\n            <button\n              onClick={() => {\n                toast.action?.onClick();\n                handleClose();\n              }}\n              className=\"text-sm font-medium underline hover:no-underline focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded\"\n            >\n              {toast.action.label}\n            </button>\n          </div>\n        )}\n      </div>\n\n      <button\n        onClick={handleClose}\n        className=\"ml-auto flex-shrink-0 h-8 w-8 rounded-lg hover:bg-black/5 flex items-center justify-center transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n        aria-label=\"Close notification\"\n      >\n        <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </button>\n\n      <style jsx>{`\n        @keyframes slide-in-left {\n          from {\n            transform: translateX(-100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n\n        @keyframes slide-in-right {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n\n        @keyframes slide-in-up {\n          from {\n            transform: translateY(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateY(0);\n            opacity: 1;\n          }\n        }\n\n        @keyframes slide-in-down {\n          from {\n            transform: translateY(-100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateY(0);\n            opacity: 1;\n          }\n        }\n\n        .animate-slide-in-left {\n          animation: slide-in-left 300ms ease-out;\n        }\n\n        .animate-slide-in-right {\n          animation: slide-in-right 300ms ease-out;\n        }\n\n        .animate-slide-in-up {\n          animation: slide-in-up 300ms ease-out;\n        }\n\n        .animate-slide-in-down {\n          animation: slide-in-down 300ms ease-out;\n        }\n      `}</style>\n    </div>\n  );\n};\n\n// Convenience hook for common toast types\nexport const useToastActions = () => {\n  const { addToast } = useToast();\n\n  const success = useCallback((title: string, description?: string, options?: Partial<Toast>) => {\n    return addToast({ ...options, title, description, variant: 'success' });\n  }, [addToast]);\n\n  const error = useCallback((title: string, description?: string, options?: Partial<Toast>) => {\n    return addToast({ ...options, title, description, variant: 'error' });\n  }, [addToast]);\n\n  const warning = useCallback((title: string, description?: string, options?: Partial<Toast>) => {\n    return addToast({ ...options, title, description, variant: 'warning' });\n  }, [addToast]);\n\n  const info = useCallback((title: string, description?: string, options?: Partial<Toast>) => {\n    return addToast({ ...options, title, description, variant: 'info' });\n  }, [addToast]);\n\n  const promise = useCallback(<T,>(\n    promise: Promise<T>,\n    {\n      loading,\n      success: successMessage,\n      error: errorMessage,\n    }: {\n      loading: string;\n      success: string | ((data: T) => string);\n      error: string | ((error: any) => string);\n    }\n  ) => {\n    const toastId = addToast({\n      title: loading,\n      variant: 'info',\n      persistent: true,\n    });\n\n    promise\n      .then((data) => {\n        const message = typeof successMessage === 'function' ? successMessage(data) : successMessage;\n        addToast({\n          title: message,\n          variant: 'success',\n        });\n      })\n      .catch((error) => {\n        const message = typeof errorMessage === 'function' ? errorMessage(error) : errorMessage;\n        addToast({\n          title: message,\n          variant: 'error',\n        });\n      });\n\n    return promise;\n  }, [addToast]);\n\n  return { success, error, warning, info, promise };\n};"
    }
  ]
}