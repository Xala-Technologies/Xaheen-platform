{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "profile-01",
  "type": "registry:block",
  "title": "Profile Page",
  "description": "User profile page with editable fields",
  "category": "patterns",
  "nsm": {
    "classification": "RESTRICTED",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "card",
    "avatar",
    "button",
    "input",
    "form"
  ],
  "files": [
    {
      "path": "blocks/profile-01/profile-01.tsx",
      "type": "registry:component",
      "content": "/**\n * Profile-01 Block - User Profile Display\n * WCAG AAA compliant with comprehensive user information display\n * Norwegian standards with BankID verification and security features\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/card/card';\n\nexport interface UserProfile {\n  readonly id: string;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly email: string;\n  readonly phoneNumber?: string;\n  readonly avatar?: string;\n  readonly title?: string;\n  readonly department?: string;\n  readonly organization?: string;\n  readonly location?: string;\n  readonly bio?: string;\n  readonly dateOfBirth?: Date;\n  readonly nationalId?: string;\n  readonly bankIdVerified?: boolean;\n  readonly lastLogin?: Date;\n  readonly accountCreated: Date;\n  readonly status: 'active' | 'inactive' | 'suspended' | 'pending';\n  readonly permissions?: string[];\n  readonly preferences?: {\n    readonly language?: 'nb' | 'nn' | 'en';\n    readonly timezone?: string;\n    readonly theme?: 'light' | 'dark' | 'auto';\n    readonly notifications?: boolean;\n  };\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface ProfileTexts {\n  readonly profileTitle: string;\n  readonly personalInformation: string;\n  readonly workInformation: string;\n  readonly accountDetails: string;\n  readonly securityDetails: string;\n  readonly preferences: string;\n  readonly editProfile: string;\n  readonly changePassword: string;\n  readonly verifyBankId: string;\n  readonly downloadData: string;\n  readonly deactivateAccount: string;\n  readonly firstNameLabel: string;\n  readonly lastNameLabel: string;\n  readonly emailLabel: string;\n  readonly phoneLabel: string;\n  readonly titleLabel: string;\n  readonly departmentLabel: string;\n  readonly organizationLabel: string;\n  readonly locationLabel: string;\n  readonly bioLabel: string;\n  readonly dateOfBirthLabel: string;\n  readonly nationalIdLabel: string;\n  readonly bankIdStatusLabel: string;\n  readonly lastLoginLabel: string;\n  readonly accountCreatedLabel: string;\n  readonly statusLabel: string;\n  readonly permissionsLabel: string;\n  readonly languageLabel: string;\n  readonly timezoneLabel: string;\n  readonly themeLabel: string;\n  readonly notificationsLabel: string;\n  readonly verified: string;\n  readonly notVerified: string;\n  readonly active: string;\n  readonly inactive: string;\n  readonly suspended: string;\n  readonly pending: string;\n  readonly never: string;\n  readonly yes: string;\n  readonly no: string;\n  readonly light: string;\n  readonly dark: string;\n  readonly auto: string;\n  readonly loading: string;\n  readonly profileUpdated: string;\n  readonly bankIdVerificationStarted: string;\n  readonly dataDownloadStarted: string;\n  readonly missingInformation: string;\n}\n\nexport interface ProfileState {\n  readonly loading: boolean;\n  readonly editing: boolean;\n  readonly verifyingBankId: boolean;\n  readonly downloadingData: boolean;\n  readonly errors: Record<string, string>;\n}\n\nexport interface ProfileCallbacks {\n  readonly onEdit?: () => void;\n  readonly onChangePassword?: () => void;\n  readonly onVerifyBankId?: () => Promise<void>;\n  readonly onDownloadData?: () => Promise<void>;\n  readonly onDeactivateAccount?: () => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onUpdatePreferences?: (preferences: UserProfile['preferences']) => Promise<void>;\n  readonly onStateChange?: (state: Partial<ProfileState>) => void;\n}\n\nexport interface Profile01Props {\n  readonly profile: UserProfile;\n  readonly texts?: Partial<ProfileTexts>;\n  readonly callbacks?: ProfileCallbacks;\n  readonly state?: Partial<ProfileState>;\n  readonly className?: string;\n  readonly showPersonalSection?: boolean;\n  readonly showWorkSection?: boolean;\n  readonly showAccountSection?: boolean;\n  readonly showSecuritySection?: boolean;\n  readonly showPreferencesSection?: boolean;\n  readonly showActions?: boolean;\n  readonly readOnly?: boolean;\n  readonly compact?: boolean;\n}\n\nconst defaultTexts: ProfileTexts = {\n  profileTitle: 'Brukerprofil',\n  personalInformation: 'Personlig informasjon',\n  workInformation: 'Arbeidsinformasjon',\n  accountDetails: 'Kontodetaljer',\n  securityDetails: 'Sikkerhetsinformasjon',\n  preferences: 'Innstillinger',\n  editProfile: 'Rediger profil',\n  changePassword: 'Endre passord',\n  verifyBankId: 'Verifiser med BankID',\n  downloadData: 'Last ned mine data',\n  deactivateAccount: 'Deaktiver konto',\n  firstNameLabel: 'Fornavn',\n  lastNameLabel: 'Etternavn',\n  emailLabel: 'E-postadresse',\n  phoneLabel: 'Telefonnummer',\n  titleLabel: 'Stilling',\n  departmentLabel: 'Avdeling',\n  organizationLabel: 'Organisasjon',\n  locationLabel: 'Lokasjon',\n  bioLabel: 'Om meg',\n  dateOfBirthLabel: 'Fødselsdato',\n  nationalIdLabel: 'Personnummer',\n  bankIdStatusLabel: 'BankID status',\n  lastLoginLabel: 'Siste innlogging',\n  accountCreatedLabel: 'Konto opprettet',\n  statusLabel: 'Kontostatus',\n  permissionsLabel: 'Tilganger',\n  languageLabel: 'Språk',\n  timezoneLabel: 'Tidssone',\n  themeLabel: 'Tema',\n  notificationsLabel: 'Varsler',\n  verified: 'Verifisert',\n  notVerified: 'Ikke verifisert',\n  active: 'Aktiv',\n  inactive: 'Inaktiv',\n  suspended: 'Suspendert',\n  pending: 'Venter',\n  never: 'Aldri',\n  yes: 'Ja',\n  no: 'Nei',\n  light: 'Lys',\n  dark: 'Mørk',\n  auto: 'Automatisk',\n  loading: 'Laster...',\n  profileUpdated: 'Profil oppdatert',\n  bankIdVerificationStarted: 'BankID verifisering startet',\n  dataDownloadStarted: 'Datanedlasting startet',\n  missingInformation: 'Ikke oppgitt'\n};\n\nconst defaultState: ProfileState = {\n  loading: false,\n  editing: false,\n  verifyingBankId: false,\n  downloadingData: false,\n  errors: {}\n};\n\nexport const Profile01: React.FC<Profile01Props> = ({\n  profile,\n  texts = {},\n  callbacks = {},\n  state = {},\n  className,\n  showPersonalSection = true,\n  showWorkSection = true,\n  showAccountSection = true,\n  showSecuritySection = true,\n  showPreferencesSection = true,\n  showActions = true,\n  readOnly = false,\n  compact = false\n}) => {\n  const t = { ...defaultTexts, ...texts };\n  const currentState = { ...defaultState, ...state };\n  \n  const {\n    loading,\n    editing,\n    verifyingBankId,\n    downloadingData,\n    errors\n  } = currentState;\n\n  // Update state helper\n  const updateState = useCallback((updates: Partial<ProfileState>) => {\n    callbacks.onStateChange?.(updates);\n  }, [callbacks]);\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Format date helper\n  const formatDate = useCallback((date: Date, includeTime = false): string => {\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      ...(includeTime && {\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    };\n    return new Intl.DateTimeFormat('nb-NO', options).format(date);\n  }, []);\n\n  // Event handlers\n  const handleEdit = useCallback(() => {\n    callbacks.onEdit?.();\n    announce('Åpner redigeringsmodus');\n  }, [callbacks, announce]);\n\n  const handleChangePassword = useCallback(() => {\n    callbacks.onChangePassword?.();\n    announce('Åpner passordendring');\n  }, [callbacks, announce]);\n\n  const handleVerifyBankId = useCallback(async () => {\n    if (verifyingBankId || !callbacks.onVerifyBankId) return;\n\n    try {\n      updateState({ verifyingBankId: true });\n      await callbacks.onVerifyBankId();\n      announce(t.bankIdVerificationStarted);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'BankID verifisering feilet';\n      announce(`Feil: ${errorMessage}`);\n    } finally {\n      updateState({ verifyingBankId: false });\n    }\n  }, [verifyingBankId, callbacks, updateState, announce, t]);\n\n  const handleDownloadData = useCallback(async () => {\n    if (downloadingData || !callbacks.onDownloadData) return;\n\n    try {\n      updateState({ downloadingData: true });\n      await callbacks.onDownloadData();\n      announce(t.dataDownloadStarted);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Datanedlasting feilet';\n      announce(`Feil: ${errorMessage}`);\n    } finally {\n      updateState({ downloadingData: false });\n    }\n  }, [downloadingData, callbacks, updateState, announce, t]);\n\n  const handleDeactivateAccount = useCallback(() => {\n    callbacks.onDeactivateAccount?.();\n    announce('Åpner kontodeaktivering');\n  }, [callbacks, announce]);\n\n  // Render helpers\n  const renderInfoItem = useCallback((\n    label: string, \n    value: string | React.ReactNode | undefined, \n    icon?: React.ReactNode\n  ) => (\n    <div className={cn('space-y-1', compact && 'space-y-0')}>\n      <dt className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n        {icon && <span aria-hidden=\"true\">{icon}</span>}\n        {label}\n      </dt>\n      <dd className={cn('text-foreground', compact ? 'text-sm' : 'text-base')}>\n        {value || <span className=\"italic text-muted-foreground\">{t.missingInformation}</span>}\n      </dd>\n    </div>\n  ), [compact, t]);\n\n  const renderStatusBadge = useCallback((status: UserProfile['status']) => {\n    const statusConfig = {\n      active: { color: 'bg-green-100 text-green-800', text: t.active },\n      inactive: { color: 'bg-gray-100 text-gray-800', text: t.inactive },\n      suspended: { color: 'bg-red-100 text-red-800', text: t.suspended },\n      pending: { color: 'bg-yellow-100 text-yellow-800', text: t.pending }\n    };\n\n    const config = statusConfig[status];\n    return (\n      <span className={cn('inline-flex px-2 py-1 text-xs font-medium rounded-full', config.color)}>\n        {config.text}\n      </span>\n    );\n  }, [t]);\n\n  const fullName = `${profile.firstName} ${profile.lastName}`;\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Profile Header */}\n      <Card nsmClassification={profile.nsmClassification}>\n        <CardHeader className=\"pb-6\">\n          <div className=\"flex items-start gap-6\">\n            {/* Avatar */}\n            <div className=\"relative\">\n              <div className=\"h-24 w-24 rounded-full bg-muted flex items-center justify-center overflow-hidden\">\n                {profile.avatar ? (\n                  <img\n                    src={profile.avatar}\n                    alt={`${fullName} profilbilde`}\n                    className=\"h-full w-full object-cover\"\n                  />\n                ) : (\n                  <span className=\"text-2xl font-semibold text-muted-foreground\">\n                    {profile.firstName.charAt(0)}\n                    {profile.lastName.charAt(0)}\n                  </span>\n                )}\n              </div>\n              \n              {/* Verification Badge */}\n              {profile.bankIdVerified && (\n                <div \n                  className=\"absolute -bottom-1 -right-1 h-8 w-8 bg-green-600 rounded-full flex items-center justify-center\"\n                  title={t.verified}\n                >\n                  <svg className=\"h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n              )}\n            </div>\n\n            {/* Basic Info */}\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-2xl\">{fullName}</CardTitle>\n              <CardDescription className=\"text-lg mt-1\">\n                {profile.title && profile.department \n                  ? `${profile.title} - ${profile.department}`\n                  : profile.title || profile.department}\n              </CardDescription>\n              \n              {profile.organization && (\n                <p className=\"text-muted-foreground mt-2\">{profile.organization}</p>\n              )}\n              \n              {profile.location && (\n                <p className=\"text-muted-foreground flex items-center gap-1 mt-1\">\n                  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                  </svg>\n                  {profile.location}\n                </p>\n              )}\n            </div>\n\n            {/* Status */}\n            <div className=\"text-right\">\n              {renderStatusBadge(profile.status)}\n              {profile.lastLogin && (\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {t.lastLoginLabel}: {formatDate(profile.lastLogin, true)}\n                </p>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n\n        {/* Bio */}\n        {profile.bio && (\n          <CardContent className=\"pt-0 pb-6 border-b\">\n            <p className=\"text-foreground leading-relaxed\">{profile.bio}</p>\n          </CardContent>\n        )}\n\n        {/* Action Buttons */}\n        {showActions && !readOnly && (\n          <CardContent className=\"pt-0\">\n            <div className=\"flex flex-wrap gap-3\">\n              {callbacks.onEdit && (\n                <Button\n                  variant=\"primary\"\n                  onClick={handleEdit}\n                  disabled={loading || editing}\n                  leftIcon={\n                    <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                    </svg>\n                  }\n                >\n                  {t.editProfile}\n                </Button>\n              )}\n\n              {callbacks.onChangePassword && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handleChangePassword}\n                  disabled={loading}\n                  leftIcon={\n                    <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                    </svg>\n                  }\n                >\n                  {t.changePassword}\n                </Button>\n              )}\n\n              {callbacks.onVerifyBankId && !profile.bankIdVerified && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handleVerifyBankId}\n                  loading={verifyingBankId}\n                  disabled={loading || verifyingBankId}\n                  leftIcon={\n                    <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                    </svg>\n                  }\n                >\n                  {t.verifyBankId}\n                </Button>\n              )}\n\n              {callbacks.onDownloadData && (\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleDownloadData}\n                  loading={downloadingData}\n                  disabled={loading || downloadingData}\n                  leftIcon={\n                    <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                  }\n                >\n                  {t.downloadData}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Personal Information */}\n        {showPersonalSection && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                </svg>\n                {t.personalInformation}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <dl className={cn('space-y-4', compact && 'space-y-3')}>\n                {renderInfoItem(t.firstNameLabel, profile.firstName)}\n                {renderInfoItem(t.lastNameLabel, profile.lastName)}\n                {renderInfoItem(t.emailLabel, profile.email, '📧')}\n                {renderInfoItem(t.phoneLabel, profile.phoneNumber, '📞')}\n                {profile.dateOfBirth && renderInfoItem(\n                  t.dateOfBirthLabel, \n                  formatDate(profile.dateOfBirth),\n                  '🎂'\n                )}\n                {profile.nationalId && renderInfoItem(\n                  t.nationalIdLabel,\n                  profile.nationalId.replace(/(\\d{6})(\\d{5})/, '$1 $2'),\n                  '🆔'\n                )}\n              </dl>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Work Information */}\n        {showWorkSection && (profile.title || profile.department || profile.organization) && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 002 2v8a2 2 0 01-2 2H6a2 2 0 01-2-2v-8a2 2 0 012-2V8z\" />\n                </svg>\n                {t.workInformation}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <dl className={cn('space-y-4', compact && 'space-y-3')}>\n                {renderInfoItem(t.titleLabel, profile.title, '💼')}\n                {renderInfoItem(t.departmentLabel, profile.department, '🏢')}\n                {renderInfoItem(t.organizationLabel, profile.organization, '🏛️')}\n                {renderInfoItem(t.locationLabel, profile.location, '📍')}\n              </dl>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Account Details */}\n        {showAccountSection && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                </svg>\n                {t.accountDetails}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <dl className={cn('space-y-4', compact && 'space-y-3')}>\n                {renderInfoItem(t.statusLabel, renderStatusBadge(profile.status))}\n                {renderInfoItem(\n                  t.accountCreatedLabel, \n                  formatDate(profile.accountCreated),\n                  '📅'\n                )}\n                {profile.lastLogin ? renderInfoItem(\n                  t.lastLoginLabel, \n                  formatDate(profile.lastLogin, true),\n                  '⏰'\n                ) : renderInfoItem(t.lastLoginLabel, t.never, '⏰')}\n                {profile.permissions && profile.permissions.length > 0 && renderInfoItem(\n                  t.permissionsLabel,\n                  profile.permissions.join(', '),\n                  '🔑'\n                )}\n              </dl>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Security Details */}\n        {showSecuritySection && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                </svg>\n                {t.securityDetails}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <dl className={cn('space-y-4', compact && 'space-y-3')}>\n                {renderInfoItem(\n                  t.bankIdStatusLabel,\n                  profile.bankIdVerified ? (\n                    <span className=\"inline-flex items-center gap-2 text-green-600\">\n                      <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                      </svg>\n                      {t.verified}\n                    </span>\n                  ) : (\n                    <span className=\"inline-flex items-center gap-2 text-muted-foreground\">\n                      <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                      {t.notVerified}\n                    </span>\n                  ),\n                  '🔒'\n                )}\n                {profile.nsmClassification && renderInfoItem(\n                  'NSM Klassifisering',\n                  <span className={cn(\n                    'inline-flex px-2 py-1 text-xs font-medium rounded',\n                    profile.nsmClassification === 'OPEN' && 'bg-green-100 text-green-700',\n                    profile.nsmClassification === 'RESTRICTED' && 'bg-yellow-100 text-yellow-700',\n                    profile.nsmClassification === 'CONFIDENTIAL' && 'bg-red-100 text-red-700',\n                    profile.nsmClassification === 'SECRET' && 'bg-gray-100 text-gray-700'\n                  )}>\n                    {profile.nsmClassification}\n                  </span>,\n                  '🏛️'\n                )}\n              </dl>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Preferences */}\n        {showPreferencesSection && profile.preferences && (\n          <Card className=\"md:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n                </svg>\n                {t.preferences}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <dl className={cn('grid gap-4 sm:grid-cols-2', compact && 'gap-3')}>\n                {profile.preferences.language && renderInfoItem(\n                  t.languageLabel,\n                  profile.preferences.language === 'nb' ? 'Bokmål' : \n                  profile.preferences.language === 'nn' ? 'Nynorsk' : 'English',\n                  '🌍'\n                )}\n                {profile.preferences.timezone && renderInfoItem(\n                  t.timezoneLabel,\n                  profile.preferences.timezone,\n                  '⏰'\n                )}\n                {profile.preferences.theme && renderInfoItem(\n                  t.themeLabel,\n                  profile.preferences.theme === 'light' ? t.light :\n                  profile.preferences.theme === 'dark' ? t.dark : t.auto,\n                  '🎨'\n                )}\n                {profile.preferences.notifications !== undefined && renderInfoItem(\n                  t.notificationsLabel,\n                  profile.preferences.notifications ? t.yes : t.no,\n                  '🔔'\n                )}\n              </dl>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Danger Zone */}\n      {callbacks.onDeactivateAccount && !readOnly && (\n        <Card className=\"border-destructive/20\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Fareområde</CardTitle>\n            <CardDescription>\n              Irreversible og destruktive handlinger\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              variant=\"destructive\"\n              onClick={handleDeactivateAccount}\n              disabled={loading}\n              leftIcon={\n                <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                </svg>\n              }\n            >\n              {t.deactivateAccount}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};"
    }
  ]
}