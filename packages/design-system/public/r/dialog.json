{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "dialog",
  "type": "registry:component",
  "title": "Dialog",
  "description": "Modal dialogs with focus management",
  "category": "components",
  "categories": [
    "components",
    "overlay",
    "modal"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/dialog/dialog.tsx",
      "type": "registry:component",
      "content": "/**\n * Dialog Component - Modal Dialogs and Overlays\n * CLAUDE.md Compliant: Professional sizing and accessibility standards\n * WCAG AAA: Focus management, ESC handling, backdrop click, and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst dialogOverlayVariants = cva(\n  [\n    'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm',\n    'data-[state=open]:animate-in data-[state=closed]:animate-out',\n    'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0'\n  ]\n);\n\nconst dialogContentVariants = cva(\n  [\n    'fixed left-[50%] top-[50%] z-50 translate-x-[-50%] translate-y-[-50%]',\n    'grid w-full gap-4 border bg-background p-6 shadow-lg',\n    'data-[state=open]:animate-in data-[state=closed]:animate-out',\n    'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n    'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95',\n    'data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]',\n    'data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]',\n    'duration-200'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'max-w-sm',\n        md: 'max-w-md',\n        lg: 'max-w-lg',\n        xl: 'max-w-xl',\n        '2xl': 'max-w-2xl',\n        '3xl': 'max-w-3xl',\n        '4xl': 'max-w-4xl',\n        '5xl': 'max-w-5xl',\n        '6xl': 'max-w-6xl',\n        '7xl': 'max-w-7xl',\n        full: 'max-w-[95vw] max-h-[95vh]'\n      },\n      variant: {\n        default: 'rounded-lg border-border',\n        elevated: 'rounded-xl border-border shadow-xl',\n        alert: 'rounded-lg border-destructive/20 shadow-xl',\n        // NSM Security Classification variants\n        nsmOpen: 'rounded-lg border-l-4 border-l-green-600 border-border shadow-lg',\n        nsmRestricted: 'rounded-lg border-l-4 border-l-yellow-600 border-border shadow-lg',\n        nsmConfidential: 'rounded-lg border-l-4 border-l-red-600 border-border shadow-lg',\n        nsmSecret: 'rounded-lg border-l-4 border-l-gray-800 border-border shadow-xl'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      variant: 'default'\n    }\n  }\n);\n\nconst dialogHeaderVariants = cva(\n  [\n    'flex flex-col space-y-1.5 text-center sm:text-left'\n  ]\n);\n\nconst dialogFooterVariants = cva(\n  [\n    'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2'\n  ]\n);\n\nconst dialogTitleVariants = cva(\n  [\n    'text-lg font-semibold leading-none tracking-tight'\n  ]\n);\n\nconst dialogDescriptionVariants = cva(\n  [\n    'text-sm text-muted-foreground'\n  ]\n);\n\n// Types\nexport interface DialogProps {\n  readonly open?: boolean;\n  readonly defaultOpen?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n  readonly modal?: boolean;\n  readonly children: React.ReactNode;\n}\n\nexport interface DialogContentProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof dialogContentVariants> {\n  readonly onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  readonly onPointerDownOutside?: (event: PointerEvent) => void;\n  readonly onInteractOutside?: (event: Event) => void;\n  readonly forceMount?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface DialogHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\nexport interface DialogFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\nexport interface DialogTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\nexport interface DialogDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\nexport interface DialogCloseProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  readonly asChild?: boolean;\n}\n\n// Context for dialog state management\ninterface DialogContextType {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  modal: boolean;\n}\n\nconst DialogContext = React.createContext<DialogContextType | null>(null);\n\nfunction useDialog(): DialogContextType {\n  const context = React.useContext(DialogContext);\n  if (!context) {\n    throw new Error('Dialog components must be used within a Dialog');\n  }\n  return context;\n}\n\n// Portal component for rendering outside DOM tree\nconst Portal: React.FC<{ children: React.ReactNode; container?: HTMLElement }> = ({ \n  children, \n  container \n}) => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  const target = container || document.body;\n  return target ? React.createPortal(children, target) : null;\n};\n\n// Main Dialog Component\nexport const Dialog: React.FC<DialogProps> = ({ \n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n  modal = true,\n  children \n}) => {\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(defaultOpen);\n  \n  const isControlled = controlledOpen !== undefined;\n  const open = isControlled ? controlledOpen : uncontrolledOpen;\n\n  const handleOpenChange = React.useCallback((newOpen: boolean) => {\n    if (!isControlled) {\n      setUncontrolledOpen(newOpen);\n    }\n    onOpenChange?.(newOpen);\n  }, [isControlled, onOpenChange]);\n\n  const contextValue: DialogContextType = {\n    open,\n    onOpenChange: handleOpenChange,\n    modal\n  };\n\n  return (\n    <DialogContext.Provider value={contextValue}>\n      {children}\n    </DialogContext.Provider>\n  );\n};\n\nDialog.displayName = 'Dialog';\n\n// Dialog Trigger Component\nexport const DialogTrigger: React.FC<{ \n  children: React.ReactNode;\n  asChild?: boolean;\n}> = ({ children, asChild = false }) => {\n  const { onOpenChange } = useDialog();\n\n  const handleClick = React.useCallback(() => {\n    onOpenChange(true);\n  }, [onOpenChange]);\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...children.props,\n      onClick: (event: React.MouseEvent) => {\n        children.props.onClick?.(event);\n        if (!event.defaultPrevented) {\n          handleClick();\n        }\n      }\n    });\n  }\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      {children}\n    </button>\n  );\n};\n\nDialogTrigger.displayName = 'DialogTrigger';\n\n// Dialog Portal Component\nexport const DialogPortal: React.FC<{\n  children: React.ReactNode;\n  container?: HTMLElement;\n  forceMount?: boolean;\n}> = ({ children, container, forceMount }) => {\n  const { open } = useDialog();\n\n  if (!forceMount && !open) {\n    return null;\n  }\n\n  return (\n    <Portal container={container}>\n      {children}\n    </Portal>\n  );\n};\n\nDialogPortal.displayName = 'DialogPortal';\n\n// Dialog Overlay Component\nexport const DialogOverlay = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { open } = useDialog();\n\n    return (\n      <div\n        ref={ref}\n        className={cn(dialogOverlayVariants(), className)}\n        data-state={open ? 'open' : 'closed'}\n        {...props}\n      />\n    );\n  }\n);\n\nDialogOverlay.displayName = 'DialogOverlay';\n\n// Dialog Content Component\nexport const DialogContent = React.forwardRef<HTMLDivElement, DialogContentProps>(\n  ({ \n    className, \n    size = 'md',\n    variant = 'default',\n    children,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onInteractOutside,\n    nsmClassification,\n    ...props \n  }, ref) => {\n    const { open, onOpenChange, modal } = useDialog();\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    // Focus management\n    React.useEffect(() => {\n      if (open && contentRef.current) {\n        const focusableElement = contentRef.current.querySelector(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        ) as HTMLElement;\n        \n        if (focusableElement) {\n          focusableElement.focus();\n        } else {\n          contentRef.current.focus();\n        }\n      }\n    }, [open]);\n\n    // Escape key handler\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape') {\n          onEscapeKeyDown?.(event);\n          if (!event.defaultPrevented) {\n            onOpenChange(false);\n          }\n        }\n      };\n\n      if (open) {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n      }\n    }, [open, onEscapeKeyDown, onOpenChange]);\n\n    // Outside click handler\n    React.useEffect(() => {\n      const handlePointerDown = (event: PointerEvent) => {\n        if (\n          modal &&\n          contentRef.current &&\n          !contentRef.current.contains(event.target as Node)\n        ) {\n          onPointerDownOutside?.(event);\n          onInteractOutside?.(event);\n          \n          if (!event.defaultPrevented) {\n            onOpenChange(false);\n          }\n        }\n      };\n\n      if (open) {\n        document.addEventListener('pointerdown', handlePointerDown);\n        return () => document.removeEventListener('pointerdown', handlePointerDown);\n      }\n    }, [open, modal, onPointerDownOutside, onInteractOutside, onOpenChange]);\n\n    // Prevent scrolling when dialog is open\n    React.useEffect(() => {\n      if (open && modal) {\n        document.body.style.overflow = 'hidden';\n        return () => {\n          document.body.style.overflow = '';\n        };\n      }\n    }, [open, modal]);\n\n    if (!open) return null;\n\n    return (\n      <DialogPortal forceMount>\n        <DialogOverlay />\n        <div\n          ref={contentRef}\n          role=\"dialog\"\n          aria-modal={modal}\n          aria-describedby=\"dialog-description\"\n          aria-labelledby=\"dialog-title\"\n          tabIndex={-1}\n          className={cn(\n            dialogContentVariants({ size, variant: finalVariant }),\n            className\n          )}\n          data-state={open ? 'open' : 'closed'}\n          {...props}\n        >\n          {children}\n\n          {/* NSM Classification for screen readers */}\n          {nsmClassification && (\n            <span className=\"sr-only\">\n              NSM-klassifisering: {nsmClassification}\n            </span>\n          )}\n        </div>\n      </DialogPortal>\n    );\n  }\n);\n\nDialogContent.displayName = 'DialogContent';\n\n// Dialog Header Component\nexport const DialogHeader = React.forwardRef<HTMLDivElement, DialogHeaderProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(dialogHeaderVariants(), className)}\n      {...props}\n    />\n  )\n);\n\nDialogHeader.displayName = 'DialogHeader';\n\n// Dialog Footer Component\nexport const DialogFooter = React.forwardRef<HTMLDivElement, DialogFooterProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(dialogFooterVariants(), className)}\n      {...props}\n    />\n  )\n);\n\nDialogFooter.displayName = 'DialogFooter';\n\n// Dialog Title Component\nexport const DialogTitle = React.forwardRef<HTMLHeadingElement, DialogTitleProps>(\n  ({ className, ...props }, ref) => (\n    <h2\n      ref={ref}\n      id=\"dialog-title\"\n      className={cn(dialogTitleVariants(), className)}\n      {...props}\n    />\n  )\n);\n\nDialogTitle.displayName = 'DialogTitle';\n\n// Dialog Description Component\nexport const DialogDescription = React.forwardRef<HTMLParagraphElement, DialogDescriptionProps>(\n  ({ className, ...props }, ref) => (\n    <p\n      ref={ref}\n      id=\"dialog-description\"\n      className={cn(dialogDescriptionVariants(), className)}\n      {...props}\n    />\n  )\n);\n\nDialogDescription.displayName = 'DialogDescription';\n\n// Dialog Close Component\nexport const DialogClose = React.forwardRef<HTMLButtonElement, DialogCloseProps>(\n  ({ className, children, asChild = false, onClick, ...props }, ref) => {\n    const { onOpenChange } = useDialog();\n\n    const handleClick = React.useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(event);\n      if (!event.defaultPrevented) {\n        onOpenChange(false);\n      }\n    }, [onClick, onOpenChange]);\n\n    if (asChild && React.isValidElement(children)) {\n      return React.cloneElement(children, {\n        ...children.props,\n        onClick: handleClick\n      });\n    }\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        className={cn(\n          'absolute right-4 top-4 rounded-sm opacity-70',\n          'ring-offset-background transition-opacity',\n          'hover:opacity-100 focus:outline-none focus:ring-2',\n          'focus:ring-ring focus:ring-offset-2',\n          'disabled:pointer-events-none',\n          'data-[state=open]:bg-accent data-[state=open]:text-muted-foreground',\n          className\n        )}\n        onClick={handleClick}\n        aria-label=\"Lukk\"\n        {...props}\n      >\n        {children || <XMarkIcon className=\"h-4 w-4\" />}\n      </button>\n    );\n  }\n);\n\nDialogClose.displayName = 'DialogClose';\n\n// Confirmation Dialog Component\nexport interface ConfirmationDialogProps extends Omit<DialogProps, 'children'> {\n  readonly title?: string;\n  readonly description?: string;\n  readonly confirmText?: string;\n  readonly cancelText?: string;\n  readonly variant?: 'default' | 'destructive';\n  readonly onConfirm?: () => void;\n  readonly onCancel?: () => void;\n  readonly loading?: boolean;\n}\n\nexport const ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({\n  title = 'Er du sikker?',\n  description = 'Denne handlingen kan ikke angres.',\n  confirmText = 'Bekreft',\n  cancelText = 'Avbryt',\n  variant = 'default',\n  onConfirm,\n  onCancel,\n  loading = false,\n  ...dialogProps\n}) => {\n  return (\n    <Dialog {...dialogProps}>\n      <DialogContent variant={variant === 'destructive' ? 'alert' : 'default'}>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          {description && (\n            <DialogDescription>{description}</DialogDescription>\n          )}\n        </DialogHeader>\n        \n        <DialogFooter className=\"gap-2\">\n          <DialogClose asChild>\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"h-12 px-6 rounded-lg border border-border bg-background hover:bg-accent transition-colors\"\n            >\n              {cancelText}\n            </button>\n          </DialogClose>\n          \n          <button\n            type=\"button\"\n            onClick={onConfirm}\n            disabled={loading}\n            className={cn(\n              'h-12 px-6 rounded-lg font-medium transition-colors',\n              variant === 'destructive'\n                ? 'bg-destructive text-destructive-foreground hover:bg-destructive/90'\n                : 'bg-primary text-primary-foreground hover:bg-primary/90',\n              loading && 'opacity-50 cursor-not-allowed'\n            )}\n          >\n            {loading ? 'Behandler...' : confirmText}\n          </button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nConfirmationDialog.displayName = 'ConfirmationDialog';\n\n// Export variants and types\nexport { \n  dialogOverlayVariants, \n  dialogContentVariants, \n  dialogHeaderVariants, \n  dialogFooterVariants,\n  dialogTitleVariants,\n  dialogDescriptionVariants \n};\nexport type { VariantProps };"
    }
  ]
}