{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "dropdown-menu",
  "type": "registry:component",
  "title": "Dropdown Menu",
  "description": "Contextual action menus",
  "category": "components",
  "categories": [
    "components",
    "navigation",
    "overlay"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/dropdown-menu/dropdown-menu.tsx",
      "type": "registry:component",
      "content": "/**\n * Dropdown Menu Component - Context Menus and Dropdowns\n * CLAUDE.md Compliant: Professional sizing and accessibility standards\n * WCAG AAA: Full keyboard navigation, ARIA support, and screen reader compatibility\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronRightIcon, CheckIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst dropdownMenuContentVariants = cva(\n  [\n    'z-50 min-w-[8rem] overflow-hidden rounded-lg border bg-popover p-1 text-popover-foreground shadow-lg',\n    'data-[state=open]:animate-in data-[state=closed]:animate-out',\n    'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n    'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95',\n    'data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2',\n    'data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n    'duration-200'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'min-w-[6rem] text-sm p-1',\n        md: 'min-w-[8rem] text-base p-1',\n        lg: 'min-w-[10rem] text-lg p-2',\n        xl: 'min-w-[12rem] text-xl p-2'\n      },\n      variant: {\n        default: 'border-border',\n        elevated: 'shadow-xl border-border',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600 border-border shadow-lg',\n        nsmRestricted: 'border-l-4 border-l-yellow-600 border-border shadow-lg',\n        nsmConfidential: 'border-l-4 border-l-red-600 border-border shadow-lg',\n        nsmSecret: 'border-l-4 border-l-gray-800 border-border shadow-xl'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      variant: 'default'\n    }\n  }\n);\n\nconst dropdownMenuItemVariants = cva(\n  [\n    'relative flex cursor-pointer select-none items-center rounded-md px-3 py-2 text-sm',\n    'outline-none transition-all duration-150',\n    'focus:bg-accent focus:text-accent-foreground',\n    'data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n    // Professional minimum height\n    'min-h-[2.5rem] gap-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-accent/50',\n        destructive: 'text-red-600 focus:bg-red-50 focus:text-red-600 dark:focus:bg-red-900/20',\n        success: 'text-green-600 focus:bg-green-50 focus:text-green-600 dark:focus:bg-green-900/20',\n        warning: 'text-yellow-600 focus:bg-yellow-50 focus:text-yellow-600 dark:focus:bg-yellow-900/20'\n      },\n      size: {\n        sm: 'px-2 py-1.5 text-xs min-h-[2rem] gap-1.5',\n        md: 'px-3 py-2 text-sm min-h-[2.5rem] gap-2',\n        lg: 'px-4 py-2.5 text-base min-h-[3rem] gap-2.5',\n        xl: 'px-5 py-3 text-lg min-h-[3.5rem] gap-3'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst dropdownMenuSeparatorVariants = cva(\n  [\n    'mx-1 my-1 h-px bg-muted'\n  ]\n);\n\nconst dropdownMenuLabelVariants = cva(\n  [\n    'px-3 py-1.5 text-sm font-semibold text-muted-foreground'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'px-2 py-1 text-xs',\n        md: 'px-3 py-1.5 text-sm',\n        lg: 'px-4 py-2 text-base',\n        xl: 'px-5 py-2.5 text-lg'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\n// Types\nexport interface DropdownMenuProps {\n  readonly open?: boolean;\n  readonly defaultOpen?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n  readonly modal?: boolean;\n  readonly dir?: 'ltr' | 'rtl';\n  readonly children: React.ReactNode;\n}\n\nexport interface DropdownMenuContentProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof dropdownMenuContentVariants> {\n  readonly side?: 'top' | 'right' | 'bottom' | 'left';\n  readonly align?: 'start' | 'center' | 'end';\n  readonly sideOffset?: number;\n  readonly alignOffset?: number;\n  readonly avoidCollisions?: boolean;\n  readonly forceMount?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface DropdownMenuItemProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof dropdownMenuItemVariants> {\n  readonly disabled?: boolean;\n  readonly textValue?: string;\n  readonly asChild?: boolean;\n}\n\nexport interface DropdownMenuCheckboxItemProps extends DropdownMenuItemProps {\n  readonly checked?: boolean | 'indeterminate';\n  readonly onCheckedChange?: (checked: boolean) => void;\n}\n\nexport interface DropdownMenuRadioItemProps extends DropdownMenuItemProps {\n  readonly value: string;\n}\n\nexport interface DropdownMenuRadioGroupProps extends React.HTMLAttributes<HTMLDivElement> {\n  readonly value?: string;\n  readonly onValueChange?: (value: string) => void;\n}\n\nexport interface DropdownMenuSubProps {\n  readonly open?: boolean;\n  readonly defaultOpen?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n  readonly children: React.ReactNode;\n}\n\nexport interface DropdownMenuSubContentProps extends DropdownMenuContentProps {}\n\nexport interface DropdownMenuSubTriggerProps extends DropdownMenuItemProps {\n  readonly inset?: boolean;\n}\n\nexport interface DropdownMenuLabelProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof dropdownMenuLabelVariants> {\n  readonly inset?: boolean;\n}\n\nexport interface DropdownMenuSeparatorProps extends \n  React.HTMLAttributes<HTMLDivElement> {}\n\nexport interface DropdownMenuShortcutProps extends \n  React.HTMLAttributes<HTMLSpanElement> {}\n\n// Context for dropdown menu state management\ninterface DropdownMenuContextType {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  modal: boolean;\n  dir: 'ltr' | 'rtl';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst DropdownMenuContext = React.createContext<DropdownMenuContextType | null>(null);\n\nfunction useDropdownMenu(): DropdownMenuContextType {\n  const context = React.useContext(DropdownMenuContext);\n  if (!context) {\n    throw new Error('DropdownMenu components must be used within a DropdownMenu');\n  }\n  return context;\n}\n\n// Portal component for rendering outside DOM tree\nconst Portal: React.FC<{ children: React.ReactNode; container?: HTMLElement }> = ({ \n  children, \n  container \n}) => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  const target = container || document.body;\n  return target ? React.createPortal(children, target) : null;\n};\n\n// Main DropdownMenu Component\nexport const DropdownMenu: React.FC<DropdownMenuProps> = ({ \n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n  modal = true,\n  dir = 'ltr',\n  children \n}) => {\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(defaultOpen);\n  \n  const isControlled = controlledOpen !== undefined;\n  const open = isControlled ? controlledOpen : uncontrolledOpen;\n\n  const handleOpenChange = React.useCallback((newOpen: boolean) => {\n    if (!isControlled) {\n      setUncontrolledOpen(newOpen);\n    }\n    onOpenChange?.(newOpen);\n  }, [isControlled, onOpenChange]);\n\n  const contextValue: DropdownMenuContextType = {\n    open,\n    onOpenChange: handleOpenChange,\n    modal,\n    dir\n  };\n\n  return (\n    <DropdownMenuContext.Provider value={contextValue}>\n      {children}\n    </DropdownMenuContext.Provider>\n  );\n};\n\nDropdownMenu.displayName = 'DropdownMenu';\n\n// DropdownMenu Trigger Component\nexport const DropdownMenuTrigger = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & { asChild?: boolean }\n>(({ className, children, asChild = false, ...props }, ref) => {\n  const { onOpenChange, open } = useDropdownMenu();\n\n  const handleClick = React.useCallback(() => {\n    onOpenChange(!open);\n  }, [onOpenChange, open]);\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...children.props,\n      ref,\n      'aria-expanded': open,\n      'aria-haspopup': 'menu',\n      'data-state': open ? 'open' : 'closed',\n      onClick: (event: React.MouseEvent) => {\n        children.props.onClick?.(event);\n        if (!event.defaultPrevented) {\n          handleClick();\n        }\n      }\n    });\n  }\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      aria-expanded={open}\n      aria-haspopup=\"menu\"\n      data-state={open ? 'open' : 'closed'}\n      className={cn('outline-none', className)}\n      onClick={handleClick}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n});\n\nDropdownMenuTrigger.displayName = 'DropdownMenuTrigger';\n\n// DropdownMenu Portal Component\nexport const DropdownMenuPortal: React.FC<{\n  children: React.ReactNode;\n  container?: HTMLElement;\n  forceMount?: boolean;\n}> = ({ children, container, forceMount }) => {\n  const { open } = useDropdownMenu();\n\n  if (!forceMount && !open) {\n    return null;\n  }\n\n  return (\n    <Portal container={container}>\n      {children}\n    </Portal>\n  );\n};\n\nDropdownMenuPortal.displayName = 'DropdownMenuPortal';\n\n// DropdownMenu Content Component\nexport const DropdownMenuContent = React.forwardRef<HTMLDivElement, DropdownMenuContentProps>(\n  ({ \n    className, \n    size = 'md',\n    variant = 'default',\n    side = 'bottom',\n    align = 'start',\n    sideOffset = 4,\n    children,\n    nsmClassification,\n    onKeyDown,\n    ...props \n  }, ref) => {\n    const { open, onOpenChange } = useDropdownMenu();\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    // Focus management\n    React.useEffect(() => {\n      if (open && contentRef.current) {\n        const firstItem = contentRef.current.querySelector('[role=\"menuitem\"]:not([data-disabled])') as HTMLElement;\n        firstItem?.focus();\n      }\n    }, [open]);\n\n    // Keyboard navigation\n    const handleKeyDown = React.useCallback((event: React.KeyboardEvent<HTMLDivElement>) => {\n      const items = Array.from(\n        contentRef.current?.querySelectorAll('[role=\"menuitem\"]:not([data-disabled])') || []\n      ) as HTMLElement[];\n      \n      const currentIndex = items.indexOf(document.activeElement as HTMLElement);\n\n      switch (event.key) {\n        case 'Escape':\n          event.preventDefault();\n          onOpenChange(false);\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n          items[nextIndex]?.focus();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n          items[prevIndex]?.focus();\n          break;\n        case 'Home':\n          event.preventDefault();\n          items[0]?.focus();\n          break;\n        case 'End':\n          event.preventDefault();\n          items[items.length - 1]?.focus();\n          break;\n      }\n      \n      onKeyDown?.(event);\n    }, [onOpenChange, onKeyDown]);\n\n    // Outside click handler\n    React.useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (contentRef.current && !contentRef.current.contains(event.target as Node)) {\n          onOpenChange(false);\n        }\n      };\n\n      if (open) {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n      }\n    }, [open, onOpenChange]);\n\n    if (!open) return null;\n\n    return (\n      <DropdownMenuPortal>\n        <div\n          ref={contentRef}\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n          data-state={open ? 'open' : 'closed'}\n          data-side={side}\n          data-align={align}\n          className={cn(\n            dropdownMenuContentVariants({ size, variant: finalVariant }),\n            className\n          )}\n          style={{\n            transformOrigin: 'var(--radix-dropdown-menu-content-transform-origin)',\n            ...props.style\n          }}\n          onKeyDown={handleKeyDown}\n          {...props}\n        >\n          {children}\n\n          {/* NSM Classification for screen readers */}\n          {nsmClassification && (\n            <span className=\"sr-only\">\n              NSM-klassifisering: {nsmClassification}\n            </span>\n          )}\n        </div>\n      </DropdownMenuPortal>\n    );\n  }\n);\n\nDropdownMenuContent.displayName = 'DropdownMenuContent';\n\n// DropdownMenu Item Component\nexport const DropdownMenuItem = React.forwardRef<HTMLDivElement, DropdownMenuItemProps>(\n  ({ \n    className, \n    variant = 'default',\n    size = 'md',\n    disabled = false,\n    children,\n    onClick,\n    onSelect,\n    asChild = false,\n    ...props \n  }, ref) => {\n    const { onOpenChange } = useDropdownMenu();\n\n    const handleClick = React.useCallback((event: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) {\n        event.preventDefault();\n        return;\n      }\n\n      onClick?.(event);\n      \n      if (!event.defaultPrevented) {\n        onSelect?.(event);\n        onOpenChange(false);\n      }\n    }, [disabled, onClick, onSelect, onOpenChange]);\n\n    const handleKeyDown = React.useCallback((event: React.KeyboardEvent<HTMLDivElement>) => {\n      if ((event.key === 'Enter' || event.key === ' ') && !disabled) {\n        event.preventDefault();\n        handleClick(event as any);\n      }\n    }, [disabled, handleClick]);\n\n    if (asChild && React.isValidElement(children)) {\n      return React.cloneElement(children, {\n        ...children.props,\n        ref,\n        role: 'menuitem',\n        tabIndex: disabled ? -1 : 0,\n        'data-disabled': disabled || undefined,\n        className: cn(dropdownMenuItemVariants({ variant, size }), className),\n        onClick: handleClick,\n        onKeyDown: handleKeyDown\n      });\n    }\n\n    return (\n      <div\n        ref={ref}\n        role=\"menuitem\"\n        tabIndex={disabled ? -1 : 0}\n        data-disabled={disabled || undefined}\n        className={cn(dropdownMenuItemVariants({ variant, size }), className)}\n        onClick={handleClick}\n        onKeyDown={handleKeyDown}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nDropdownMenuItem.displayName = 'DropdownMenuItem';\n\n// DropdownMenu Checkbox Item Component\nexport const DropdownMenuCheckboxItem = React.forwardRef<HTMLDivElement, DropdownMenuCheckboxItemProps>(\n  ({ \n    className, \n    children, \n    checked = false, \n    onCheckedChange,\n    disabled = false,\n    ...props \n  }, ref) => {\n    const handleSelect = React.useCallback((event: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) return;\n      \n      event.preventDefault();\n      onCheckedChange?.(!checked);\n    }, [disabled, checked, onCheckedChange]);\n\n    return (\n      <DropdownMenuItem\n        ref={ref}\n        className={cn('pl-8', className)}\n        disabled={disabled}\n        onSelect={handleSelect}\n        {...props}\n      >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n          {(checked === true || checked === 'indeterminate') && (\n            <CheckIcon className=\"h-4 w-4\" />\n          )}\n        </span>\n        {children}\n      </DropdownMenuItem>\n    );\n  }\n);\n\nDropdownMenuCheckboxItem.displayName = 'DropdownMenuCheckboxItem';\n\n// DropdownMenu Radio Group Component\nexport const DropdownMenuRadioGroup = React.forwardRef<HTMLDivElement, DropdownMenuRadioGroupProps>(\n  ({ className, value, onValueChange, ...props }, ref) => {\n    const contextValue = React.useMemo(() => ({\n      value,\n      onValueChange: onValueChange || (() => {})\n    }), [value, onValueChange]);\n\n    return (\n      <DropdownMenuRadioGroupContext.Provider value={contextValue}>\n        <div ref={ref} role=\"radiogroup\" className={className} {...props} />\n      </DropdownMenuRadioGroupContext.Provider>\n    );\n  }\n);\n\nDropdownMenuRadioGroup.displayName = 'DropdownMenuRadioGroup';\n\n// Context for radio group\nconst DropdownMenuRadioGroupContext = React.createContext<{\n  value?: string;\n  onValueChange: (value: string) => void;\n}>({\n  onValueChange: () => {}\n});\n\n// DropdownMenu Radio Item Component\nexport const DropdownMenuRadioItem = React.forwardRef<HTMLDivElement, DropdownMenuRadioItemProps>(\n  ({ className, children, value, disabled = false, ...props }, ref) => {\n    const { value: groupValue, onValueChange } = React.useContext(DropdownMenuRadioGroupContext);\n    \n    const isChecked = groupValue === value;\n\n    const handleSelect = React.useCallback((event: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) return;\n      \n      event.preventDefault();\n      onValueChange(value);\n    }, [disabled, value, onValueChange]);\n\n    return (\n      <DropdownMenuItem\n        ref={ref}\n        className={cn('pl-8', className)}\n        disabled={disabled}\n        onSelect={handleSelect}\n        {...props}\n      >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n          {isChecked && <div className=\"h-2 w-2 rounded-full bg-current\" />}\n        </span>\n        {children}\n      </DropdownMenuItem>\n    );\n  }\n);\n\nDropdownMenuRadioItem.displayName = 'DropdownMenuRadioItem';\n\n// DropdownMenu Label Component\nexport const DropdownMenuLabel = React.forwardRef<HTMLDivElement, DropdownMenuLabelProps>(\n  ({ className, size = 'md', inset = false, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        dropdownMenuLabelVariants({ size }),\n        inset && 'pl-8',\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nDropdownMenuLabel.displayName = 'DropdownMenuLabel';\n\n// DropdownMenu Separator Component\nexport const DropdownMenuSeparator = React.forwardRef<HTMLDivElement, DropdownMenuSeparatorProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      role=\"separator\"\n      aria-orientation=\"horizontal\"\n      className={cn(dropdownMenuSeparatorVariants(), className)}\n      {...props}\n    />\n  )\n);\n\nDropdownMenuSeparator.displayName = 'DropdownMenuSeparator';\n\n// DropdownMenu Shortcut Component\nexport const DropdownMenuShortcut = React.forwardRef<HTMLSpanElement, DropdownMenuShortcutProps>(\n  ({ className, ...props }, ref) => (\n    <span\n      ref={ref}\n      className={cn(\n        'ml-auto text-xs tracking-widest opacity-60',\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\n// DropdownMenu Sub Components\nexport const DropdownMenuSub: React.FC<DropdownMenuSubProps> = ({ \n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n  children \n}) => {\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(defaultOpen);\n  \n  const isControlled = controlledOpen !== undefined;\n  const open = isControlled ? controlledOpen : uncontrolledOpen;\n\n  const handleOpenChange = React.useCallback((newOpen: boolean) => {\n    if (!isControlled) {\n      setUncontrolledOpen(newOpen);\n    }\n    onOpenChange?.(newOpen);\n  }, [isControlled, onOpenChange]);\n\n  return (\n    <DropdownMenuSubContext.Provider value={{ open, onOpenChange: handleOpenChange }}>\n      {children}\n    </DropdownMenuSubContext.Provider>\n  );\n};\n\nDropdownMenuSub.displayName = 'DropdownMenuSub';\n\n// Context for sub menu\nconst DropdownMenuSubContext = React.createContext<{\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n} | null>(null);\n\nexport const DropdownMenuSubTrigger = React.forwardRef<HTMLDivElement, DropdownMenuSubTriggerProps>(\n  ({ className, inset = false, children, ...props }, ref) => {\n    const subContext = React.useContext(DropdownMenuSubContext);\n    \n    return (\n      <DropdownMenuItem\n        ref={ref}\n        className={cn(\n          'focus:bg-accent data-[state=open]:bg-accent',\n          inset && 'pl-8',\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n      </DropdownMenuItem>\n    );\n  }\n);\n\nDropdownMenuSubTrigger.displayName = 'DropdownMenuSubTrigger';\n\nexport const DropdownMenuSubContent = React.forwardRef<HTMLDivElement, DropdownMenuSubContentProps>(\n  ({ className, ...props }, ref) => (\n    <DropdownMenuContent\n      ref={ref}\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out',\n        'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n        'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95',\n        'data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2',\n        'data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nDropdownMenuSubContent.displayName = 'DropdownMenuSubContent';\n\n// Export variants and types\nexport { \n  dropdownMenuContentVariants, \n  dropdownMenuItemVariants, \n  dropdownMenuLabelVariants,\n  dropdownMenuSeparatorVariants \n};\nexport type { VariantProps };"
    }
  ]
}