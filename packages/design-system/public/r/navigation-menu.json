{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "navigation-menu",
  "type": "registry:component",
  "title": "Navigation Menu",
  "description": "Multi-level navigation menus",
  "category": "components",
  "categories": [
    "components",
    "navigation"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-navigation-menu"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/navigation-menu/navigation-menu.tsx",
      "type": "registry:component",
      "content": "/**\n * Navigation Menu Component - Main Navigation System\n * CLAUDE.md Compliant: Professional sizing and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Norwegian localization support\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// NAVIGATION MENU ROOT\n// =============================================================================\n\nconst navigationMenuVariants = cva(\n  [\n    'relative z-10 flex max-w-max flex-1 items-center justify-center',\n    'focus-within:z-50'\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: 'flex-row',\n        vertical: 'flex-col items-start'\n      },\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg'\n      }\n    },\n    defaultVariants: {\n      orientation: 'horizontal',\n      size: 'md'\n    }\n  }\n);\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root> &\n    VariantProps<typeof navigationMenuVariants>\n>(({ className, children, orientation, size, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(navigationMenuVariants({ orientation, size }), className)}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\n// =============================================================================\n// NAVIGATION MENU LIST\n// =============================================================================\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      'group flex flex-1 list-none items-center justify-center space-x-1',\n      className\n    )}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\n// =============================================================================\n// NAVIGATION MENU ITEM\n// =============================================================================\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\n// =============================================================================\n// NAVIGATION MENU TRIGGER\n// =============================================================================\n\nconst navigationMenuTriggerVariants = cva(\n  [\n    'group inline-flex items-center justify-center rounded-lg',\n    'bg-transparent px-4 py-2 text-sm font-medium transition-colors',\n    'hover:bg-accent hover:text-accent-foreground',\n    'focus:bg-accent focus:text-accent-foreground focus:outline-none',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'data-[active]:bg-accent/50 data-[state=open]:bg-accent/50',\n    'min-h-[2.75rem]', // Professional touch target (44px)\n    'focus:ring-2 focus:ring-primary/20 focus:ring-offset-2',\n    'contrast-more:border contrast-more:border-current'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        subtle: 'text-muted-foreground hover:text-foreground',\n        prominent: 'font-semibold bg-accent/10 hover:bg-accent/20'\n      },\n      size: {\n        sm: 'h-8 px-3 text-xs min-h-[2rem]',\n        md: 'h-10 px-4 text-sm min-h-[2.75rem]',\n        lg: 'h-12 px-6 text-base min-h-[3rem]'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger> &\n    VariantProps<typeof navigationMenuTriggerVariants>\n>(({ className, children, variant, size, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerVariants({ variant, size }), className)}\n    {...props}\n  >\n    {children}{' '}\n    <ChevronDownIcon\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\n// =============================================================================\n// NAVIGATION MENU CONTENT\n// =============================================================================\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out',\n      'data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out',\n      'data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52',\n      'data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52',\n      'md:absolute md:w-auto',\n      className\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\n// =============================================================================\n// NAVIGATION MENU LINK\n// =============================================================================\n\nconst navigationMenuLinkVariants = cva(\n  [\n    'block select-none space-y-1 rounded-lg p-3 leading-none no-underline',\n    'outline-none transition-colors',\n    'hover:bg-accent hover:text-accent-foreground',\n    'focus:bg-accent focus:text-accent-foreground',\n    'focus:ring-2 focus:ring-primary/20 focus:ring-offset-2',\n    'min-h-[2.75rem] flex items-start flex-col justify-center', // Professional touch target\n    'contrast-more:hover:underline contrast-more:focus:underline'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        subtle: 'text-muted-foreground hover:text-foreground',\n        prominent: 'font-medium bg-accent/5 hover:bg-accent/10'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst NavigationMenuLink = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Link>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Link> &\n    VariantProps<typeof navigationMenuLinkVariants>\n>(({ className, variant, ...props }, ref) => (\n  <NavigationMenuPrimitive.Link\n    ref={ref}\n    className={cn(navigationMenuLinkVariants({ variant }), className)}\n    {...props}\n  />\n));\nNavigationMenuLink.displayName = NavigationMenuPrimitive.Link.displayName;\n\n// =============================================================================\n// NAVIGATION MENU VIEWPORT\n// =============================================================================\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className=\"absolute left-0 top-full flex justify-center\">\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)]',\n        'w-full overflow-hidden rounded-xl border bg-popover text-popover-foreground shadow-lg',\n        'data-[state=open]:animate-in data-[state=closed]:animate-out',\n        'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90',\n        'md:w-[var(--radix-navigation-menu-viewport-width)]',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\n\n// =============================================================================\n// NAVIGATION MENU INDICATOR\n// =============================================================================\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',\n      'data-[state=visible]:animate-in data-[state=hidden]:animate-out',\n      'data-[state=hidden]:fade-out data-[state=visible]:fade-in',\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\n\n// =============================================================================\n// ADVANCED NAVIGATION MENU\n// =============================================================================\n\nexport interface NavigationItem {\n  readonly label: string;\n  readonly href?: string;\n  readonly description?: string;\n  readonly icon?: React.ReactNode;\n  readonly children?: readonly NavigationItem[];\n  readonly onClick?: () => void;\n  readonly disabled?: boolean;\n  readonly badge?: string | number;\n}\n\nexport interface AdvancedNavigationMenuProps {\n  readonly items: readonly NavigationItem[];\n  readonly orientation?: 'horizontal' | 'vertical';\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly variant?: 'default' | 'subtle' | 'prominent';\n  readonly className?: string;\n  readonly ariaLabel?: string;\n  readonly onItemClick?: (item: NavigationItem) => void;\n}\n\nconst AdvancedNavigationMenu = React.forwardRef<\n  HTMLDivElement,\n  AdvancedNavigationMenuProps\n>(({ \n  items, \n  orientation = 'horizontal', \n  size = 'md', \n  variant = 'default',\n  className,\n  ariaLabel = 'Main navigation',\n  onItemClick,\n  ...props \n}, ref) => {\n  const handleItemClick = (item: NavigationItem) => {\n    item.onClick?.();\n    onItemClick?.(item);\n  };\n\n  return (\n    <NavigationMenu\n      ref={ref}\n      orientation={orientation}\n      size={size}\n      className={className}\n      {...props}\n    >\n      <NavigationMenuList>\n        {items.map((item, index) => (\n          <NavigationMenuItem key={`${item.label}-${index}`}>\n            {item.children ? (\n              <>\n                <NavigationMenuTrigger\n                  variant={variant}\n                  size={size}\n                  disabled={item.disabled}\n                  aria-label={item.description || item.label}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    {item.icon && (\n                      <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n                        {item.icon}\n                      </span>\n                    )}\n                    {item.label}\n                    {item.badge && (\n                      <span className=\"ml-2 rounded-full bg-primary px-2 py-0.5 text-xs text-primary-foreground\">\n                        {item.badge}\n                      </span>\n                    )}\n                  </div>\n                </NavigationMenuTrigger>\n                <NavigationMenuContent>\n                  <div className=\"grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]\">\n                    {item.children.map((child, childIndex) => (\n                      <NavigationMenuLink\n                        key={`${child.label}-${childIndex}`}\n                        href={child.href}\n                        variant={variant}\n                        onClick={() => handleItemClick(child)}\n                        className={child.disabled ? 'pointer-events-none opacity-50' : ''}\n                        aria-disabled={child.disabled}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          {child.icon && (\n                            <span className=\"mt-1 flex-shrink-0\" aria-hidden=\"true\">\n                              {child.icon}\n                            </span>\n                          )}\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"text-sm font-medium leading-none truncate\">\n                                {child.label}\n                              </div>\n                              {child.badge && (\n                                <span className=\"rounded-full bg-primary px-1.5 py-0.5 text-xs text-primary-foreground\">\n                                  {child.badge}\n                                </span>\n                              )}\n                            </div>\n                            {child.description && (\n                              <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground mt-1\">\n                                {child.description}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </NavigationMenuLink>\n                    ))}\n                  </div>\n                </NavigationMenuContent>\n              </>\n            ) : (\n              <NavigationMenuLink\n                href={item.href}\n                variant={variant}\n                onClick={() => handleItemClick(item)}\n                className={cn(\n                  'px-4 py-2 rounded-lg',\n                  item.disabled && 'pointer-events-none opacity-50'\n                )}\n                aria-disabled={item.disabled}\n                aria-label={item.description || item.label}\n              >\n                <div className=\"flex items-center gap-2\">\n                  {item.icon && (\n                    <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n                      {item.icon}\n                    </span>\n                  )}\n                  {item.label}\n                  {item.badge && (\n                    <span className=\"ml-2 rounded-full bg-primary px-2 py-0.5 text-xs text-primary-foreground\">\n                      {item.badge}\n                    </span>\n                  )}\n                </div>\n              </NavigationMenuLink>\n            )}\n          </NavigationMenuItem>\n        ))}\n      </NavigationMenuList>\n    </NavigationMenu>\n  );\n});\nAdvancedNavigationMenu.displayName = 'AdvancedNavigationMenu';\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  AdvancedNavigationMenu,\n  navigationMenuVariants,\n  navigationMenuTriggerVariants,\n  navigationMenuLinkVariants,\n};\n\nexport type { NavigationItem, AdvancedNavigationMenuProps, VariantProps };"
    }
  ]
}