{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "tooltip",
  "type": "registry:component",
  "title": "Tooltip",
  "description": "Contextual help text on hover",
  "category": "components",
  "categories": [
    "components",
    "overlay",
    "help"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/tooltip/tooltip.tsx",
      "type": "registry:component",
      "content": "/**\n * Tooltip Component - Hover Information Display\n * CLAUDE.md Compliant: Professional sizing and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Norwegian localization support\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// TOOLTIP PROVIDER\n// =============================================================================\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\n// =============================================================================\n// TOOLTIP ROOT\n// =============================================================================\n\nconst Tooltip = TooltipPrimitive.Root;\n\n// =============================================================================\n// TOOLTIP TRIGGER\n// =============================================================================\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\n// =============================================================================\n// TOOLTIP CONTENT\n// =============================================================================\n\nconst tooltipContentVariants = cva(\n  [\n    'z-50 overflow-hidden rounded-lg border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-lg',\n    'animate-in fade-in-0 zoom-in-95',\n    'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\n    'data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2',\n    'data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n    'max-w-xs break-words', // Prevent overly wide tooltips\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-popover text-popover-foreground border-border',\n        inverse: 'bg-foreground text-background border-foreground',\n        warning: 'bg-yellow-50 text-yellow-900 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-100 dark:border-yellow-800',\n        error: 'bg-red-50 text-red-900 border-red-200 dark:bg-red-900/20 dark:text-red-100 dark:border-red-800',\n        success: 'bg-green-50 text-green-900 border-green-200 dark:bg-green-900/20 dark:text-green-100 dark:border-green-800',\n        info: 'bg-blue-50 text-blue-900 border-blue-200 dark:bg-blue-900/20 dark:text-blue-100 dark:border-blue-800'\n      },\n      size: {\n        sm: 'px-2 py-1 text-xs max-w-xs',\n        md: 'px-3 py-1.5 text-sm max-w-sm',\n        lg: 'px-4 py-2 text-base max-w-md'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> &\n    VariantProps<typeof tooltipContentVariants>\n>(({ className, sideOffset = 4, variant, size, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(tooltipContentVariants({ variant, size }), className)}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\n// =============================================================================\n// TOOLTIP ARROW\n// =============================================================================\n\nconst TooltipArrow = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Arrow>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Arrow>\n>(({ className, ...props }, ref) => (\n  <TooltipPrimitive.Arrow\n    ref={ref}\n    className={cn('fill-popover', className)}\n    {...props}\n  />\n));\nTooltipArrow.displayName = TooltipPrimitive.Arrow.displayName;\n\n// =============================================================================\n// SIMPLE TOOLTIP WRAPPER\n// =============================================================================\n\nexport interface SimpleTooltipProps {\n  readonly children: React.ReactNode;\n  readonly content: React.ReactNode;\n  readonly side?: 'top' | 'right' | 'bottom' | 'left';\n  readonly align?: 'start' | 'center' | 'end';\n  readonly variant?: 'default' | 'inverse' | 'warning' | 'error' | 'success' | 'info';\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly delayDuration?: number;\n  readonly skipDelayDuration?: number;\n  readonly disableHoverableContent?: boolean;\n  readonly showArrow?: boolean;\n  readonly className?: string;\n  readonly disabled?: boolean;\n  readonly open?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n}\n\nconst SimpleTooltip = React.forwardRef<HTMLDivElement, SimpleTooltipProps>(\n  ({ \n    children,\n    content,\n    side = 'top',\n    align = 'center',\n    variant = 'default',\n    size = 'md',\n    delayDuration = 200,\n    skipDelayDuration = 300,\n    disableHoverableContent = true,\n    showArrow = true,\n    className,\n    disabled = false,\n    open,\n    onOpenChange,\n    ...props \n  }, ref) => {\n    if (disabled || !content) {\n      return <>{children}</>;\n    }\n\n    return (\n      <TooltipProvider\n        delayDuration={delayDuration}\n        skipDelayDuration={skipDelayDuration}\n        disableHoverableContent={disableHoverableContent}\n      >\n        <Tooltip\n          open={open}\n          onOpenChange={onOpenChange}\n        >\n          <TooltipTrigger asChild>\n            {children}\n          </TooltipTrigger>\n          <TooltipContent\n            ref={ref}\n            side={side}\n            align={align}\n            variant={variant}\n            size={size}\n            className={className}\n            {...props}\n          >\n            {content}\n            {showArrow && <TooltipArrow />}\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n);\nSimpleTooltip.displayName = 'SimpleTooltip';\n\n// =============================================================================\n// ADVANCED TOOLTIP WITH RICH CONTENT\n// =============================================================================\n\nexport interface RichTooltipProps extends Omit<SimpleTooltipProps, 'content'> {\n  readonly title?: string;\n  readonly description?: string;\n  readonly icon?: React.ReactNode;\n  readonly footer?: React.ReactNode;\n  readonly actions?: readonly {\n    readonly label: string;\n    readonly onClick: () => void;\n    readonly variant?: 'default' | 'destructive';\n  }[];\n  readonly maxWidth?: number;\n}\n\nconst RichTooltip = React.forwardRef<HTMLDivElement, RichTooltipProps>(\n  ({ \n    children,\n    title,\n    description,\n    icon,\n    footer,\n    actions,\n    maxWidth = 320,\n    size = 'lg',\n    variant = 'default',\n    showArrow = true,\n    ...props \n  }, ref) => {\n    const hasContent = title || description || icon || footer || actions?.length;\n\n    if (!hasContent) {\n      return <>{children}</>;\n    }\n\n    const content = (\n      <div className=\"space-y-2\" style={{ maxWidth }}>\n        {(title || icon) && (\n          <div className=\"flex items-start gap-2\">\n            {icon && (\n              <span className=\"flex-shrink-0 mt-0.5\" aria-hidden=\"true\">\n                {icon}\n              </span>\n            )}\n            {title && (\n              <div className=\"font-semibold text-sm leading-tight\">\n                {title}\n              </div>\n            )}\n          </div>\n        )}\n        \n        {description && (\n          <div className=\"text-sm text-muted-foreground leading-relaxed\">\n            {description}\n          </div>\n        )}\n        \n        {actions && actions.length > 0 && (\n          <div className=\"flex gap-2 pt-1\">\n            {actions.map((action, index) => (\n              <button\n                key={index}\n                onClick={action.onClick}\n                className={cn(\n                  'px-2 py-1 text-xs font-medium rounded transition-colors',\n                  'focus:outline-none focus:ring-1 focus:ring-primary/20',\n                  action.variant === 'destructive' \n                    ? 'bg-red-500 hover:bg-red-600 text-white'\n                    : 'bg-primary hover:bg-primary/90 text-primary-foreground'\n                )}\n              >\n                {action.label}\n              </button>\n            ))}\n          </div>\n        )}\n        \n        {footer && (\n          <div className=\"pt-2 border-t border-border/50 text-xs text-muted-foreground\">\n            {footer}\n          </div>\n        )}\n      </div>\n    );\n\n    return (\n      <SimpleTooltip\n        ref={ref}\n        content={content}\n        variant={variant}\n        size={size}\n        showArrow={showArrow}\n        {...props}\n      >\n        {children}\n      </SimpleTooltip>\n    );\n  }\n);\nRichTooltip.displayName = 'RichTooltip';\n\n// =============================================================================\n// TOOLTIP WITH KEYBOARD SHORTCUT\n// =============================================================================\n\nexport interface KeyboardTooltipProps extends Omit<SimpleTooltipProps, 'content'> {\n  readonly label: string;\n  readonly shortcut: string | string[];\n  readonly description?: string;\n}\n\nconst KeyboardTooltip = React.forwardRef<HTMLDivElement, KeyboardTooltipProps>(\n  ({ \n    children,\n    label,\n    shortcut,\n    description,\n    ...props \n  }, ref) => {\n    const shortcuts = Array.isArray(shortcut) ? shortcut : [shortcut];\n    \n    const content = (\n      <div className=\"space-y-1\">\n        <div className=\"font-medium\">{label}</div>\n        {description && (\n          <div className=\"text-xs text-muted-foreground\">{description}</div>\n        )}\n        <div className=\"flex gap-1\">\n          {shortcuts.map((key, index) => (\n            <kbd\n              key={index}\n              className=\"px-1.5 py-0.5 text-xs font-mono bg-muted rounded border border-border\"\n            >\n              {key}\n            </kbd>\n          ))}\n        </div>\n      </div>\n    );\n\n    return (\n      <SimpleTooltip\n        ref={ref}\n        content={content}\n        variant=\"inverse\"\n        size=\"md\"\n        {...props}\n      >\n        {children}\n      </SimpleTooltip>\n    );\n  }\n);\nKeyboardTooltip.displayName = 'KeyboardTooltip';\n\n// =============================================================================\n// TOOLTIP UTILITIES\n// =============================================================================\n\n/**\n * Hook to manage tooltip visibility programmatically\n */\nexport function useTooltip(defaultOpen = false) {\n  const [isOpen, setIsOpen] = React.useState(defaultOpen);\n  \n  const open = React.useCallback(() => setIsOpen(true), []);\n  const close = React.useCallback(() => setIsOpen(false), []);\n  const toggle = React.useCallback(() => setIsOpen(prev => !prev), []);\n  \n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    setIsOpen\n  };\n}\n\n/**\n * Hook for accessible tooltip management\n */\nexport function useAccessibleTooltip(id?: string) {\n  const generatedId = React.useId();\n  const tooltipId = id || `tooltip-${generatedId}`;\n  \n  return {\n    tooltipId,\n    triggerProps: {\n      'aria-describedby': tooltipId\n    },\n    contentProps: {\n      id: tooltipId,\n      role: 'tooltip'\n    }\n  };\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipProvider,\n  TooltipArrow,\n  SimpleTooltip,\n  RichTooltip,\n  KeyboardTooltip,\n  tooltipContentVariants,\n};\n\nexport type { \n  SimpleTooltipProps, \n  RichTooltipProps, \n  KeyboardTooltipProps,\n  VariantProps \n};"
    }
  ]
}