{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "pagination",
  "type": "registry:component",
  "title": "Pagination",
  "description": "Navigate through paginated content",
  "category": "components",
  "categories": [
    "components",
    "navigation"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils",
    "button"
  ],
  "files": [
    {
      "path": "components/pagination/pagination.tsx",
      "type": "registry:component",
      "content": "/**\n * Pagination Component - Data Pagination Controls\n * CLAUDE.md Compliant: Professional sizing and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Norwegian localization support\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronLeftIcon, ChevronRightIcon, DotsHorizontalIcon } from '@radix-ui/react-icons';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// PAGINATION CONTAINER\n// =============================================================================\n\nconst paginationVariants = cva(\n  [\n    'mx-auto flex w-full justify-center',\n    'focus-within:outline-none'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\nexport interface PaginationProps extends \n  React.HTMLAttributes<HTMLElement>,\n  VariantProps<typeof paginationVariants> {\n  readonly ariaLabel?: string;\n}\n\nconst Pagination = React.forwardRef<HTMLElement, PaginationProps>(\n  ({ className, size, ariaLabel, ...props }, ref) => (\n    <nav\n      ref={ref}\n      role=\"navigation\"\n      aria-label={ariaLabel || 'pagination'}\n      className={cn(paginationVariants({ size }), className)}\n      {...props}\n    />\n  )\n);\nPagination.displayName = 'Pagination';\n\n// =============================================================================\n// PAGINATION CONTENT\n// =============================================================================\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.HTMLAttributes<HTMLUListElement>\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn('flex flex-row items-center gap-1', className)}\n    {...props}\n  />\n));\nPaginationContent.displayName = 'PaginationContent';\n\n// =============================================================================\n// PAGINATION ITEM\n// =============================================================================\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.HTMLAttributes<HTMLLIElement>\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn('', className)} {...props} />\n));\nPaginationItem.displayName = 'PaginationItem';\n\n// =============================================================================\n// PAGINATION LINK\n// =============================================================================\n\nconst paginationLinkVariants = cva(\n  [\n    'inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium',\n    'transition-colors focus-visible:outline-none',\n    'focus:ring-2 focus:ring-primary/20 focus:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'border border-input bg-background shadow-sm',\n    'hover:bg-accent hover:text-accent-foreground',\n    'min-h-[2.75rem]', // Professional touch target (44px)\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-accent hover:text-accent-foreground',\n        ghost: 'border-transparent shadow-none hover:bg-accent hover:text-accent-foreground',\n        outline: 'border-2 border-input hover:bg-accent hover:text-accent-foreground'\n      },\n      size: {\n        sm: 'h-8 px-3 text-xs min-h-[2rem]',\n        md: 'h-10 px-4 text-sm min-h-[2.75rem]',\n        lg: 'h-12 px-6 text-base min-h-[3rem]'\n      },\n      isActive: {\n        true: 'bg-primary text-primary-foreground hover:bg-primary/90 border-primary',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      isActive: false\n    }\n  }\n);\n\nexport interface PaginationLinkProps extends \n  React.AnchorHTMLAttributes<HTMLAnchorElement>,\n  VariantProps<typeof paginationLinkVariants> {\n  readonly isActive?: boolean;\n}\n\nconst PaginationLink = React.forwardRef<HTMLAnchorElement, PaginationLinkProps>(\n  ({ className, isActive, size, variant, children, ...props }, ref) => (\n    <a\n      ref={ref}\n      aria-current={isActive ? 'page' : undefined}\n      className={cn(paginationLinkVariants({ variant, size, isActive }), className)}\n      {...props}\n    >\n      {children}\n    </a>\n  )\n);\nPaginationLink.displayName = 'PaginationLink';\n\n// =============================================================================\n// PAGINATION PREVIOUS\n// =============================================================================\n\nconst PaginationPrevious = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<typeof PaginationLink>\n>(({ className, children, ...props }, ref) => (\n  <PaginationLink\n    ref={ref}\n    aria-label=\"Go to previous page\"\n    size={props.size || 'md'}\n    className={cn('gap-1 pl-2.5', className)}\n    {...props}\n  >\n    <ChevronLeftIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n    <span>{children || 'Previous'}</span>\n  </PaginationLink>\n));\nPaginationPrevious.displayName = 'PaginationPrevious';\n\n// =============================================================================\n// PAGINATION NEXT\n// =============================================================================\n\nconst PaginationNext = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<typeof PaginationLink>\n>(({ className, children, ...props }, ref) => (\n  <PaginationLink\n    ref={ref}\n    aria-label=\"Go to next page\"\n    size={props.size || 'md'}\n    className={cn('gap-1 pr-2.5', className)}\n    {...props}\n  >\n    <span>{children || 'Next'}</span>\n    <ChevronRightIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n  </PaginationLink>\n));\nPaginationNext.displayName = 'PaginationNext';\n\n// =============================================================================\n// PAGINATION ELLIPSIS\n// =============================================================================\n\nconst PaginationEllipsis = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    aria-hidden=\"true\"\n    className={cn(\n      'flex h-10 w-10 items-center justify-center min-h-[2.75rem]',\n      className\n    )}\n    {...props}\n  >\n    <DotsHorizontalIcon className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n));\nPaginationEllipsis.displayName = 'PaginationEllipsis';\n\n// =============================================================================\n// ADVANCED PAGINATION\n// =============================================================================\n\nexport interface AdvancedPaginationProps {\n  readonly currentPage: number;\n  readonly totalPages: number;\n  readonly onPageChange: (page: number) => void;\n  readonly showFirstLast?: boolean;\n  readonly showPreviousNext?: boolean;\n  readonly maxVisiblePages?: number;\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly variant?: 'default' | 'ghost' | 'outline';\n  readonly className?: string;\n  readonly disabled?: boolean;\n  // Norwegian localization\n  readonly labels?: {\n    readonly previous?: string;\n    readonly next?: string;\n    readonly first?: string;\n    readonly last?: string;\n    readonly page?: string;\n    readonly of?: string;\n  };\n  readonly ariaLabel?: string;\n}\n\nconst AdvancedPagination = React.forwardRef<HTMLElement, AdvancedPaginationProps>(\n  ({ \n    currentPage,\n    totalPages,\n    onPageChange,\n    showFirstLast = false,\n    showPreviousNext = true,\n    maxVisiblePages = 7,\n    size = 'md',\n    variant = 'default',\n    className,\n    disabled = false,\n    labels = {\n      previous: 'Forrige',\n      next: 'Neste',\n      first: 'FÃ¸rste',\n      last: 'Siste',\n      page: 'Side',\n      of: 'av'\n    },\n    ariaLabel = 'Navigasjon for paginering',\n    ...props \n  }, ref) => {\n    // Calculate visible page numbers\n    const getVisiblePages = (): (number | 'ellipsis')[] => {\n      if (totalPages <= maxVisiblePages) {\n        return Array.from({ length: totalPages }, (_, i) => i + 1);\n      }\n\n      const pages: (number | 'ellipsis')[] = [];\n      const sidePages = Math.floor((maxVisiblePages - 3) / 2); // Reserve space for first, last, and ellipsis\n\n      if (currentPage <= sidePages + 2) {\n        // Show pages from start\n        for (let i = 1; i <= maxVisiblePages - 2; i++) {\n          pages.push(i);\n        }\n        pages.push('ellipsis');\n        pages.push(totalPages);\n      } else if (currentPage >= totalPages - sidePages - 1) {\n        // Show pages from end\n        pages.push(1);\n        pages.push('ellipsis');\n        for (let i = totalPages - (maxVisiblePages - 3); i <= totalPages; i++) {\n          pages.push(i);\n        }\n      } else {\n        // Show pages around current\n        pages.push(1);\n        pages.push('ellipsis');\n        for (let i = currentPage - sidePages; i <= currentPage + sidePages; i++) {\n          pages.push(i);\n        }\n        pages.push('ellipsis');\n        pages.push(totalPages);\n      }\n\n      return pages;\n    };\n\n    const visiblePages = getVisiblePages();\n    const canGoPrevious = currentPage > 1 && !disabled;\n    const canGoNext = currentPage < totalPages && !disabled;\n\n    const handlePageClick = (page: number, event: React.MouseEvent) => {\n      event.preventDefault();\n      if (!disabled && page !== currentPage && page >= 1 && page <= totalPages) {\n        onPageChange(page);\n      }\n    };\n\n    const handleKeyDown = (page: number, event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault();\n        handlePageClick(page, event as any);\n      }\n    };\n\n    return (\n      <Pagination\n        ref={ref}\n        size={size}\n        className={className}\n        ariaLabel={ariaLabel}\n        {...props}\n      >\n        <PaginationContent>\n          {/* First Page */}\n          {showFirstLast && currentPage > 1 && (\n            <PaginationItem>\n              <PaginationLink\n                href=\"#\"\n                size={size}\n                variant={variant}\n                onClick={(e) => handlePageClick(1, e)}\n                onKeyDown={(e) => handleKeyDown(1, e)}\n                aria-label={`${labels.page} 1`}\n                className={disabled ? 'pointer-events-none opacity-50' : ''}\n              >\n                {labels.first}\n              </PaginationLink>\n            </PaginationItem>\n          )}\n\n          {/* Previous */}\n          {showPreviousNext && (\n            <PaginationItem>\n              <PaginationPrevious\n                href=\"#\"\n                size={size}\n                variant={variant}\n                onClick={(e) => handlePageClick(currentPage - 1, e)}\n                onKeyDown={(e) => handleKeyDown(currentPage - 1, e)}\n                className={!canGoPrevious ? 'pointer-events-none opacity-50' : ''}\n                aria-disabled={!canGoPrevious}\n              >\n                {labels.previous}\n              </PaginationPrevious>\n            </PaginationItem>\n          )}\n\n          {/* Page Numbers */}\n          {visiblePages.map((page, index) => (\n            <PaginationItem key={`page-${page}-${index}`}>\n              {page === 'ellipsis' ? (\n                <PaginationEllipsis />\n              ) : (\n                <PaginationLink\n                  href=\"#\"\n                  size={size}\n                  variant={variant}\n                  isActive={page === currentPage}\n                  onClick={(e) => handlePageClick(page as number, e)}\n                  onKeyDown={(e) => handleKeyDown(page as number, e)}\n                  aria-label={`${labels.page} ${page}`}\n                  aria-current={page === currentPage ? 'page' : undefined}\n                  className={disabled ? 'pointer-events-none opacity-50' : ''}\n                >\n                  {page}\n                </PaginationLink>\n              )}\n            </PaginationItem>\n          ))}\n\n          {/* Next */}\n          {showPreviousNext && (\n            <PaginationItem>\n              <PaginationNext\n                href=\"#\"\n                size={size}\n                variant={variant}\n                onClick={(e) => handlePageClick(currentPage + 1, e)}\n                onKeyDown={(e) => handleKeyDown(currentPage + 1, e)}\n                className={!canGoNext ? 'pointer-events-none opacity-50' : ''}\n                aria-disabled={!canGoNext}\n              >\n                {labels.next}\n              </PaginationNext>\n            </PaginationItem>\n          )}\n\n          {/* Last Page */}\n          {showFirstLast && currentPage < totalPages && (\n            <PaginationItem>\n              <PaginationLink\n                href=\"#\"\n                size={size}\n                variant={variant}\n                onClick={(e) => handlePageClick(totalPages, e)}\n                onKeyDown={(e) => handleKeyDown(totalPages, e)}\n                aria-label={`${labels.page} ${totalPages}`}\n                className={disabled ? 'pointer-events-none opacity-50' : ''}\n              >\n                {labels.last}\n              </PaginationLink>\n            </PaginationItem>\n          )}\n        </PaginationContent>\n\n        {/* Screen reader summary */}\n        <div className=\"sr-only\" aria-live=\"polite\">\n          {labels.page} {currentPage} {labels.of} {totalPages}\n        </div>\n      </Pagination>\n    );\n  }\n);\nAdvancedPagination.displayName = 'AdvancedPagination';\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n  AdvancedPagination,\n  paginationVariants,\n  paginationLinkVariants,\n};\n\nexport type { VariantProps };"
    }
  ]
}