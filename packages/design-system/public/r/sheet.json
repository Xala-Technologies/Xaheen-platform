{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "sheet",
  "type": "registry:component",
  "title": "Sheet",
  "description": "Slide-out panels and drawers",
  "category": "components",
  "categories": [
    "components",
    "overlay",
    "navigation"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-dialog",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/sheet/sheet.tsx",
      "type": "registry:component",
      "content": "import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { createPortal } from 'react-dom';\nimport { tokens } from '../../core/universal-tokens';\n\nconst overlayVariants = cva(\n  'fixed inset-0 z-50 bg-black/50 backdrop-blur-sm transition-opacity duration-300',\n  {\n    variants: {\n      state: {\n        closed: 'opacity-0 pointer-events-none',\n        open: 'opacity-100',\n      },\n    },\n  }\n);\n\nconst sheetVariants = cva(\n  'fixed z-50 bg-white shadow-xl transition-transform duration-300 ease-out',\n  {\n    variants: {\n      side: {\n        top: 'inset-x-0 top-0 rounded-b-xl border-b translate-y-[-100%]',\n        bottom: 'inset-x-0 bottom-0 rounded-t-xl border-t translate-y-full',\n        left: 'inset-y-0 left-0 h-full w-3/4 sm:max-w-sm rounded-r-xl border-r translate-x-[-100%]',\n        right: 'inset-y-0 right-0 h-full w-3/4 sm:max-w-sm rounded-l-xl border-l translate-x-full',\n      },\n      size: {\n        sm: '',\n        md: '',\n        lg: '',\n        xl: '',\n        full: '',\n      },\n      state: {\n        closed: '',\n        open: 'translate-x-0 translate-y-0',\n      },\n    },\n    compoundVariants: [\n      // Top/Bottom size variants\n      {\n        side: ['top', 'bottom'],\n        size: 'sm',\n        className: 'max-h-[33%]',\n      },\n      {\n        side: ['top', 'bottom'],\n        size: 'md',\n        className: 'max-h-[50%]',\n      },\n      {\n        side: ['top', 'bottom'],\n        size: 'lg',\n        className: 'max-h-[75%]',\n      },\n      {\n        side: ['top', 'bottom'],\n        size: 'xl',\n        className: 'max-h-[90%]',\n      },\n      {\n        side: ['top', 'bottom'],\n        size: 'full',\n        className: 'h-full',\n      },\n      // Left/Right size variants\n      {\n        side: ['left', 'right'],\n        size: 'sm',\n        className: 'max-w-xs',\n      },\n      {\n        side: ['left', 'right'],\n        size: 'md',\n        className: 'max-w-sm',\n      },\n      {\n        side: ['left', 'right'],\n        size: 'lg',\n        className: 'max-w-md',\n      },\n      {\n        side: ['left', 'right'],\n        size: 'xl',\n        className: 'max-w-lg',\n      },\n      {\n        side: ['left', 'right'],\n        size: 'full',\n        className: 'w-full',\n      },\n    ],\n    defaultVariants: {\n      side: 'right',\n      size: 'md',\n      state: 'closed',\n    },\n  }\n);\n\ninterface SheetProps extends VariantProps<typeof sheetVariants> {\n  readonly children: React.ReactNode;\n  readonly open?: boolean;\n  readonly defaultOpen?: boolean;\n  readonly onOpenChange?: (open: boolean) => void;\n  readonly modal?: boolean;\n  readonly className?: string;\n  readonly overlayClassName?: string;\n  readonly closeOnOverlayClick?: boolean;\n  readonly closeOnEscape?: boolean;\n  readonly preventScroll?: boolean;\n}\n\nexport const Sheet = ({\n  children,\n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n  modal = true,\n  className,\n  overlayClassName,\n  side,\n  size,\n  closeOnOverlayClick = true,\n  closeOnEscape = true,\n  preventScroll = true,\n}: SheetProps): JSX.Element => {\n  const [uncontrolledOpen, setUncontrolledOpen] = useState(defaultOpen);\n  const isOpen = controlledOpen !== undefined ? controlledOpen : uncontrolledOpen;\n  const sheetRef = useRef<HTMLDivElement>(null);\n  const previousActiveElement = useRef<Element | null>(null);\n\n  const handleOpenChange = useCallback((newOpen: boolean) => {\n    if (controlledOpen === undefined) {\n      setUncontrolledOpen(newOpen);\n    }\n    onOpenChange?.(newOpen);\n  }, [controlledOpen, onOpenChange]);\n\n  const handleClose = useCallback(() => {\n    handleOpenChange(false);\n  }, [handleOpenChange]);\n\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    if (event.key === 'Escape' && closeOnEscape && isOpen) {\n      handleClose();\n    }\n  }, [isOpen, closeOnEscape, handleClose]);\n\n  const handleOverlayClick = useCallback((event: React.MouseEvent) => {\n    if (closeOnOverlayClick && event.target === event.currentTarget) {\n      handleClose();\n    }\n  }, [closeOnOverlayClick, handleClose]);\n\n  const handleFocusTrap = useCallback((event: KeyboardEvent) => {\n    if (!isOpen || !sheetRef.current) return;\n\n    const focusableElements = sheetRef.current.querySelectorAll(\n      'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n    );\n\n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n    if (event.key === 'Tab') {\n      if (event.shiftKey) {\n        if (document.activeElement === firstElement) {\n          event.preventDefault();\n          lastElement?.focus();\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          event.preventDefault();\n          firstElement?.focus();\n        }\n      }\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      previousActiveElement.current = document.activeElement;\n      \n      if (preventScroll) {\n        document.body.style.overflow = 'hidden';\n      }\n\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keydown', handleFocusTrap);\n\n      // Focus first focusable element\n      setTimeout(() => {\n        const firstFocusable = sheetRef.current?.querySelector(\n          'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n        ) as HTMLElement;\n        firstFocusable?.focus();\n      }, 100);\n\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keydown', handleFocusTrap);\n        \n        if (preventScroll) {\n          document.body.style.overflow = '';\n        }\n\n        // Restore focus to previous element\n        if (previousActiveElement.current instanceof HTMLElement) {\n          previousActiveElement.current.focus();\n        }\n      };\n    }\n  }, [isOpen, handleKeyDown, handleFocusTrap, preventScroll]);\n\n  if (!isOpen) return <>{children}</>;\n\n  return (\n    <>\n      {children}\n      {createPortal(\n        <div\n          className={overlayVariants({ state: isOpen ? 'open' : 'closed', className: overlayClassName })}\n          onClick={handleOverlayClick}\n          aria-hidden=\"true\"\n        >\n          <div\n            ref={sheetRef}\n            role={modal ? 'dialog' : undefined}\n            aria-modal={modal}\n            className={sheetVariants({ \n              side, \n              size, \n              state: isOpen ? 'open' : 'closed', \n              className \n            })}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex flex-col h-full\">\n              {children}\n            </div>\n          </div>\n        </div>,\n        document.body\n      )}\n    </>\n  );\n};\n\ninterface SheetTriggerProps {\n  readonly children: React.ReactNode;\n  readonly asChild?: boolean;\n  readonly className?: string;\n  readonly onClick?: () => void;\n}\n\nexport const SheetTrigger = ({ \n  children, \n  asChild, \n  className,\n  onClick \n}: SheetTriggerProps): JSX.Element => {\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      onClick: (e: React.MouseEvent) => {\n        children.props.onClick?.(e);\n        onClick?.();\n      },\n    });\n  }\n\n  return (\n    <button\n      onClick={onClick}\n      className={`inline-flex items-center justify-center h-12 px-6 rounded-lg bg-blue-600 text-white font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors shadow-md ${className || ''}`}\n    >\n      {children}\n    </button>\n  );\n};\n\ninterface SheetContentProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n  readonly side?: 'top' | 'bottom' | 'left' | 'right';\n  readonly size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n}\n\nexport const SheetContent = ({ \n  children, \n  className,\n  side = 'right',\n  size = 'md'\n}: SheetContentProps): JSX.Element => {\n  return (\n    <div className={`flex flex-col h-full ${className || ''}`}>\n      {children}\n    </div>\n  );\n};\n\ninterface SheetHeaderProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n}\n\nexport const SheetHeader = ({ children, className }: SheetHeaderProps): JSX.Element => {\n  return (\n    <div className={`px-6 py-4 border-b border-gray-200 ${className || ''}`}>\n      {children}\n    </div>\n  );\n};\n\ninterface SheetTitleProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n}\n\nexport const SheetTitle = ({ children, className }: SheetTitleProps): JSX.Element => {\n  return (\n    <h2 className={`text-xl font-semibold text-gray-900 ${className || ''}`}>\n      {children}\n    </h2>\n  );\n};\n\ninterface SheetDescriptionProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n}\n\nexport const SheetDescription = ({ children, className }: SheetDescriptionProps): JSX.Element => {\n  return (\n    <p className={`text-sm text-gray-600 mt-2 ${className || ''}`}>\n      {children}\n    </p>\n  );\n};\n\ninterface SheetBodyProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n}\n\nexport const SheetBody = ({ children, className }: SheetBodyProps): JSX.Element => {\n  return (\n    <div className={`flex-1 overflow-y-auto px-6 py-4 ${className || ''}`}>\n      {children}\n    </div>\n  );\n};\n\ninterface SheetFooterProps {\n  readonly children: React.ReactNode;\n  readonly className?: string;\n}\n\nexport const SheetFooter = ({ children, className }: SheetFooterProps): JSX.Element => {\n  return (\n    <div className={`px-6 py-4 border-t border-gray-200 flex items-center justify-end gap-4 ${className || ''}`}>\n      {children}\n    </div>\n  );\n};\n\ninterface SheetCloseProps {\n  readonly children?: React.ReactNode;\n  readonly className?: string;\n  readonly onClick?: () => void;\n  readonly asChild?: boolean;\n}\n\nexport const SheetClose = ({ \n  children, \n  className, \n  onClick,\n  asChild \n}: SheetCloseProps): JSX.Element => {\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      onClick: (e: React.MouseEvent) => {\n        children.props.onClick?.(e);\n        onClick?.();\n      },\n    });\n  }\n\n  return (\n    <button\n      onClick={onClick}\n      className={`h-12 px-6 rounded-lg border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors ${className || ''}`}\n      aria-label={children ? undefined : 'Close sheet'}\n    >\n      {children || (\n        <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      )}\n    </button>\n  );\n};"
    }
  ]
}