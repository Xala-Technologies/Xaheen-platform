{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "breadcrumb",
  "type": "registry:component",
  "title": "Breadcrumb",
  "description": "Navigation breadcrumbs showing current location",
  "category": "components",
  "categories": [
    "components",
    "navigation"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/breadcrumb/breadcrumb.tsx",
      "type": "registry:component",
      "content": "/**\n * Breadcrumb Component - Navigation Path Display\n * CLAUDE.md Compliant: Professional sizing and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Norwegian localization support\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronRightIcon } from '@radix-ui/react-icons';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// BREADCRUMB CONTAINER\n// =============================================================================\n\nconst breadcrumbVariants = cva(\n  [\n    'flex items-center space-x-1 text-sm text-muted-foreground',\n    'focus-within:outline-none',\n    'contrast-more:text-foreground'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-xs h-8 space-x-1',\n        md: 'text-sm h-10 space-x-2',\n        lg: 'text-base h-12 space-x-3'\n      },\n      variant: {\n        default: '',\n        subtle: 'text-muted-foreground/70',\n        prominent: 'text-foreground font-medium'\n      }\n    },\n    defaultVariants: {\n      size: 'md',\n      variant: 'default'\n    }\n  }\n);\n\nexport interface BreadcrumbProps extends\n  React.HTMLAttributes<HTMLElement>,\n  VariantProps<typeof breadcrumbVariants> {\n  readonly separator?: React.ReactNode;\n  readonly ariaLabel?: string;\n}\n\nconst Breadcrumb = React.forwardRef<HTMLElement, BreadcrumbProps>(\n  ({ className, size, variant, separator, ariaLabel, ...props }, ref) => {\n    return (\n      <nav\n        ref={ref}\n        aria-label={ariaLabel || 'Breadcrumb'}\n        className={cn(breadcrumbVariants({ size, variant }), className)}\n        {...props}\n      />\n    );\n  }\n);\nBreadcrumb.displayName = 'Breadcrumb';\n\n// =============================================================================\n// BREADCRUMB LIST\n// =============================================================================\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.HTMLAttributes<HTMLOListElement>\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',\n      className\n    )}\n    {...props}\n  />\n));\nBreadcrumbList.displayName = 'BreadcrumbList';\n\n// =============================================================================\n// BREADCRUMB ITEM\n// =============================================================================\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.HTMLAttributes<HTMLLIElement>\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn('inline-flex items-center gap-1.5', className)}\n    {...props}\n  />\n));\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n\n// =============================================================================\n// BREADCRUMB LINK\n// =============================================================================\n\nconst breadcrumbLinkVariants = cva(\n  [\n    'inline-flex items-center gap-1.5 transition-colors',\n    'hover:text-foreground focus:outline-none',\n    'focus:ring-2 focus:ring-primary/20 focus:ring-offset-2 rounded-sm',\n    'underline-offset-4 hover:underline',\n    'min-h-[2.75rem] px-1 -mx-1 rounded-sm', // Professional touch target\n    'contrast-more:hover:underline contrast-more:focus:underline'\n  ],\n  {\n    variants: {\n      isActive: {\n        true: 'text-foreground font-medium cursor-default hover:no-underline',\n        false: 'text-muted-foreground hover:text-foreground cursor-pointer'\n      }\n    },\n    defaultVariants: {\n      isActive: false\n    }\n  }\n);\n\nexport interface BreadcrumbLinkProps extends\n  React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  readonly asChild?: boolean;\n  readonly isActive?: boolean;\n}\n\nconst BreadcrumbLink = React.forwardRef<HTMLAnchorElement, BreadcrumbLinkProps>(\n  ({ className, asChild = false, isActive = false, children, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'a';\n\n    return (\n      <Comp\n        ref={ref}\n        className={cn(breadcrumbLinkVariants({ isActive }), className)}\n        aria-current={isActive ? 'page' : undefined}\n        {...props}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\nBreadcrumbLink.displayName = 'BreadcrumbLink';\n\n// =============================================================================\n// BREADCRUMB PAGE (CURRENT PAGE)\n// =============================================================================\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\n      'font-medium text-foreground min-h-[2.75rem] flex items-center px-1',\n      className\n    )}\n    {...props}\n  />\n));\nBreadcrumbPage.displayName = 'BreadcrumbPage';\n\n// =============================================================================\n// BREADCRUMB SEPARATOR\n// =============================================================================\n\nconst BreadcrumbSeparator = React.forwardRef<\n  HTMLLIElement,\n  React.HTMLAttributes<HTMLLIElement> & {\n    readonly children?: React.ReactNode;\n  }\n>(({ children, className, ...props }, ref) => (\n  <li\n    ref={ref}\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn('[&>svg]:size-3.5 text-muted-foreground/70', className)}\n    {...props}\n  >\n    {children ?? <ChevronRightIcon />}\n  </li>\n));\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\n\n// =============================================================================\n// BREADCRUMB ELLIPSIS\n// =============================================================================\n\nconst BreadcrumbEllipsis = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\n      'flex h-9 w-9 items-center justify-center text-muted-foreground/70',\n      className\n    )}\n    {...props}\n  >\n    <span className=\"sr-only\">More</span>\n    <span aria-hidden=\"true\">â€¦</span>\n  </span>\n));\nBreadcrumbEllipsis.displayName = 'BreadcrumbEllipsis';\n\n// =============================================================================\n// ADVANCED BREADCRUMB WITH AUTO-COLLAPSE\n// =============================================================================\n\nexport interface AdvancedBreadcrumbProps {\n  readonly items: readonly {\n    readonly label: string;\n    readonly href?: string;\n    readonly isActive?: boolean;\n    readonly onClick?: () => void;\n  }[];\n  readonly maxItems?: number;\n  readonly separator?: React.ReactNode;\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly variant?: 'default' | 'subtle' | 'prominent';\n  readonly className?: string;\n  readonly homeLabel?: string; // Norwegian localization\n  readonly moreLabel?: string; // Norwegian localization\n  readonly ariaLabel?: string;\n}\n\nconst AdvancedBreadcrumb = React.forwardRef<HTMLElement, AdvancedBreadcrumbProps>(\n  ({ \n    items, \n    maxItems = 5, \n    separator,\n    size = 'md',\n    variant = 'default',\n    className,\n    homeLabel = 'Hjem', // Norwegian default\n    moreLabel = 'Mer', // Norwegian default\n    ariaLabel = 'Navigasjonssti',\n    ...props \n  }, ref) => {\n    const shouldCollapse = items.length > maxItems;\n    const displayItems = shouldCollapse \n      ? [\n          items[0], // Always show first item\n          { label: '...', href: undefined, isActive: false }, // Ellipsis\n          ...items.slice(-(maxItems - 2)) // Show last items\n        ]\n      : items;\n\n    return (\n      <Breadcrumb\n        ref={ref}\n        size={size}\n        variant={variant}\n        className={className}\n        ariaLabel={ariaLabel}\n        {...props}\n      >\n        <BreadcrumbList>\n          {displayItems.map((item, index) => (\n            <React.Fragment key={`${item.label}-${index}`}>\n              <BreadcrumbItem>\n                {item.label === '...' ? (\n                  <BreadcrumbEllipsis />\n                ) : item.isActive ? (\n                  <BreadcrumbPage>{item.label}</BreadcrumbPage>\n                ) : (\n                  <BreadcrumbLink\n                    href={item.href}\n                    onClick={item.onClick}\n                    aria-label={item.label}\n                  >\n                    {item.label}\n                  </BreadcrumbLink>\n                )}\n              </BreadcrumbItem>\n              \n              {index < displayItems.length - 1 && (\n                <BreadcrumbSeparator>\n                  {separator}\n                </BreadcrumbSeparator>\n              )}\n            </React.Fragment>\n          ))}\n        </BreadcrumbList>\n      </Breadcrumb>\n    );\n  }\n);\nAdvancedBreadcrumb.displayName = 'AdvancedBreadcrumb';\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n  AdvancedBreadcrumb,\n  breadcrumbVariants,\n  breadcrumbLinkVariants\n};\n\nexport type { VariantProps };"
    }
  ]
}