{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "combobox",
  "type": "registry:component",
  "title": "Combobox",
  "description": "Searchable select with autocomplete",
  "category": "components",
  "categories": [
    "components",
    "form",
    "input"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "registryDependencies": [
    "utils",
    "button",
    "popover"
  ],
  "files": [
    {
      "path": "components/combobox/combobox.tsx",
      "type": "registry:component",
      "content": "/**\n * Combobox Component - Professional searchable select input\n * CLAUDE.md Compliant: Professional sizing with h-14+ input height\n * WCAG AAA: Full keyboard support, screen reader compatibility, and proper labeling\n * Universal tokens integration for consistent theming\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst comboboxVariants = cva(\n  [\n    'relative w-full'\n  ]\n);\n\nconst comboboxTriggerVariants = cva(\n  [\n    'flex w-full items-center justify-between',\n    'font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background',\n    'border-2 border-input',\n    'transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary',\n    'cursor-pointer'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600',\n        nsmRestricted: 'border-l-4 border-l-yellow-600',\n        nsmConfidential: 'border-l-4 border-l-red-600',\n        nsmSecret: 'border-l-4 border-l-gray-800'\n      },\n      size: {\n        md: 'h-12 px-4 py-3 text-base rounded-lg',      // 48px height (minimum)\n        lg: 'h-14 px-5 py-4 text-lg rounded-lg',        // 56px height (professional)\n        xl: 'h-16 px-6 py-5 text-xl rounded-xl',        // 64px height (premium)\n        '2xl': 'h-18 px-8 py-6 text-2xl rounded-xl'     // 72px height (luxury)\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'lg'\n    }\n  }\n);\n\nconst comboboxSearchVariants = cva(\n  [\n    'w-full bg-transparent border-none outline-none',\n    'text-foreground placeholder:text-muted-foreground'\n  ],\n  {\n    variants: {\n      size: {\n        md: 'text-base',\n        lg: 'text-lg', \n        xl: 'text-xl',\n        '2xl': 'text-2xl'\n      }\n    },\n    defaultVariants: {\n      size: 'lg'\n    }\n  }\n);\n\nconst comboboxContentVariants = cva(\n  [\n    'absolute z-50 w-full mt-1 bg-background border-2 border-input rounded-lg shadow-lg',\n    'max-h-60 overflow-auto',\n    'data-[state=closed]:opacity-0 data-[state=closed]:pointer-events-none',\n    'data-[state=open]:opacity-100',\n    'transition-opacity duration-200',\n    'py-1'\n  ]\n);\n\nconst comboboxItemVariants = cva(\n  [\n    'relative flex w-full cursor-pointer items-center',\n    'text-foreground font-medium',\n    'hover:bg-accent hover:text-accent-foreground',\n    'focus:bg-accent focus:text-accent-foreground focus:outline-none',\n    'aria-selected:bg-primary aria-selected:text-primary-foreground',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'transition-colors duration-150'\n  ],\n  {\n    variants: {\n      size: {\n        md: 'px-4 py-2 text-base min-h-10',     // 40px minimum\n        lg: 'px-5 py-3 text-lg min-h-12',      // 48px minimum  \n        xl: 'px-6 py-4 text-xl min-h-14',      // 56px minimum\n        '2xl': 'px-8 py-5 text-2xl min-h-16'   // 64px minimum\n      }\n    },\n    defaultVariants: {\n      size: 'lg'\n    }\n  }\n);\n\nexport interface ComboboxOption {\n  readonly value: string;\n  readonly label: string;\n  readonly disabled?: boolean;\n  readonly description?: string;\n}\n\nexport interface ComboboxProps extends \n  Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange'>,\n  VariantProps<typeof comboboxVariants> {\n  readonly options: readonly ComboboxOption[];\n  readonly value?: string;\n  readonly defaultValue?: string;\n  readonly onValueChange?: (value: string) => void;\n  readonly placeholder?: string;\n  readonly searchPlaceholder?: string;\n  readonly disabled?: boolean;\n  readonly required?: boolean;\n  readonly name?: string;\n  readonly form?: string;\n  readonly error?: boolean;\n  readonly success?: boolean;\n  readonly warning?: boolean;\n  readonly helperText?: string;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly variant?: 'default' | 'error' | 'success' | 'warning';\n  readonly size?: 'md' | 'lg' | 'xl' | '2xl';\n  readonly emptyMessage?: string;\n  readonly searchable?: boolean;\n}\n\nexport const Combobox = React.forwardRef<HTMLDivElement, ComboboxProps>(\n  ({\n    className,\n    options = [],\n    value,\n    defaultValue,\n    onValueChange,\n    placeholder = 'Select an option...',\n    searchPlaceholder = 'Search options...',\n    disabled = false,\n    required = false,\n    name,\n    form,\n    error,\n    success,\n    warning,\n    helperText,\n    nsmClassification,\n    variant,\n    size = 'lg',\n    emptyMessage = 'No options found',\n    searchable = true,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    ...props\n  }, ref) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [searchValue, setSearchValue] = React.useState('');\n    const [internalValue, setInternalValue] = React.useState(defaultValue || '');\n    const [focusedIndex, setFocusedIndex] = React.useState(-1);\n    \n    const triggerRef = React.useRef<HTMLButtonElement>(null);\n    const searchRef = React.useRef<HTMLInputElement>(null);\n    \n    const isControlled = value !== undefined;\n    const currentValue = isControlled ? value : internalValue;\n    \n    // Determine variant based on state\n    const stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : stateVariant;\n    \n    // Generate unique IDs\n    const comboboxId = React.useId();\n    const helperTextId = helperText ? `${comboboxId}-helper` : undefined;\n    const listboxId = `${comboboxId}-listbox`;\n    const combinedAriaDescribedBy = [ariaDescribedBy, helperTextId]\n      .filter(Boolean)\n      .join(' ') || undefined;\n\n    // Filter options based on search\n    const filteredOptions = React.useMemo(() => {\n      if (!searchable || !searchValue.trim()) {\n        return options;\n      }\n      \n      return options.filter(option =>\n        option.label.toLowerCase().includes(searchValue.toLowerCase()) ||\n        option.value.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    }, [options, searchValue, searchable]);\n\n    // Get current option\n    const selectedOption = options.find(option => option.value === currentValue);\n\n    // Handle value change\n    const handleValueChange = React.useCallback((newValue: string) => {\n      if (disabled) return;\n      \n      try {\n        if (!isControlled) {\n          setInternalValue(newValue);\n        }\n        \n        onValueChange?.(newValue);\n        setIsOpen(false);\n        setSearchValue('');\n        setFocusedIndex(-1);\n        \n        // Return focus to trigger\n        triggerRef.current?.focus();\n      } catch (error) {\n        console.error('Combobox value change error:', error);\n      }\n    }, [disabled, isControlled, onValueChange]);\n\n    // Handle keyboard navigation\n    const handleKeyDown = React.useCallback((event: React.KeyboardEvent) => {\n      switch (event.key) {\n        case 'ArrowDown':\n          event.preventDefault();\n          if (!isOpen) {\n            setIsOpen(true);\n            setFocusedIndex(0);\n          } else {\n            setFocusedIndex(prev => \n              prev < filteredOptions.length - 1 ? prev + 1 : 0\n            );\n          }\n          break;\n          \n        case 'ArrowUp':\n          event.preventDefault();\n          if (!isOpen) {\n            setIsOpen(true);\n            setFocusedIndex(filteredOptions.length - 1);\n          } else {\n            setFocusedIndex(prev => \n              prev > 0 ? prev - 1 : filteredOptions.length - 1\n            );\n          }\n          break;\n          \n        case 'Enter':\n          event.preventDefault();\n          if (isOpen && focusedIndex >= 0 && filteredOptions[focusedIndex]) {\n            handleValueChange(filteredOptions[focusedIndex].value);\n          } else if (!isOpen) {\n            setIsOpen(true);\n          }\n          break;\n          \n        case 'Escape':\n          event.preventDefault();\n          setIsOpen(false);\n          setSearchValue('');\n          setFocusedIndex(-1);\n          triggerRef.current?.focus();\n          break;\n          \n        case 'Tab':\n          setIsOpen(false);\n          break;\n      }\n    }, [isOpen, focusedIndex, filteredOptions, handleValueChange]);\n\n    // Close dropdown when clicking outside\n    React.useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (ref && 'current' in ref && ref.current && !ref.current.contains(event.target as Node)) {\n          setIsOpen(false);\n          setSearchValue('');\n          setFocusedIndex(-1);\n        }\n      };\n\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }, [ref]);\n\n    // Focus search input when opened\n    React.useEffect(() => {\n      if (isOpen && searchable && searchRef.current) {\n        searchRef.current.focus();\n      }\n    }, [isOpen, searchable]);\n\n    const comboboxElement = (\n      <div \n        className={cn(comboboxVariants(), className)}\n        ref={ref}\n        {...props}\n      >\n        {/* Trigger Button */}\n        <button\n          ref={triggerRef}\n          type=\"button\"\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-controls={listboxId}\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={combinedAriaDescribedBy}\n          aria-required={required}\n          disabled={disabled}\n          data-state={isOpen ? 'open' : 'closed'}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          className={cn(comboboxTriggerVariants({ variant: finalVariant, size }))}\n        >\n          <span className={selectedOption ? 'text-foreground' : 'text-muted-foreground'}>\n            {selectedOption ? selectedOption.label : placeholder}\n          </span>\n          \n          {/* Dropdown Arrow */}\n          <svg\n            className={cn(\n              'h-4 w-4 text-muted-foreground transition-transform duration-200',\n              isOpen && 'rotate-180'\n            )}\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            aria-hidden=\"true\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </button>\n\n        {/* Dropdown Content */}\n        <div\n          className={cn(comboboxContentVariants())}\n          data-state={isOpen ? 'open' : 'closed'}\n        >\n          {/* Search Input */}\n          {searchable && isOpen && (\n            <div className=\"px-3 pb-2\">\n              <input\n                ref={searchRef}\n                type=\"text\"\n                placeholder={searchPlaceholder}\n                value={searchValue}\n                onChange={(e) => setSearchValue(e.target.value)}\n                className={cn(\n                  'w-full bg-background border border-input rounded px-3 py-2',\n                  'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary',\n                  comboboxSearchVariants({ size })\n                )}\n                onKeyDown={handleKeyDown}\n              />\n            </div>\n          )}\n          \n          {/* Options List */}\n          <div\n            role=\"listbox\"\n            id={listboxId}\n            aria-label=\"Options\"\n          >\n            {filteredOptions.length === 0 ? (\n              <div className={cn(comboboxItemVariants({ size }), 'text-muted-foreground')}>\n                {emptyMessage}\n              </div>\n            ) : (\n              filteredOptions.map((option, index) => (\n                <button\n                  key={option.value}\n                  type=\"button\"\n                  role=\"option\"\n                  aria-selected={currentValue === option.value}\n                  disabled={option.disabled}\n                  data-focused={focusedIndex === index}\n                  onClick={() => handleValueChange(option.value)}\n                  className={cn(\n                    comboboxItemVariants({ size }),\n                    currentValue === option.value && 'bg-primary text-primary-foreground',\n                    focusedIndex === index && 'bg-accent text-accent-foreground'\n                  )}\n                >\n                  <div className=\"flex-1 text-left\">\n                    <div>{option.label}</div>\n                    {option.description && (\n                      <div className=\"text-sm opacity-70\">\n                        {option.description}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Selected Indicator */}\n                  {currentValue === option.value && (\n                    <svg\n                      className=\"h-4 w-4 ml-2 flex-shrink-0\"\n                      fill=\"currentColor\"\n                      viewBox=\"0 0 20 20\"\n                      aria-hidden=\"true\"\n                    >\n                      <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                    </svg>\n                  )}\n                </button>\n              ))\n            )}\n          </div>\n        </div>\n        \n        {/* Hidden select for form integration */}\n        <select\n          name={name}\n          form={form}\n          value={currentValue}\n          required={required}\n          disabled={disabled}\n          onChange={() => {}} // Controlled by combobox\n          className=\"sr-only\"\n          tabIndex={-1}\n          aria-hidden=\"true\"\n        >\n          <option value=\"\">{placeholder}</option>\n          {options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n\n    // If no helper text or NSM classification, return combobox directly\n    if (!helperText && !nsmClassification) {\n      return comboboxElement;\n    }\n\n    // Otherwise, wrap with additional elements\n    return (\n      <div className=\"space-y-2\">\n        {comboboxElement}\n        \n        {/* Helper Text */}\n        {helperText && (\n          <p \n            id={helperTextId}\n            className={cn(\n              'text-sm',\n              error && 'text-destructive',\n              success && 'text-green-600',\n              warning && 'text-yellow-600',\n              !error && !success && !warning && 'text-muted-foreground'\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n        \n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM Classification: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nCombobox.displayName = 'Combobox';\n\n// Export types and variants\nexport { comboboxVariants, comboboxTriggerVariants, comboboxContentVariants, comboboxItemVariants };\nexport type { VariantProps, ComboboxOption };"
    }
  ]
}