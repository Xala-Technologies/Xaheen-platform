{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "authentication-01",
  "type": "registry:block",
  "title": "Authentication Form 01",
  "description": "Complete authentication form with login and signup",
  "category": "patterns",
  "nsm": {
    "classification": "RESTRICTED",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "tabs"
  ],
  "files": [
    {
      "path": "blocks/authentication-01/authentication-01.tsx",
      "type": "registry:component",
      "content": "/**\n * Authentication-01 Block - Modern Login Form\n * WCAG AAA compliant with BankID integration and Norwegian standards\n * Professional spacing and accessibility features\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Input } from '../../components/input/input';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../../components/card/card';\n\nexport interface AuthenticationUser {\n  readonly email: string;\n  readonly password?: string;\n  readonly rememberMe?: boolean;\n  readonly bankIdSession?: string;\n}\n\nexport interface AuthenticationTexts {\n  readonly title: string;\n  readonly subtitle: string;\n  readonly emailLabel: string;\n  readonly emailPlaceholder: string;\n  readonly passwordLabel: string;\n  readonly passwordPlaceholder: string;\n  readonly rememberMeLabel: string;\n  readonly loginButton: string;\n  readonly bankIdButton: string;\n  readonly forgotPasswordLink: string;\n  readonly signUpLink: string;\n  readonly signUpPrompt: string;\n  readonly loginWithBankId: string;\n  readonly orSeparator: string;\n  readonly loadingText: string;\n  readonly bankIdLoadingText: string;\n  readonly emailValidationError: string;\n  readonly passwordValidationError: string;\n  readonly loginSuccessMessage: string;\n  readonly bankIdSuccessMessage: string;\n}\n\nexport interface AuthenticationState {\n  readonly email: string;\n  readonly password: string;\n  readonly rememberMe: boolean;\n  readonly loading: boolean;\n  readonly bankIdLoading: boolean;\n  readonly errors: {\n    readonly email?: string;\n    readonly password?: string;\n    readonly general?: string;\n  };\n}\n\nexport interface AuthenticationCallbacks {\n  readonly onLogin: (user: AuthenticationUser) => Promise<void>;\n  readonly onBankIdLogin?: () => Promise<void>;\n  readonly onForgotPassword?: (email: string) => void;\n  readonly onSignUp?: () => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onEmailChange?: (email: string) => void;\n  readonly onPasswordChange?: (password: string) => void;\n  readonly onRememberMeChange?: (rememberMe: boolean) => void;\n  readonly onLoadingChange?: (loading: boolean) => void;\n  readonly onErrorsChange?: (errors: AuthenticationState['errors']) => void;\n}\n\nexport interface Authentication01Props {\n  readonly texts?: Partial<AuthenticationTexts>;\n  readonly callbacks: AuthenticationCallbacks;\n  readonly state?: Partial<AuthenticationState>;\n  readonly className?: string;\n  readonly showBankId?: boolean;\n  readonly showRememberMe?: boolean;\n  readonly showSignUpLink?: boolean;\n  readonly enableEmailValidation?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nconst defaultTexts: AuthenticationTexts = {\n  title: 'Logg inn',\n  subtitle: 'Skriv inn din e-post og passord for å logge inn',\n  emailLabel: 'E-postadresse',\n  emailPlaceholder: 'din@epost.no',\n  passwordLabel: 'Passord',\n  passwordPlaceholder: 'Skriv inn ditt passord',\n  rememberMeLabel: 'Husk meg',\n  loginButton: 'Logg inn',\n  bankIdButton: 'Logg inn med BankID',\n  forgotPasswordLink: 'Glemt passord?',\n  signUpLink: 'Opprett konto',\n  signUpPrompt: 'Har du ikke konto?',\n  loginWithBankId: 'eller logg inn med',\n  orSeparator: 'eller',\n  loadingText: 'Logger inn...',\n  bankIdLoadingText: 'Kobler til BankID...',\n  emailValidationError: 'Skriv inn en gyldig e-postadresse',\n  passwordValidationError: 'Passord må være minst 8 tegn',\n  loginSuccessMessage: 'Innlogging vellykket',\n  bankIdSuccessMessage: 'BankID innlogging vellykket'\n};\n\nconst defaultState: AuthenticationState = {\n  email: '',\n  password: '',\n  rememberMe: false,\n  loading: false,\n  bankIdLoading: false,\n  errors: {}\n};\n\nexport const Authentication01: React.FC<Authentication01Props> = ({\n  texts = {},\n  callbacks,\n  state = {},\n  className,\n  showBankId = true,\n  showRememberMe = true,\n  showSignUpLink = true,\n  enableEmailValidation = true,\n  nsmClassification\n}) => {\n  // Merge with default texts and state\n  const t = { ...defaultTexts, ...texts };\n  const currentState = { ...defaultState, ...state };\n  \n  const {\n    email,\n    password,\n    rememberMe,\n    loading,\n    bankIdLoading,\n    errors\n  } = currentState;\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Validation functions\n  const validateEmail = (emailValue: string): string | undefined => {\n    if (!emailValue) return t.emailValidationError;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(emailValue)) return t.emailValidationError;\n    return undefined;\n  };\n\n  const validatePassword = (passwordValue: string): string | undefined => {\n    if (!passwordValue) return t.passwordValidationError;\n    if (passwordValue.length < 8) return t.passwordValidationError;\n    return undefined;\n  };\n\n  // Event handlers\n  const handleEmailChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newEmail = e.target.value;\n    callbacks.onEmailChange?.(newEmail);\n    \n    // Clear email error when user starts typing\n    if (errors.email) {\n      const newErrors = { ...errors };\n      delete newErrors.email;\n      callbacks.onErrorsChange?.(newErrors);\n    }\n  }, [callbacks, errors]);\n\n  const handlePasswordChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newPassword = e.target.value;\n    callbacks.onPasswordChange?.(newPassword);\n    \n    // Clear password error when user starts typing\n    if (errors.password) {\n      const newErrors = { ...errors };\n      delete newErrors.password;\n      callbacks.onErrorsChange?.(newErrors);\n    }\n  }, [callbacks, errors]);\n\n  const handleRememberMeChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const checked = e.target.checked;\n    callbacks.onRememberMeChange?.(checked);\n  }, [callbacks]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (loading || bankIdLoading) return;\n\n    // Validation\n    const emailError = enableEmailValidation ? validateEmail(email) : undefined;\n    const passwordError = validatePassword(password);\n    \n    const validationErrors = {\n      ...(emailError && { email: emailError }),\n      ...(passwordError && { password: passwordError })\n    };\n\n    if (Object.keys(validationErrors).length > 0) {\n      callbacks.onErrorsChange?.(validationErrors);\n      announce(`Validation errors: ${Object.values(validationErrors).join(', ')}`);\n      return;\n    }\n\n    try {\n      callbacks.onLoadingChange?.(true);\n      await callbacks.onLogin({\n        email,\n        password,\n        rememberMe\n      });\n      announce(t.loginSuccessMessage);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\n      callbacks.onErrorsChange?.({ general: errorMessage });\n      announce(`Login error: ${errorMessage}`);\n    } finally {\n      callbacks.onLoadingChange?.(false);\n    }\n  }, [email, password, rememberMe, loading, bankIdLoading, enableEmailValidation, callbacks, announce, t]);\n\n  const handleBankIdLogin = useCallback(async () => {\n    if (loading || bankIdLoading || !callbacks.onBankIdLogin) return;\n\n    try {\n      callbacks.onLoadingChange?.(true);\n      await callbacks.onBankIdLogin();\n      announce(t.bankIdSuccessMessage);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'BankID login failed';\n      callbacks.onErrorsChange?.({ general: errorMessage });\n      announce(`BankID error: ${errorMessage}`);\n    } finally {\n      callbacks.onLoadingChange?.(false);\n    }\n  }, [loading, bankIdLoading, callbacks, announce, t]);\n\n  const handleForgotPassword = useCallback(() => {\n    callbacks.onForgotPassword?.(email);\n  }, [callbacks, email]);\n\n  return (\n    <div className={cn('w-full max-w-md mx-auto', className)}>\n      <Card\n        variant=\"elevated\"\n        nsmClassification={nsmClassification}\n        className=\"backdrop-blur-sm\"\n      >\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-bold tracking-tight\">\n            {t.title}\n          </CardTitle>\n          <CardDescription className=\"text-lg\">\n            {t.subtitle}\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* General Error */}\n            {errors.general && (\n              <div\n                role=\"alert\"\n                className=\"p-4 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive text-sm\"\n              >\n                {errors.general}\n              </div>\n            )}\n\n            {/* Email Field */}\n            <div className=\"space-y-2\">\n              <label\n                htmlFor=\"auth-email\"\n                className=\"text-sm font-medium text-foreground\"\n              >\n                {t.emailLabel}\n              </label>\n              <Input\n                id=\"auth-email\"\n                name=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={handleEmailChange}\n                placeholder={t.emailPlaceholder}\n                error={!!errors.email}\n                helperText={errors.email}\n                disabled={loading || bankIdLoading}\n                required\n                autoComplete=\"email\"\n                norwegianFormat=\"phone\"\n                leadingIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                  </svg>\n                }\n              />\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-2\">\n              <label\n                htmlFor=\"auth-password\"\n                className=\"text-sm font-medium text-foreground\"\n              >\n                {t.passwordLabel}\n              </label>\n              <Input\n                id=\"auth-password\"\n                name=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={handlePasswordChange}\n                placeholder={t.passwordPlaceholder}\n                error={!!errors.password}\n                helperText={errors.password}\n                disabled={loading || bankIdLoading}\n                required\n                autoComplete=\"current-password\"\n                leadingIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                  </svg>\n                }\n              />\n            </div>\n\n            {/* Remember Me */}\n            {showRememberMe && (\n              <div className=\"flex items-center\">\n                <input\n                  id=\"auth-remember\"\n                  name=\"remember-me\"\n                  type=\"checkbox\"\n                  checked={rememberMe}\n                  onChange={handleRememberMeChange}\n                  disabled={loading || bankIdLoading}\n                  className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <label htmlFor=\"auth-remember\" className=\"ml-3 text-sm text-foreground\">\n                  {t.rememberMeLabel}\n                </label>\n              </div>\n            )}\n\n            {/* Login Button */}\n            <Button\n              type=\"submit\"\n              fullWidth\n              loading={loading}\n              loadingText={t.loadingText}\n              disabled={loading || bankIdLoading}\n              size=\"lg\"\n              variant=\"primary\"\n              className=\"font-semibold\"\n            >\n              {t.loginButton}\n            </Button>\n          </form>\n\n          {/* BankID Login */}\n          {showBankId && callbacks.onBankIdLogin && (\n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-border\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-card px-4 text-muted-foreground\">{t.orSeparator}</span>\n                </div>\n              </div>\n\n              <Button\n                type=\"button\"\n                fullWidth\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={handleBankIdLogin}\n                loading={bankIdLoading}\n                loadingText={t.bankIdLoadingText}\n                disabled={loading || bankIdLoading}\n                className=\"mt-4 font-semibold\"\n                leftIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                  </svg>\n                }\n              >\n                {t.bankIdButton}\n              </Button>\n            </div>\n          )}\n        </CardContent>\n\n        <CardFooter className=\"flex flex-col space-y-4\">\n          {/* Forgot Password Link */}\n          <button\n            type=\"button\"\n            onClick={handleForgotPassword}\n            disabled={loading || bankIdLoading}\n            className=\"text-sm text-primary hover:text-primary/80 transition-colors focus:outline-none focus:ring-2 focus:ring-primary/20 rounded px-2 py-1\"\n          >\n            {t.forgotPasswordLink}\n          </button>\n\n          {/* Sign Up Link */}\n          {showSignUpLink && callbacks.onSignUp && (\n            <div className=\"text-center text-sm\">\n              <span className=\"text-muted-foreground\">{t.signUpPrompt} </span>\n              <button\n                type=\"button\"\n                onClick={callbacks.onSignUp}\n                disabled={loading || bankIdLoading}\n                className=\"text-primary hover:text-primary/80 transition-colors focus:outline-none focus:ring-2 focus:ring-primary/20 rounded px-2 py-1 font-medium\"\n              >\n                {t.signUpLink}\n              </button>\n            </div>\n          )}\n        </CardFooter>\n      </Card>\n    </div>\n  );\n};"
    }
  ]
}