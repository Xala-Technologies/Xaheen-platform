{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "alert",
  "type": "registry:component",
  "title": "Alert",
  "description": "Display important messages with contextual styling",
  "category": "components",
  "categories": [
    "components",
    "feedback",
    "display"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/alert/alert.tsx",
      "type": "registry:component",
      "content": "/**\n * Alert Component - Status Messages and Notifications\n * CLAUDE.md Compliant: Professional spacing and semantic colors\n * WCAG AAA: Proper ARIA roles, live regions, and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { \n  CheckCircleIcon, \n  ExclamationTriangleIcon, \n  XCircleIcon, \n  InformationCircleIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst alertVariants = cva(\n  [\n    'relative w-full rounded-lg border px-6 py-4',\n    'text-sm transition-all duration-200',\n    '[&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',\n    // Professional minimum padding and spacing\n    'min-h-[3rem] flex items-start gap-3'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-background text-foreground',\n          'border-border'\n        ],\n        destructive: [\n          'border-destructive/50 text-destructive dark:border-destructive',\n          'bg-destructive/10 [&>svg]:text-destructive'\n        ],\n        warning: [\n          'border-yellow-500/50 text-yellow-900 dark:text-yellow-100',\n          'bg-yellow-50 dark:bg-yellow-900/20 [&>svg]:text-yellow-600 dark:[&>svg]:text-yellow-400'\n        ],\n        success: [\n          'border-green-500/50 text-green-900 dark:text-green-100',\n          'bg-green-50 dark:bg-green-900/20 [&>svg]:text-green-600 dark:[&>svg]:text-green-400'\n        ],\n        info: [\n          'border-blue-500/50 text-blue-900 dark:text-blue-100',\n          'bg-blue-50 dark:bg-blue-900/20 [&>svg]:text-blue-600 dark:[&>svg]:text-blue-400'\n        ],\n        // NSM Security Classification variants\n        nsmOpen: [\n          'border-green-600/50 text-green-900 dark:text-green-100',\n          'bg-green-50 dark:bg-green-900/20 [&>svg]:text-green-600',\n          'border-l-4 border-l-green-600'\n        ],\n        nsmRestricted: [\n          'border-yellow-600/50 text-yellow-900 dark:text-yellow-100',\n          'bg-yellow-50 dark:bg-yellow-900/20 [&>svg]:text-yellow-600',\n          'border-l-4 border-l-yellow-600'\n        ],\n        nsmConfidential: [\n          'border-red-600/50 text-red-900 dark:text-red-100',\n          'bg-red-50 dark:bg-red-900/20 [&>svg]:text-red-600',\n          'border-l-4 border-l-red-600'\n        ],\n        nsmSecret: [\n          'border-gray-600/50 text-gray-900 dark:text-gray-100',\n          'bg-gray-50 dark:bg-gray-900/20 [&>svg]:text-gray-600',\n          'border-l-4 border-l-gray-800'\n        ]\n      },\n      size: {\n        sm: 'px-4 py-3 text-sm min-h-[2.5rem]',\n        md: 'px-6 py-4 text-base min-h-[3rem]',\n        lg: 'px-8 py-5 text-lg min-h-[3.5rem]'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst alertTitleVariants = cva(\n  [\n    'mb-1 font-medium leading-none tracking-tight'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\nconst alertDescriptionVariants = cva(\n  [\n    'text-sm [&_p]:leading-relaxed'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-xs',\n        md: 'text-sm',\n        lg: 'text-base'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\n// Icon mapping for variants\nconst variantIcons = {\n  default: InformationCircleIcon,\n  destructive: XCircleIcon,\n  warning: ExclamationTriangleIcon,\n  success: CheckCircleIcon,\n  info: InformationCircleIcon,\n  nsmOpen: CheckCircleIcon,\n  nsmRestricted: ExclamationTriangleIcon,\n  nsmConfidential: XCircleIcon,\n  nsmSecret: XCircleIcon\n} as const;\n\n// Types\nexport interface AlertProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof alertVariants> {\n  readonly dismissible?: boolean;\n  readonly onDismiss?: () => void;\n  readonly icon?: React.ReactNode | boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly ariaLive?: 'polite' | 'assertive' | 'off';\n  readonly autoFocus?: boolean;\n}\n\nexport interface AlertTitleProps extends \n  React.HTMLAttributes<HTMLHeadingElement>,\n  VariantProps<typeof alertTitleVariants> {\n  readonly as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport interface AlertDescriptionProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof alertDescriptionVariants> {}\n\n// Alert Root Component\nexport const Alert = React.forwardRef<HTMLDivElement, AlertProps>(\n  ({ \n    className, \n    variant = 'default', \n    size = 'md',\n    dismissible = false,\n    onDismiss,\n    icon: customIcon,\n    nsmClassification,\n    ariaLive = 'polite',\n    autoFocus = false,\n    children,\n    ...props \n  }, ref) => {\n    const [isVisible, setIsVisible] = React.useState(true);\n    const alertRef = React.useRef<HTMLDivElement>(null);\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    // Handle dismiss\n    const handleDismiss = React.useCallback(() => {\n      setIsVisible(false);\n      onDismiss?.();\n    }, [onDismiss]);\n\n    // Auto focus for important alerts\n    React.useEffect(() => {\n      if (autoFocus && alertRef.current && (finalVariant === 'destructive' || finalVariant === 'nsmSecret')) {\n        alertRef.current.focus();\n      }\n    }, [autoFocus, finalVariant]);\n\n    // Handle escape key for dismissible alerts\n    React.useEffect(() => {\n      if (!dismissible) return;\n\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape') {\n          handleDismiss();\n        }\n      };\n\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [dismissible, handleDismiss]);\n\n    if (!isVisible) {\n      return null;\n    }\n\n    // Determine which icon to show\n    const IconComponent = variantIcons[finalVariant];\n    const shouldShowIcon = customIcon !== false;\n    const iconToRender = customIcon === true || customIcon === undefined \n      ? <IconComponent className=\"h-5 w-5\" /> \n      : customIcon;\n\n    // Determine ARIA role based on variant\n    const getAriaRole = () => {\n      switch (finalVariant) {\n        case 'destructive':\n        case 'nsmSecret':\n        case 'nsmConfidential':\n          return 'alert';\n        default:\n          return 'status';\n      }\n    };\n\n    return (\n      <div\n        ref={ref || alertRef}\n        role={getAriaRole()}\n        aria-live={ariaLive}\n        tabIndex={autoFocus ? -1 : undefined}\n        className={cn(\n          alertVariants({ variant: finalVariant, size }),\n          dismissible && 'pr-12',\n          className\n        )}\n        data-variant={finalVariant}\n        {...props}\n      >\n        {/* Icon */}\n        {shouldShowIcon && iconToRender}\n        \n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          {children}\n        </div>\n\n        {/* Dismiss Button */}\n        {dismissible && (\n          <button\n            type=\"button\"\n            onClick={handleDismiss}\n            aria-label=\"Lukk varsling\"\n            className={cn(\n              'absolute right-4 top-4 rounded-md p-1',\n              'opacity-70 hover:opacity-100 focus:opacity-100',\n              'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-current',\n              'transition-opacity duration-200'\n            )}\n          >\n            <XMarkIcon className=\"h-4 w-4\" />\n          </button>\n        )}\n\n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM-klassifisering: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nAlert.displayName = 'Alert';\n\n// Alert Title Component\nexport const AlertTitle = React.forwardRef<HTMLHeadingElement, AlertTitleProps>(\n  ({ \n    className, \n    size = 'md', \n    as: Component = 'h5', \n    ...props \n  }, ref) => (\n    <Component\n      ref={ref}\n      className={cn(alertTitleVariants({ size }), className)}\n      {...props}\n    />\n  )\n);\n\nAlertTitle.displayName = 'AlertTitle';\n\n// Alert Description Component\nexport const AlertDescription = React.forwardRef<HTMLDivElement, AlertDescriptionProps>(\n  ({ \n    className, \n    size = 'md', \n    ...props \n  }, ref) => (\n    <div\n      ref={ref}\n      className={cn(alertDescriptionVariants({ size }), className)}\n      {...props}\n    />\n  )\n);\n\nAlertDescription.displayName = 'AlertDescription';\n\n// Convenience Alert Types\nexport interface AlertTypeProps extends Omit<AlertProps, 'variant'> {}\n\nexport const AlertSuccess = React.forwardRef<HTMLDivElement, AlertTypeProps>(\n  (props, ref) => <Alert ref={ref} variant=\"success\" {...props} />\n);\n\nAlertSuccess.displayName = 'AlertSuccess';\n\nexport const AlertError = React.forwardRef<HTMLDivElement, AlertTypeProps>(\n  (props, ref) => <Alert ref={ref} variant=\"destructive\" {...props} />\n);\n\nAlertError.displayName = 'AlertError';\n\nexport const AlertWarning = React.forwardRef<HTMLDivElement, AlertTypeProps>(\n  (props, ref) => <Alert ref={ref} variant=\"warning\" {...props} />\n);\n\nAlertWarning.displayName = 'AlertWarning';\n\nexport const AlertInfo = React.forwardRef<HTMLDivElement, AlertTypeProps>(\n  (props, ref) => <Alert ref={ref} variant=\"info\" {...props} />\n);\n\nAlertInfo.displayName = 'AlertInfo';\n\n// Export variants and types\nexport { alertVariants, alertTitleVariants, alertDescriptionVariants };\nexport type { VariantProps };"
    }
  ]
}