{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "data-table-advanced",
  "type": "registry:block",
  "title": "Advanced Data Table",
  "description": "Feature-rich data table with sorting, filtering, and pagination",
  "category": "patterns",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "table",
    "button",
    "input",
    "select",
    "pagination"
  ],
  "files": [
    {
      "path": "blocks/data-table-advanced/data-table-advanced.tsx",
      "type": "registry:component",
      "content": "/**\n * Data Table Advanced Block - Enterprise Data Grid\n * WCAG AAA compliant with sorting, filtering, pagination, and selection\n * Norwegian standards with NSM classification support\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Input } from '../../components/input/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/card/card';\n\nexport interface TableColumn<T = any> {\n  readonly id: keyof T;\n  readonly title: string;\n  readonly description?: string;\n  readonly sortable?: boolean;\n  readonly filterable?: boolean;\n  readonly width?: string | number;\n  readonly minWidth?: string | number;\n  readonly maxWidth?: string | number;\n  readonly align?: 'left' | 'center' | 'right';\n  readonly render?: (value: any, row: T, index: number) => React.ReactNode;\n  readonly sortFn?: (a: T, b: T) => number;\n  readonly filterFn?: (value: any, filterValue: string) => boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface TableAction<T = any> {\n  readonly id: string;\n  readonly title: string;\n  readonly icon?: React.ReactNode;\n  readonly variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  readonly disabled?: (row: T) => boolean;\n  readonly hidden?: (row: T) => boolean;\n  readonly action: (row: T, index: number) => void | Promise<void>;\n  readonly shortcut?: string[];\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface TableTexts {\n  readonly title: string;\n  readonly description: string;\n  readonly searchPlaceholder: string;\n  readonly noDataMessage: string;\n  readonly loadingMessage: string;\n  readonly selectedCountLabel: string;\n  readonly rowsPerPageLabel: string;\n  readonly pageLabel: string;\n  readonly ofLabel: string;\n  readonly previousPage: string;\n  readonly nextPage: string;\n  readonly firstPage: string;\n  readonly lastPage: string;\n  readonly sortAscending: string;\n  readonly sortDescending: string;\n  readonly clearSort: string;\n  readonly filterColumn: string;\n  readonly clearFilter: string;\n  readonly selectRow: string;\n  readonly selectAllRows: string;\n  readonly actionsLabel: string;\n  readonly moreActionsLabel: string;\n  readonly exportData: string;\n  readonly refreshData: string;\n  readonly columnSettings: string;\n  readonly tableAnnouncement: string;\n  readonly sortedByAnnouncement: string;\n  readonly filteredByAnnouncement: string;\n}\n\nexport interface TableState<T = any> {\n  readonly data: T[];\n  readonly filteredData: T[];\n  readonly selectedRows: Set<number>;\n  readonly currentPage: number;\n  readonly rowsPerPage: number;\n  readonly sortColumn?: keyof T;\n  readonly sortDirection: 'asc' | 'desc' | null;\n  readonly globalFilter: string;\n  readonly columnFilters: Record<keyof T, string>;\n  readonly loading: boolean;\n  readonly error?: string;\n}\n\nexport interface TableCallbacks<T = any> {\n  readonly onRowSelect?: (rowIndex: number, row: T) => void;\n  readonly onRowsSelect?: (selectedIndexes: number[], selectedRows: T[]) => void;\n  readonly onSort?: (column: keyof T, direction: 'asc' | 'desc' | null) => void;\n  readonly onFilter?: (column: keyof T, value: string) => void;\n  readonly onGlobalFilter?: (value: string) => void;\n  readonly onPageChange?: (page: number) => void;\n  readonly onRowsPerPageChange?: (rowsPerPage: number) => void;\n  readonly onRefresh?: () => void;\n  readonly onExport?: (data: T[]) => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onStateChange?: (state: Partial<TableState<T>>) => void;\n}\n\nexport interface DataTableAdvancedProps<T = any> {\n  readonly texts?: Partial<TableTexts>;\n  readonly columns: TableColumn<T>[];\n  readonly actions?: TableAction<T>[];\n  readonly callbacks: TableCallbacks<T>;\n  readonly state?: Partial<TableState<T>>;\n  readonly className?: string;\n  readonly showHeader?: boolean;\n  readonly showSearch?: boolean;\n  readonly showPagination?: boolean;\n  readonly showRowSelection?: boolean;\n  readonly showActions?: boolean;\n  readonly showExport?: boolean;\n  readonly showRefresh?: boolean;\n  readonly striped?: boolean;\n  readonly hoverable?: boolean;\n  readonly compact?: boolean;\n  readonly stickyHeader?: boolean;\n  readonly maxHeight?: string;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly pageSize?: number;\n  readonly pageSizeOptions?: number[];\n}\n\nconst defaultTexts: TableTexts = {\n  title: 'Datatabell',\n  description: 'Avansert datatabell med sortering, filtrering og paginering',\n  searchPlaceholder: 'Søk i tabellen...',\n  noDataMessage: 'Ingen data tilgjengelig',\n  loadingMessage: 'Laster data...',\n  selectedCountLabel: 'valgte rader',\n  rowsPerPageLabel: 'Rader per side:',\n  pageLabel: 'Side',\n  ofLabel: 'av',\n  previousPage: 'Forrige side',\n  nextPage: 'Neste side',\n  firstPage: 'Første side',\n  lastPage: 'Siste side',\n  sortAscending: 'Sorter stigende',\n  sortDescending: 'Sorter synkende',\n  clearSort: 'Fjern sortering',\n  filterColumn: 'Filtrer kolonne',\n  clearFilter: 'Fjern filter',\n  selectRow: 'Velg rad',\n  selectAllRows: 'Velg alle rader',\n  actionsLabel: 'Handlinger',\n  moreActionsLabel: 'Flere handlinger',\n  exportData: 'Eksporter data',\n  refreshData: 'Oppdater data',\n  columnSettings: 'Kolonneinnstillinger',\n  tableAnnouncement: 'Datatabell med {} rader og {} kolonner',\n  sortedByAnnouncement: 'Sortert etter {} {}',\n  filteredByAnnouncement: 'Filtrert på {}'\n};\n\nconst defaultState: TableState = {\n  data: [],\n  filteredData: [],\n  selectedRows: new Set(),\n  currentPage: 1,\n  rowsPerPage: 10,\n  sortDirection: null,\n  globalFilter: '',\n  columnFilters: {},\n  loading: false\n};\n\nexport function DataTableAdvanced<T extends Record<string, any>>({\n  texts = {},\n  columns,\n  actions = [],\n  callbacks,\n  state = {},\n  className,\n  showHeader = true,\n  showSearch = true,\n  showPagination = true,\n  showRowSelection = true,\n  showActions = true,\n  showExport = true,\n  showRefresh = true,\n  striped = true,\n  hoverable = true,\n  compact = false,\n  stickyHeader = false,\n  maxHeight,\n  nsmClassification,\n  pageSize = 10,\n  pageSizeOptions = [5, 10, 20, 50, 100]\n}: DataTableAdvancedProps<T>): JSX.Element {\n  \n  const t = { ...defaultTexts, ...texts };\n  const currentState = { \n    ...defaultState, \n    rowsPerPage: pageSize,\n    ...state \n  } as TableState<T>;\n  \n  const {\n    data,\n    selectedRows,\n    currentPage,\n    rowsPerPage,\n    sortColumn,\n    sortDirection,\n    globalFilter,\n    columnFilters,\n    loading,\n    error\n  } = currentState;\n\n  // Update state helper\n  const updateState = useCallback((updates: Partial<TableState<T>>) => {\n    callbacks.onStateChange?.(updates);\n  }, [callbacks]);\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Filter and sort data\n  const processedData = useMemo(() => {\n    let filtered = [...data];\n\n    // Apply global filter\n    if (globalFilter) {\n      const lowerFilter = globalFilter.toLowerCase();\n      filtered = filtered.filter(row =>\n        Object.values(row).some(value =>\n          String(value).toLowerCase().includes(lowerFilter)\n        )\n      );\n    }\n\n    // Apply column filters\n    Object.entries(columnFilters).forEach(([columnId, filterValue]) => {\n      if (filterValue) {\n        const column = columns.find(col => col.id === columnId);\n        if (column?.filterFn) {\n          filtered = filtered.filter(row => \n            column.filterFn!(row[columnId], filterValue)\n          );\n        } else {\n          filtered = filtered.filter(row =>\n            String(row[columnId]).toLowerCase().includes(filterValue.toLowerCase())\n          );\n        }\n      }\n    });\n\n    // Apply sorting\n    if (sortColumn && sortDirection) {\n      const column = columns.find(col => col.id === sortColumn);\n      if (column?.sortFn) {\n        filtered.sort((a, b) => {\n          const result = column.sortFn!(a, b);\n          return sortDirection === 'desc' ? -result : result;\n        });\n      } else {\n        filtered.sort((a, b) => {\n          const aValue = a[sortColumn];\n          const bValue = b[sortColumn];\n          \n          if (aValue === bValue) return 0;\n          if (aValue == null) return 1;\n          if (bValue == null) return -1;\n          \n          const comparison = aValue < bValue ? -1 : 1;\n          return sortDirection === 'desc' ? -comparison : comparison;\n        });\n      }\n    }\n\n    return filtered;\n  }, [data, globalFilter, columnFilters, sortColumn, sortDirection, columns]);\n\n  // Paginated data\n  const paginatedData = useMemo(() => {\n    const start = (currentPage - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n    return processedData.slice(start, end);\n  }, [processedData, currentPage, rowsPerPage]);\n\n  const totalPages = Math.ceil(processedData.length / rowsPerPage);\n\n  // Event handlers\n  const handleSort = useCallback((column: TableColumn<T>) => {\n    if (!column.sortable) return;\n\n    const newDirection = sortColumn === column.id && sortDirection === 'asc' ? 'desc' \n      : sortColumn === column.id && sortDirection === 'desc' ? null \n      : 'asc';\n\n    updateState({ \n      sortColumn: newDirection ? column.id : undefined, \n      sortDirection: newDirection,\n      currentPage: 1 \n    });\n    \n    callbacks.onSort?.(column.id, newDirection);\n    \n    if (newDirection) {\n      announce(`${t.sortedByAnnouncement.replace('{}', column.title).replace('{}', newDirection === 'asc' ? t.sortAscending : t.sortDescending)}`);\n    }\n  }, [sortColumn, sortDirection, updateState, callbacks, announce, t]);\n\n  const handleGlobalFilter = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    updateState({ globalFilter: value, currentPage: 1 });\n    callbacks.onGlobalFilter?.(value);\n    \n    if (value) {\n      announce(`${t.filteredByAnnouncement.replace('{}', value)}`);\n    }\n  }, [updateState, callbacks, announce, t]);\n\n  const handleRowSelect = useCallback((index: number, row: T) => {\n    const rowIndex = data.indexOf(row);\n    const newSelected = new Set(selectedRows);\n    \n    if (newSelected.has(rowIndex)) {\n      newSelected.delete(rowIndex);\n    } else {\n      newSelected.add(rowIndex);\n    }\n    \n    updateState({ selectedRows: newSelected });\n    callbacks.onRowSelect?.(rowIndex, row);\n    callbacks.onRowsSelect?.(\n      Array.from(newSelected),\n      Array.from(newSelected).map(i => data[i])\n    );\n  }, [data, selectedRows, updateState, callbacks]);\n\n  const handleSelectAll = useCallback(() => {\n    const allCurrentPageIndexes = paginatedData.map(row => data.indexOf(row));\n    const newSelected = new Set(selectedRows);\n    const allSelected = allCurrentPageIndexes.every(i => newSelected.has(i));\n    \n    if (allSelected) {\n      // Deselect all on current page\n      allCurrentPageIndexes.forEach(i => newSelected.delete(i));\n    } else {\n      // Select all on current page\n      allCurrentPageIndexes.forEach(i => newSelected.add(i));\n    }\n    \n    updateState({ selectedRows: newSelected });\n    callbacks.onRowsSelect?.(\n      Array.from(newSelected),\n      Array.from(newSelected).map(i => data[i])\n    );\n  }, [paginatedData, data, selectedRows, updateState, callbacks]);\n\n  const handlePageChange = useCallback((page: number) => {\n    updateState({ currentPage: page });\n    callbacks.onPageChange?.(page);\n  }, [updateState, callbacks]);\n\n  const handleRowsPerPageChange = useCallback((newRowsPerPage: number) => {\n    updateState({ \n      rowsPerPage: newRowsPerPage, \n      currentPage: 1 \n    });\n    callbacks.onRowsPerPageChange?.(newRowsPerPage);\n  }, [updateState, callbacks]);\n\n  const handleRefresh = useCallback(() => {\n    callbacks.onRefresh?.();\n  }, [callbacks]);\n\n  const handleExport = useCallback(() => {\n    callbacks.onExport?.(processedData);\n  }, [callbacks, processedData]);\n\n  const renderCellContent = useCallback((column: TableColumn<T>, value: any, row: T, index: number) => {\n    if (column.render) {\n      return column.render(value, row, index);\n    }\n    \n    if (value == null) {\n      return <span className=\"text-muted-foreground\">—</span>;\n    }\n    \n    return String(value);\n  }, []);\n\n  const renderSortIcon = useCallback((column: TableColumn<T>) => {\n    if (!column.sortable) return null;\n    \n    if (sortColumn !== column.id) {\n      return (\n        <svg className=\"h-4 w-4 text-muted-foreground\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\" />\n        </svg>\n      );\n    }\n    \n    return (\n      <svg \n        className={cn('h-4 w-4', sortDirection === 'asc' ? 'text-primary' : 'text-primary')} \n        fill=\"none\" \n        viewBox=\"0 0 24 24\" \n        stroke=\"currentColor\"\n      >\n        <path \n          strokeLinecap=\"round\" \n          strokeLinejoin=\"round\" \n          strokeWidth={2} \n          d={sortDirection === 'asc' \n            ? \"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\" \n            : \"M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4\"\n          } \n        />\n      </svg>\n    );\n  }, [sortColumn, sortDirection]);\n\n  return (\n    <Card\n      nsmClassification={nsmClassification}\n      className={cn('w-full', className)}\n    >\n      {showHeader && (\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>{t.title}</CardTitle>\n              <CardDescription>{t.description}</CardDescription>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {showRefresh && (\n                <Button\n                  variant=\"outline\"\n                  size=\"md\"\n                  onClick={handleRefresh}\n                  disabled={loading}\n                  aria-label={t.refreshData}\n                >\n                  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                  </svg>\n                </Button>\n              )}\n              \n              {showExport && (\n                <Button\n                  variant=\"outline\"\n                  size=\"md\"\n                  onClick={handleExport}\n                  disabled={processedData.length === 0}\n                  aria-label={t.exportData}\n                >\n                  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                  </svg>\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Search and Selection Info */}\n          <div className=\"flex items-center justify-between pt-4\">\n            {showSearch && (\n              <div className=\"flex-1 max-w-sm\">\n                <Input\n                  placeholder={t.searchPlaceholder}\n                  value={globalFilter}\n                  onChange={handleGlobalFilter}\n                  leadingIcon={\n                    <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                    </svg>\n                  }\n                />\n              </div>\n            )}\n            \n            {selectedRows.size > 0 && (\n              <div className=\"text-sm text-muted-foreground\">\n                {selectedRows.size} {t.selectedCountLabel}\n              </div>\n            )}\n          </div>\n        </CardHeader>\n      )}\n\n      <CardContent className=\"p-0\">\n        {/* Loading/Error States */}\n        {loading && (\n          <div className=\"p-8 text-center\">\n            <div className=\"inline-flex items-center gap-3\">\n              <div className=\"h-5 w-5 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n              <span>{t.loadingMessage}</span>\n            </div>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"p-8 text-center text-destructive\">\n            {error}\n          </div>\n        )}\n\n        {!loading && !error && (\n          <>\n            {/* Table */}\n            <div \n              className={cn(\n                'relative overflow-auto border rounded-lg',\n                maxHeight && `max-h-[${maxHeight}]`\n              )}\n            >\n              <table \n                className=\"w-full text-sm\"\n                role=\"table\"\n                aria-label={t.tableAnnouncement.replace('{}', String(processedData.length)).replace('{}', String(columns.length))}\n              >\n                <thead \n                  className={cn(\n                    'bg-muted/50 border-b',\n                    stickyHeader && 'sticky top-0 z-10'\n                  )}\n                >\n                  <tr role=\"row\">\n                    {showRowSelection && (\n                      <th className=\"w-12 p-3\" role=\"columnheader\">\n                        <input\n                          type=\"checkbox\"\n                          checked={paginatedData.length > 0 && paginatedData.every(row => selectedRows.has(data.indexOf(row)))}\n                          onChange={handleSelectAll}\n                          className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                          aria-label={t.selectAllRows}\n                        />\n                      </th>\n                    )}\n                    \n                    {columns.map((column) => (\n                      <th\n                        key={String(column.id)}\n                        role=\"columnheader\"\n                        aria-sort={\n                          sortColumn === column.id \n                            ? sortDirection === 'asc' ? 'ascending' : 'descending'\n                            : column.sortable ? 'none' : undefined\n                        }\n                        className={cn(\n                          'p-3 text-left font-medium',\n                          column.align === 'center' && 'text-center',\n                          column.align === 'right' && 'text-right',\n                          column.sortable && 'cursor-pointer hover:bg-muted/70 transition-colors',\n                          !compact && 'py-4'\n                        )}\n                        style={{\n                          width: column.width,\n                          minWidth: column.minWidth,\n                          maxWidth: column.maxWidth\n                        }}\n                        onClick={() => handleSort(column)}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <span>{column.title}</span>\n                          {renderSortIcon(column)}\n                        </div>\n                      </th>\n                    ))}\n                    \n                    {showActions && actions.length > 0 && (\n                      <th className=\"w-32 p-3 text-center\" role=\"columnheader\">\n                        {t.actionsLabel}\n                      </th>\n                    )}\n                  </tr>\n                </thead>\n                \n                <tbody role=\"rowgroup\">\n                  {paginatedData.length === 0 ? (\n                    <tr>\n                      <td\n                        colSpan={columns.length + (showRowSelection ? 1 : 0) + (showActions && actions.length > 0 ? 1 : 0)}\n                        className=\"p-8 text-center text-muted-foreground\"\n                      >\n                        {t.noDataMessage}\n                      </td>\n                    </tr>\n                  ) : (\n                    paginatedData.map((row, index) => {\n                      const globalIndex = data.indexOf(row);\n                      const isSelected = selectedRows.has(globalIndex);\n                      \n                      return (\n                        <tr\n                          key={globalIndex}\n                          role=\"row\"\n                          className={cn(\n                            'border-b transition-colors',\n                            hoverable && 'hover:bg-muted/30',\n                            striped && index % 2 === 0 && 'bg-muted/20',\n                            isSelected && 'bg-primary/5 border-primary/20'\n                          )}\n                        >\n                          {showRowSelection && (\n                            <td className=\"p-3\" role=\"gridcell\">\n                              <input\n                                type=\"checkbox\"\n                                checked={isSelected}\n                                onChange={() => handleRowSelect(index, row)}\n                                className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                                aria-label={`${t.selectRow} ${index + 1}`}\n                              />\n                            </td>\n                          )}\n                          \n                          {columns.map((column) => (\n                            <td\n                              key={String(column.id)}\n                              role=\"gridcell\"\n                              className={cn(\n                                'p-3',\n                                column.align === 'center' && 'text-center',\n                                column.align === 'right' && 'text-right',\n                                !compact && 'py-4',\n                                column.nsmClassification && 'border-l-2',\n                                column.nsmClassification === 'OPEN' && 'border-l-green-600',\n                                column.nsmClassification === 'RESTRICTED' && 'border-l-yellow-600',\n                                column.nsmClassification === 'CONFIDENTIAL' && 'border-l-red-600',\n                                column.nsmClassification === 'SECRET' && 'border-l-gray-800'\n                              )}\n                            >\n                              {renderCellContent(column, row[column.id], row, index)}\n                            </td>\n                          ))}\n                          \n                          {showActions && actions.length > 0 && (\n                            <td className=\"p-3 text-center\" role=\"gridcell\">\n                              <div className=\"flex items-center justify-center gap-1\">\n                                {actions\n                                  .filter(action => !action.hidden?.(row))\n                                  .map((action) => (\n                                    <Button\n                                      key={action.id}\n                                      variant={action.variant || 'ghost'}\n                                      size=\"icon\"\n                                      onClick={() => action.action(row, index)}\n                                      disabled={action.disabled?.(row)}\n                                      aria-label={action.title}\n                                      className=\"h-8 w-8\"\n                                    >\n                                      {action.icon || '⚙️'}\n                                    </Button>\n                                  ))}\n                              </div>\n                            </td>\n                          )}\n                        </tr>\n                      );\n                    })\n                  )}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            {showPagination && totalPages > 1 && (\n              <div className=\"flex items-center justify-between px-4 py-4 border-t\">\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{t.rowsPerPageLabel}</span>\n                    <select\n                      value={rowsPerPage}\n                      onChange={(e) => handleRowsPerPageChange(Number(e.target.value))}\n                      className=\"border border-input rounded px-2 py-1 bg-background\"\n                    >\n                      {pageSizeOptions.map(size => (\n                        <option key={size} value={size}>\n                          {size}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  \n                  <span>\n                    {t.pageLabel} {currentPage} {t.ofLabel} {totalPages}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"md\"\n                    onClick={() => handlePageChange(1)}\n                    disabled={currentPage === 1}\n                    aria-label={t.firstPage}\n                  >\n                    ⟪\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"md\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1}\n                    aria-label={t.previousPage}\n                  >\n                    ⟨\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"md\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                    aria-label={t.nextPage}\n                  >\n                    ⟩\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"md\"\n                    onClick={() => handlePageChange(totalPages)}\n                    disabled={currentPage === totalPages}\n                    aria-label={t.lastPage}\n                  >\n                    ⟫\n                  </Button>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}"
    }
  ]
}