{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "settings-01",
  "type": "registry:block",
  "title": "Settings Page",
  "description": "Application settings with organized sections",
  "category": "patterns",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "card",
    "switch",
    "button",
    "input",
    "separator"
  ],
  "files": [
    {
      "path": "blocks/settings-01/settings-01.tsx",
      "type": "registry:component",
      "content": "/**\n * Settings-01 Block - Comprehensive Settings Interface\n * WCAG AAA compliant with tabbed navigation and Norwegian standards\n * Professional settings management with validation and persistence\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Input } from '../../components/input/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/card/card';\n\nexport interface SettingsCategory {\n  readonly id: string;\n  readonly title: string;\n  readonly description?: string;\n  readonly icon?: React.ReactNode;\n  readonly settings: SettingItem[];\n}\n\nexport interface SettingItem {\n  readonly id: string;\n  readonly key: string;\n  readonly title: string;\n  readonly description?: string;\n  readonly type: 'text' | 'email' | 'password' | 'number' | 'boolean' | 'select' | 'multiselect' | 'textarea';\n  readonly value: any;\n  readonly defaultValue?: any;\n  readonly required?: boolean;\n  readonly disabled?: boolean;\n  readonly placeholder?: string;\n  readonly options?: Array<{ readonly value: string; readonly label: string; readonly disabled?: boolean; }>;\n  readonly validation?: {\n    readonly pattern?: RegExp;\n    readonly minLength?: number;\n    readonly maxLength?: number;\n    readonly min?: number;\n    readonly max?: number;\n    readonly custom?: (value: any) => string | undefined;\n  };\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface SettingsTexts {\n  readonly settingsTitle: string;\n  readonly settingsDescription: string;\n  readonly saveChanges: string;\n  readonly resetToDefaults: string;\n  readonly cancelChanges: string;\n  readonly exportSettings: string;\n  readonly importSettings: string;\n  readonly searchSettings: string;\n  readonly noSettingsFound: string;\n  readonly unsavedChanges: string;\n  readonly settingsSaved: string;\n  readonly settingsReset: string;\n  readonly validationError: string;\n  readonly importSuccess: string;\n  readonly exportSuccess: string;\n  readonly requiredField: string;\n  readonly invalidValue: string;\n  readonly changesSavedAnnouncement: string;\n  readonly changesResetAnnouncement: string;\n  readonly searchResultsAnnouncement: string;\n  readonly enabled: string;\n  readonly disabled: string;\n  readonly loading: string;\n}\n\nexport interface SettingsState {\n  readonly activeCategory: string;\n  readonly searchQuery: string;\n  readonly values: Record<string, any>;\n  readonly originalValues: Record<string, any>;\n  readonly errors: Record<string, string>;\n  readonly loading: boolean;\n  readonly saving: boolean;\n  readonly importing: boolean;\n  readonly exporting: boolean;\n  readonly hasUnsavedChanges: boolean;\n}\n\nexport interface SettingsCallbacks {\n  readonly onSave: (values: Record<string, any>, changedKeys: string[]) => Promise<void>;\n  readonly onReset?: () => Promise<void>;\n  readonly onExport?: () => Promise<void>;\n  readonly onImport?: (file: File) => Promise<void>;\n  readonly onSettingChange?: (key: string, value: any, category: string) => void;\n  readonly onCategoryChange?: (categoryId: string) => void;\n  readonly onSearch?: (query: string) => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onStateChange?: (state: Partial<SettingsState>) => void;\n}\n\nexport interface Settings01Props {\n  readonly categories: SettingsCategory[];\n  readonly texts?: Partial<SettingsTexts>;\n  readonly callbacks: SettingsCallbacks;\n  readonly state?: Partial<SettingsState>;\n  readonly className?: string;\n  readonly showSearch?: boolean;\n  readonly showImportExport?: boolean;\n  readonly showResetButton?: boolean;\n  readonly autoSave?: boolean;\n  readonly validateOnChange?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly stickyNavigation?: boolean;\n}\n\nconst defaultTexts: SettingsTexts = {\n  settingsTitle: 'Innstillinger',\n  settingsDescription: 'Administrer dine applikasjonsinnstillinger og preferanser',\n  saveChanges: 'Lagre endringer',\n  resetToDefaults: 'Tilbakestill til standardverdier',\n  cancelChanges: 'Avbryt endringer',\n  exportSettings: 'Eksporter innstillinger',\n  importSettings: 'Importer innstillinger',\n  searchSettings: 'Søk i innstillinger...',\n  noSettingsFound: 'Ingen innstillinger funnet',\n  unsavedChanges: 'Du har ulagrede endringer',\n  settingsSaved: 'Innstillinger lagret',\n  settingsReset: 'Innstillinger tilbakestilt',\n  validationError: 'Valideringsfeil',\n  importSuccess: 'Innstillinger importert',\n  exportSuccess: 'Innstillinger eksportert',\n  requiredField: 'Dette feltet er påkrevd',\n  invalidValue: 'Ugyldig verdi',\n  changesSavedAnnouncement: 'Innstillinger har blitt lagret',\n  changesResetAnnouncement: 'Innstillinger har blitt tilbakestilt',\n  searchResultsAnnouncement: 'Søkeresultater oppdatert',\n  enabled: 'Aktivert',\n  disabled: 'Deaktivert',\n  loading: 'Laster...'\n};\n\nconst defaultState: SettingsState = {\n  activeCategory: '',\n  searchQuery: '',\n  values: {},\n  originalValues: {},\n  errors: {},\n  loading: false,\n  saving: false,\n  importing: false,\n  exporting: false,\n  hasUnsavedChanges: false\n};\n\nexport const Settings01: React.FC<Settings01Props> = ({\n  categories,\n  texts = {},\n  callbacks,\n  state = {},\n  className,\n  showSearch = true,\n  showImportExport = true,\n  showResetButton = true,\n  autoSave = false,\n  validateOnChange = true,\n  nsmClassification,\n  stickyNavigation = false\n}) => {\n  const t = { ...defaultTexts, ...texts };\n  const currentState = { ...defaultState, activeCategory: categories[0]?.id || '', ...state };\n  \n  const {\n    activeCategory,\n    searchQuery,\n    values,\n    originalValues,\n    errors,\n    loading,\n    saving,\n    importing,\n    exporting,\n    hasUnsavedChanges\n  } = currentState;\n\n  // Update state helper\n  const updateState = useCallback((updates: Partial<SettingsState>) => {\n    callbacks.onStateChange?.(updates);\n  }, [callbacks]);\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Get initial values from categories\n  const initialValues = useMemo(() => {\n    const vals: Record<string, any> = {};\n    categories.forEach(category => {\n      category.settings.forEach(setting => {\n        vals[setting.key] = setting.value ?? setting.defaultValue;\n      });\n    });\n    return vals;\n  }, [categories]);\n\n  // Set initial values if not already set\n  React.useEffect(() => {\n    if (Object.keys(values).length === 0) {\n      updateState({ \n        values: initialValues, \n        originalValues: { ...initialValues } \n      });\n    }\n  }, [initialValues, values, updateState]);\n\n  // Filter categories and settings based on search\n  const filteredCategories = useMemo(() => {\n    if (!searchQuery) return categories;\n    \n    return categories\n      .map(category => ({\n        ...category,\n        settings: category.settings.filter(setting =>\n          setting.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          setting.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          setting.key.toLowerCase().includes(searchQuery.toLowerCase())\n        )\n      }))\n      .filter(category => category.settings.length > 0);\n  }, [categories, searchQuery]);\n\n  // Validate setting value\n  const validateSetting = useCallback((setting: SettingItem, value: any): string | undefined => {\n    if (setting.required && (value === undefined || value === null || value === '')) {\n      return t.requiredField;\n    }\n\n    if (setting.validation) {\n      const { pattern, minLength, maxLength, min, max, custom } = setting.validation;\n      \n      if (pattern && typeof value === 'string' && !pattern.test(value)) {\n        return t.invalidValue;\n      }\n      \n      if (minLength && typeof value === 'string' && value.length < minLength) {\n        return `Minimum ${minLength} tegn`;\n      }\n      \n      if (maxLength && typeof value === 'string' && value.length > maxLength) {\n        return `Maksimum ${maxLength} tegn`;\n      }\n      \n      if (min && typeof value === 'number' && value < min) {\n        return `Minimum verdi er ${min}`;\n      }\n      \n      if (max && typeof value === 'number' && value > max) {\n        return `Maksimum verdi er ${max}`;\n      }\n      \n      if (custom) {\n        return custom(value);\n      }\n    }\n\n    return undefined;\n  }, [t]);\n\n  // Event handlers\n  const handleCategoryChange = useCallback((categoryId: string) => {\n    updateState({ activeCategory: categoryId });\n    callbacks.onCategoryChange?.(categoryId);\n  }, [updateState, callbacks]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value;\n    updateState({ searchQuery: query });\n    callbacks.onSearch?.(query);\n    \n    if (query) {\n      announce(`${t.searchResultsAnnouncement} - ${filteredCategories.length} kategorier funnet`);\n    }\n  }, [updateState, callbacks, announce, t, filteredCategories.length]);\n\n  const handleSettingChange = useCallback((setting: SettingItem, newValue: any) => {\n    const newValues = { ...values, [setting.key]: newValue };\n    const newErrors = { ...errors };\n    \n    // Validate if enabled\n    if (validateOnChange) {\n      const error = validateSetting(setting, newValue);\n      if (error) {\n        newErrors[setting.key] = error;\n      } else {\n        delete newErrors[setting.key];\n      }\n    }\n    \n    // Check for changes\n    const hasChanges = Object.keys(newValues).some(key => \n      newValues[key] !== originalValues[key]\n    );\n    \n    updateState({ \n      values: newValues, \n      errors: newErrors,\n      hasUnsavedChanges: hasChanges\n    });\n    \n    callbacks.onSettingChange?.(setting.key, newValue, activeCategory);\n    \n    // Auto-save if enabled and no errors\n    if (autoSave && Object.keys(newErrors).length === 0) {\n      handleSave();\n    }\n  }, [\n    values, errors, originalValues, validateOnChange, validateSetting,\n    updateState, callbacks, activeCategory, autoSave\n  ]);\n\n  const handleSave = useCallback(async () => {\n    if (saving) return;\n\n    // Validate all settings\n    const newErrors: Record<string, string> = {};\n    categories.forEach(category => {\n      category.settings.forEach(setting => {\n        const error = validateSetting(setting, values[setting.key]);\n        if (error) {\n          newErrors[setting.key] = error;\n        }\n      });\n    });\n\n    if (Object.keys(newErrors).length > 0) {\n      updateState({ errors: newErrors });\n      announce(`${t.validationError}: ${Object.keys(newErrors).length} feil funnet`);\n      return;\n    }\n\n    // Get changed keys\n    const changedKeys = Object.keys(values).filter(key => \n      values[key] !== originalValues[key]\n    );\n\n    if (changedKeys.length === 0) {\n      announce('Ingen endringer å lagre');\n      return;\n    }\n\n    try {\n      updateState({ saving: true });\n      await callbacks.onSave(values, changedKeys);\n      updateState({ \n        originalValues: { ...values }, \n        hasUnsavedChanges: false \n      });\n      announce(t.changesSavedAnnouncement);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Lagring feilet';\n      announce(`Feil ved lagring: ${errorMessage}`);\n    } finally {\n      updateState({ saving: false });\n    }\n  }, [\n    saving, categories, validateSetting, values, originalValues,\n    updateState, announce, t, callbacks\n  ]);\n\n  const handleReset = useCallback(async () => {\n    if (!callbacks.onReset) {\n      // Local reset\n      updateState({ \n        values: { ...initialValues }, \n        originalValues: { ...initialValues },\n        hasUnsavedChanges: false,\n        errors: {}\n      });\n      announce(t.changesResetAnnouncement);\n      return;\n    }\n\n    try {\n      updateState({ loading: true });\n      await callbacks.onReset();\n      announce(t.changesResetAnnouncement);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Tilbakestilling feilet';\n      announce(`Feil ved tilbakestilling: ${errorMessage}`);\n    } finally {\n      updateState({ loading: false });\n    }\n  }, [callbacks, updateState, announce, t, initialValues]);\n\n  const handleExport = useCallback(async () => {\n    if (!callbacks.onExport || exporting) return;\n\n    try {\n      updateState({ exporting: true });\n      await callbacks.onExport();\n      announce(t.exportSuccess);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Eksport feilet';\n      announce(`Feil ved eksport: ${errorMessage}`);\n    } finally {\n      updateState({ exporting: false });\n    }\n  }, [callbacks, exporting, updateState, announce, t]);\n\n  const handleImport = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file || !callbacks.onImport || importing) return;\n\n    try {\n      updateState({ importing: true });\n      await callbacks.onImport(file);\n      announce(t.importSuccess);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Import feilet';\n      announce(`Feil ved import: ${errorMessage}`);\n    } finally {\n      updateState({ importing: false });\n      // Reset file input\n      e.target.value = '';\n    }\n  }, [callbacks, importing, updateState, announce, t]);\n\n  // Render setting input\n  const renderSettingInput = useCallback((setting: SettingItem) => {\n    const value = values[setting.key] ?? setting.defaultValue;\n    const error = errors[setting.key];\n    const commonProps = {\n      id: `setting-${setting.key}`,\n      disabled: setting.disabled || loading || saving,\n      error: !!error,\n      helperText: error || setting.description,\n      nsmClassification: setting.nsmClassification\n    };\n\n    switch (setting.type) {\n      case 'text':\n      case 'email':\n        return (\n          <Input\n            {...commonProps}\n            type={setting.type}\n            value={value || ''}\n            onChange={(e) => handleSettingChange(setting, e.target.value)}\n            placeholder={setting.placeholder}\n            required={setting.required}\n          />\n        );\n\n      case 'password':\n        return (\n          <Input\n            {...commonProps}\n            type=\"password\"\n            value={value || ''}\n            onChange={(e) => handleSettingChange(setting, e.target.value)}\n            placeholder={setting.placeholder}\n            required={setting.required}\n          />\n        );\n\n      case 'number':\n        return (\n          <Input\n            {...commonProps}\n            type=\"number\"\n            value={value || ''}\n            onChange={(e) => handleSettingChange(setting, Number(e.target.value))}\n            placeholder={setting.placeholder}\n            required={setting.required}\n            min={setting.validation?.min}\n            max={setting.validation?.max}\n          />\n        );\n\n      case 'textarea':\n        return (\n          <textarea\n            {...commonProps}\n            value={value || ''}\n            onChange={(e) => handleSettingChange(setting, e.target.value)}\n            placeholder={setting.placeholder}\n            required={setting.required}\n            rows={4}\n            className={cn(\n              'flex w-full rounded-lg border-2 border-input bg-background px-4 py-3 text-base',\n              'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20 focus:border-primary',\n              'disabled:cursor-not-allowed disabled:opacity-50',\n              error && 'border-destructive focus:ring-destructive/20 focus:border-destructive'\n            )}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <div className=\"flex items-center space-x-3\">\n            <input\n              type=\"checkbox\"\n              id={`setting-${setting.key}`}\n              checked={Boolean(value)}\n              onChange={(e) => handleSettingChange(setting, e.target.checked)}\n              disabled={setting.disabled || loading || saving}\n              className=\"h-5 w-5 text-primary focus:ring-primary border-gray-300 rounded\"\n            />\n            <label\n              htmlFor={`setting-${setting.key}`}\n              className=\"text-sm font-medium text-foreground select-none\"\n            >\n              {value ? t.enabled : t.disabled}\n            </label>\n          </div>\n        );\n\n      case 'select':\n        return (\n          <select\n            {...commonProps}\n            value={value || ''}\n            onChange={(e) => handleSettingChange(setting, e.target.value)}\n            required={setting.required}\n            className={cn(\n              'flex w-full h-14 rounded-lg border-2 border-input bg-background px-4 py-3 text-base',\n              'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20 focus:border-primary',\n              'disabled:cursor-not-allowed disabled:opacity-50',\n              error && 'border-destructive focus:ring-destructive/20 focus:border-destructive'\n            )}\n          >\n            {!setting.required && <option value=\"\">Velg...</option>}\n            {setting.options?.map(option => (\n              <option\n                key={option.value}\n                value={option.value}\n                disabled={option.disabled}\n              >\n                {option.label}\n              </option>\n            ))}\n          </select>\n        );\n\n      case 'multiselect':\n        const selectedValues = Array.isArray(value) ? value : [];\n        return (\n          <div className=\"space-y-2\">\n            {setting.options?.map(option => (\n              <div key={option.value} className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  id={`${setting.key}-${option.value}`}\n                  checked={selectedValues.includes(option.value)}\n                  onChange={(e) => {\n                    const newValue = e.target.checked\n                      ? [...selectedValues, option.value]\n                      : selectedValues.filter(v => v !== option.value);\n                    handleSettingChange(setting, newValue);\n                  }}\n                  disabled={option.disabled || setting.disabled || loading || saving}\n                  className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <label\n                  htmlFor={`${setting.key}-${option.value}`}\n                  className=\"text-sm text-foreground select-none\"\n                >\n                  {option.label}\n                </label>\n              </div>\n            ))}\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  }, [values, errors, handleSettingChange, loading, saving, t]);\n\n  const activeCategories = searchQuery ? filteredCategories : categories;\n  const currentCategory = activeCategories.find(cat => cat.id === activeCategory) || activeCategories[0];\n\n  return (\n    <div className={cn('flex flex-col gap-6', className)}>\n      {/* Header */}\n      <Card nsmClassification={nsmClassification}>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-3xl\">{t.settingsTitle}</CardTitle>\n              <CardDescription className=\"text-lg mt-2\">\n                {t.settingsDescription}\n              </CardDescription>\n            </div>\n\n            {/* Header Actions */}\n            <div className=\"flex items-center gap-3\">\n              {showImportExport && (\n                <>\n                  {callbacks.onExport && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleExport}\n                      loading={exporting}\n                      disabled={loading || saving || importing}\n                      leftIcon={\n                        <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                        </svg>\n                      }\n                    >\n                      {t.exportSettings}\n                    </Button>\n                  )}\n\n                  {callbacks.onImport && (\n                    <div>\n                      <input\n                        type=\"file\"\n                        accept=\".json\"\n                        onChange={handleImport}\n                        disabled={loading || saving || importing || exporting}\n                        className=\"hidden\"\n                        id=\"import-settings\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => document.getElementById('import-settings')?.click()}\n                        loading={importing}\n                        disabled={loading || saving || exporting}\n                        leftIcon={\n                          <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\" />\n                          </svg>\n                        }\n                      >\n                        {t.importSettings}\n                      </Button>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Search */}\n          {showSearch && (\n            <div className=\"mt-6\">\n              <Input\n                placeholder={t.searchSettings}\n                value={searchQuery}\n                onChange={handleSearch}\n                disabled={loading}\n                leadingIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                  </svg>\n                }\n              />\n            </div>\n          )}\n\n          {/* Unsaved changes warning */}\n          {hasUnsavedChanges && (\n            <div className=\"mt-4 p-4 rounded-lg bg-yellow-50 border border-yellow-200\">\n              <div className=\"flex items-center gap-2 text-yellow-800\">\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                </svg>\n                <span className=\"font-medium\">{t.unsavedChanges}</span>\n              </div>\n            </div>\n          )}\n        </CardHeader>\n      </Card>\n\n      {/* Main Content */}\n      <div className=\"flex gap-6\">\n        {/* Category Navigation */}\n        <div className={cn('w-64 flex-shrink-0', stickyNavigation && 'sticky top-6 self-start')}>\n          <Card>\n            <CardContent className=\"p-4\">\n              <nav className=\"space-y-2\">\n                {activeCategories.map(category => (\n                  <button\n                    key={category.id}\n                    onClick={() => handleCategoryChange(category.id)}\n                    className={cn(\n                      'flex items-center gap-3 w-full p-3 rounded-lg text-left transition-colors',\n                      'hover:bg-accent',\n                      activeCategory === category.id && 'bg-primary text-primary-foreground'\n                    )}\n                    disabled={loading}\n                  >\n                    {category.icon && (\n                      <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n                        {category.icon}\n                      </span>\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium truncate\">{category.title}</div>\n                      {category.description && (\n                        <div className=\"text-xs opacity-75 truncate\">\n                          {category.description}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-xs opacity-60\">\n                      {category.settings.length}\n                    </div>\n                  </button>\n                ))}\n              </nav>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Settings Content */}\n        <div className=\"flex-1\">\n          {loading ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"inline-flex items-center gap-3\">\n                  <div className=\"h-5 w-5 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span>{t.loading}</span>\n                </div>\n              </CardContent>\n            </Card>\n          ) : !currentCategory ? (\n            <Card>\n              <CardContent className=\"p-8 text-center text-muted-foreground\">\n                {t.noSettingsFound}\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  {currentCategory.icon && (\n                    <span aria-hidden=\"true\">{currentCategory.icon}</span>\n                  )}\n                  {currentCategory.title}\n                </CardTitle>\n                {currentCategory.description && (\n                  <CardDescription>{currentCategory.description}</CardDescription>\n                )}\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-8\">\n                  {currentCategory.settings.map(setting => (\n                    <div key={setting.key} className=\"space-y-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <label\n                            htmlFor={`setting-${setting.key}`}\n                            className=\"text-sm font-medium text-foreground block\"\n                          >\n                            {setting.title}\n                            {setting.required && (\n                              <span className=\"text-destructive ml-1\">*</span>\n                            )}\n                          </label>\n                          {setting.description && setting.type !== 'boolean' && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {setting.description}\n                            </p>\n                          )}\n                        </div>\n                        \n                        {setting.nsmClassification && (\n                          <span className={cn(\n                            'text-xs px-2 py-1 rounded ml-4 flex-shrink-0',\n                            setting.nsmClassification === 'OPEN' && 'bg-green-100 text-green-700',\n                            setting.nsmClassification === 'RESTRICTED' && 'bg-yellow-100 text-yellow-700',\n                            setting.nsmClassification === 'CONFIDENTIAL' && 'bg-red-100 text-red-700',\n                            setting.nsmClassification === 'SECRET' && 'bg-gray-100 text-gray-700'\n                          )}>\n                            {setting.nsmClassification}\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"max-w-md\">\n                        {renderSettingInput(setting)}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          {currentCategory && !autoSave && (\n            <Card className=\"mt-6\">\n              <CardContent className=\"flex items-center justify-between p-6\">\n                <div className=\"flex gap-3\">\n                  <Button\n                    onClick={handleSave}\n                    loading={saving}\n                    disabled={loading || saving || !hasUnsavedChanges}\n                    leftIcon={\n                      <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                      </svg>\n                    }\n                  >\n                    {t.saveChanges}\n                  </Button>\n\n                  {hasUnsavedChanges && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => updateState({ \n                        values: { ...originalValues }, \n                        hasUnsavedChanges: false,\n                        errors: {}\n                      })}\n                      disabled={loading || saving}\n                    >\n                      {t.cancelChanges}\n                    </Button>\n                  )}\n                </div>\n\n                {showResetButton && (callbacks.onReset || Object.keys(originalValues).length > 0) && (\n                  <Button\n                    variant=\"destructive\"\n                    onClick={handleReset}\n                    disabled={loading || saving}\n                    leftIcon={\n                      <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                      </svg>\n                    }\n                  >\n                    {t.resetToDefaults}\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};"
    }
  ]
}