{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "tabs",
  "type": "registry:component",
  "title": "Tabs",
  "description": "Tabbed content navigation",
  "category": "components",
  "categories": [
    "components",
    "navigation"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/tabs/tabs.tsx",
      "type": "registry:component",
      "content": "/**\n * Tabs Component - Tabbed Interface System\n * CLAUDE.md Compliant: Professional sizing and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n * Norwegian localization support\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// TABS ROOT\n// =============================================================================\n\nconst tabsVariants = cva(\n  [\n    'w-full focus-within:outline-none'\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: 'flex flex-col',\n        vertical: 'flex flex-row'\n      }\n    },\n    defaultVariants: {\n      orientation: 'horizontal'\n    }\n  }\n);\n\nconst Tabs = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root> &\n    VariantProps<typeof tabsVariants>\n>(({ className, orientation, ...props }, ref) => (\n  <TabsPrimitive.Root\n    ref={ref}\n    orientation={orientation}\n    className={cn(tabsVariants({ orientation }), className)}\n    {...props}\n  />\n));\nTabs.displayName = TabsPrimitive.Root.displayName;\n\n// =============================================================================\n// TABS LIST\n// =============================================================================\n\nconst tabsListVariants = cva(\n  [\n    'inline-flex items-center text-muted-foreground',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n    'focus-visible:ring-offset-background'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'h-12 justify-center rounded-lg bg-muted p-1',\n          'border border-border shadow-sm'\n        ],\n        line: [\n          'h-auto justify-start border-b border-border bg-transparent p-0',\n          'space-x-8'\n        ],\n        pills: [\n          'h-12 justify-start bg-transparent p-1 gap-1',\n          'flex-wrap'\n        ],\n        vertical: [\n          'flex-col h-auto w-48 justify-start border-r border-border bg-transparent p-0',\n          'space-y-1'\n        ]\n      },\n      size: {\n        sm: 'h-10 text-sm',\n        md: 'h-12 text-base',\n        lg: 'h-14 text-lg'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List> &\n    VariantProps<typeof tabsListVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(tabsListVariants({ variant, size }), className)}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\n// =============================================================================\n// TABS TRIGGER\n// =============================================================================\n\nconst tabsTriggerVariants = cva(\n  [\n    'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-2',\n    'text-sm font-medium ring-offset-background transition-all',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'min-h-[2.75rem]', // Professional touch target (44px)\n    'gap-2',\n    'contrast-more:data-[state=active]:border-2 contrast-more:data-[state=active]:border-primary'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'data-[state=active]:bg-background data-[state=active]:text-foreground',\n          'data-[state=active]:shadow-sm hover:bg-background/50',\n          'data-[state=active]:border data-[state=active]:border-border'\n        ],\n        line: [\n          'rounded-none border-b-2 border-transparent bg-transparent px-4 py-3',\n          'data-[state=active]:border-primary data-[state=active]:text-foreground',\n          'hover:text-foreground hover:border-muted-foreground/50'\n        ],\n        pills: [\n          'rounded-full bg-muted/50 hover:bg-muted',\n          'data-[state=active]:bg-background data-[state=active]:text-foreground',\n          'data-[state=active]:shadow-sm data-[state=active]:border data-[state=active]:border-border'\n        ],\n        vertical: [\n          'w-full justify-start rounded-md px-3 py-3',\n          'data-[state=active]:bg-muted data-[state=active]:text-foreground',\n          'hover:bg-muted/50'\n        ]\n      },\n      size: {\n        sm: 'h-8 px-3 text-xs min-h-[2rem]',\n        md: 'h-10 px-4 text-sm min-h-[2.75rem]',\n        lg: 'h-12 px-6 text-base min-h-[3rem]'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger> &\n    VariantProps<typeof tabsTriggerVariants> & {\n      readonly icon?: React.ReactNode;\n      readonly badge?: string | number;\n    }\n>(({ className, variant, size, icon, badge, children, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(tabsTriggerVariants({ variant, size }), className)}\n    {...props}\n  >\n    {icon && (\n      <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n        {icon}\n      </span>\n    )}\n    \n    <span className=\"truncate\">\n      {children}\n    </span>\n    \n    {badge && (\n      <span className=\"ml-1 rounded-full bg-primary/10 px-1.5 py-0.5 text-xs text-primary\">\n        {badge}\n      </span>\n    )}\n  </TabsPrimitive.Trigger>\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\n// =============================================================================\n// TABS CONTENT\n// =============================================================================\n\nconst tabsContentVariants = cva(\n  [\n    'mt-2 ring-offset-background',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n    'data-[state=active]:animate-in data-[state=active]:fade-in-0 data-[state=active]:zoom-in-95',\n    'data-[state=inactive]:animate-out data-[state=inactive]:fade-out-0 data-[state=inactive]:zoom-out-95'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        card: 'rounded-lg border bg-card text-card-foreground shadow-sm p-6',\n        padded: 'p-4'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content> &\n    VariantProps<typeof tabsContentVariants>\n>(({ className, variant, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(tabsContentVariants({ variant }), className)}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\n// =============================================================================\n// ADVANCED TABS COMPONENT\n// =============================================================================\n\nexport interface TabItem {\n  readonly value: string;\n  readonly label: string;\n  readonly content: React.ReactNode;\n  readonly icon?: React.ReactNode;\n  readonly badge?: string | number;\n  readonly disabled?: boolean;\n  readonly description?: string;\n}\n\nexport interface AdvancedTabsProps {\n  readonly items: readonly TabItem[];\n  readonly defaultValue?: string;\n  readonly value?: string;\n  readonly onValueChange?: (value: string) => void;\n  readonly variant?: 'default' | 'line' | 'pills' | 'vertical';\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly contentVariant?: 'default' | 'card' | 'padded';\n  readonly className?: string;\n  readonly orientation?: 'horizontal' | 'vertical';\n  readonly activationMode?: 'automatic' | 'manual';\n  readonly ariaLabel?: string;\n  readonly allowDeselect?: boolean;\n}\n\nconst AdvancedTabs = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Root>,\n  AdvancedTabsProps\n>(({ \n  items,\n  defaultValue,\n  value,\n  onValueChange,\n  variant = 'default',\n  size = 'md',\n  contentVariant = 'default',\n  className,\n  orientation = 'horizontal',\n  activationMode = 'automatic',\n  ariaLabel = 'Faner', // Norwegian for \"Tabs\"\n  allowDeselect = false,\n  ...props \n}, ref) => {\n  const [internalValue, setInternalValue] = React.useState(\n    value || defaultValue || items[0]?.value || ''\n  );\n\n  const currentValue = value !== undefined ? value : internalValue;\n\n  const handleValueChange = (newValue: string) => {\n    // Handle deselection if allowed\n    if (allowDeselect && currentValue === newValue) {\n      newValue = '';\n    }\n\n    setInternalValue(newValue);\n    onValueChange?.(newValue);\n  };\n\n  const tabsOrientation = variant === 'vertical' ? 'vertical' : orientation;\n\n  return (\n    <Tabs\n      ref={ref}\n      value={currentValue}\n      onValueChange={handleValueChange}\n      orientation={tabsOrientation}\n      activationMode={activationMode}\n      className={className}\n      {...props}\n    >\n      <TabsList \n        variant={variant} \n        size={size}\n        aria-label={ariaLabel}\n      >\n        {items.map((item) => (\n          <TabsTrigger\n            key={item.value}\n            value={item.value}\n            variant={variant}\n            size={size}\n            icon={item.icon}\n            badge={item.badge}\n            disabled={item.disabled}\n            aria-label={item.description || item.label}\n          >\n            {item.label}\n          </TabsTrigger>\n        ))}\n      </TabsList>\n      \n      {items.map((item) => (\n        <TabsContent\n          key={`content-${item.value}`}\n          value={item.value}\n          variant={contentVariant}\n          className=\"w-full\"\n        >\n          {item.content}\n        </TabsContent>\n      ))}\n    </Tabs>\n  );\n});\nAdvancedTabs.displayName = 'AdvancedTabs';\n\n// =============================================================================\n// CONTROLLED TABS HOOK\n// =============================================================================\n\nexport interface UseTabsOptions {\n  readonly defaultValue?: string;\n  readonly items: readonly TabItem[];\n  readonly onChange?: (value: string) => void;\n}\n\nexport function useTabs({ defaultValue, items, onChange }: UseTabsOptions) {\n  const [activeTab, setActiveTab] = React.useState(\n    defaultValue || items[0]?.value || ''\n  );\n\n  const handleTabChange = React.useCallback((value: string) => {\n    setActiveTab(value);\n    onChange?.(value);\n  }, [onChange]);\n\n  const activeTabItem = React.useMemo(\n    () => items.find(item => item.value === activeTab),\n    [items, activeTab]\n  );\n\n  return {\n    activeTab,\n    setActiveTab: handleTabChange,\n    activeTabItem,\n    isActive: (value: string) => activeTab === value\n  };\n}\n\n// =============================================================================\n// LAZY TABS (Only render active content)\n// =============================================================================\n\nexport interface LazyTabsProps extends AdvancedTabsProps {\n  readonly lazy?: boolean;\n}\n\nconst LazyTabs = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Root>,\n  LazyTabsProps\n>(({ lazy = true, items, ...props }, ref) => {\n  const [loadedTabs, setLoadedTabs] = React.useState<Set<string>>(\n    new Set([props.defaultValue || props.value || items[0]?.value].filter(Boolean))\n  );\n\n  const handleValueChange = (value: string) => {\n    if (lazy) {\n      setLoadedTabs(prev => new Set([...prev, value]));\n    }\n    props.onValueChange?.(value);\n  };\n\n  const filteredItems = lazy \n    ? items.map(item => ({\n        ...item,\n        content: loadedTabs.has(item.value) ? item.content : null\n      }))\n    : items;\n\n  return (\n    <AdvancedTabs\n      ref={ref}\n      {...props}\n      items={filteredItems}\n      onValueChange={handleValueChange}\n    />\n  );\n});\nLazyTabs.displayName = 'LazyTabs';\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  AdvancedTabs,\n  LazyTabs,\n  tabsVariants,\n  tabsListVariants,\n  tabsTriggerVariants,\n  tabsContentVariants,\n};\n\nexport type { TabItem, AdvancedTabsProps, LazyTabsProps, UseTabsOptions, VariantProps };"
    }
  ]
}