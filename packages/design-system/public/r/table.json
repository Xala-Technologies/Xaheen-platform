{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "table",
  "type": "registry:component",
  "title": "Table",
  "description": "Data tables with sorting and accessibility",
  "category": "components",
  "categories": [
    "components",
    "display",
    "data"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/table/table.tsx",
      "type": "registry:component",
      "content": "/**\n * Table Component - Professional Data Display Implementation\n * CLAUDE.md Compliant: Professional styling and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n */\n\nimport React, { useState, useMemo, useCallback, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// TABLE VARIANTS\n// =============================================================================\n\nconst tableVariants = cva(\n  [\n    'w-full border-collapse border-spacing-0',\n    'text-sm text-left',\n    'bg-card text-card-foreground',\n    'rounded-lg overflow-hidden',\n    'shadow-sm border border-border'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-background',\n        card: 'bg-card border border-border shadow-md',\n        minimal: 'bg-transparent border-0 shadow-none',\n        striped: 'bg-background [&>tbody>tr:nth-child(even)]:bg-muted/50'\n      },\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg'\n      },\n      density: {\n        compact: '[&_th]:py-2 [&_th]:px-3 [&_td]:py-2 [&_td]:px-3',\n        comfortable: '[&_th]:py-3 [&_th]:px-4 [&_td]:py-3 [&_td]:px-4',\n        spacious: '[&_th]:py-4 [&_th]:px-6 [&_td]:py-4 [&_td]:px-6'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      density: 'comfortable'\n    }\n  }\n);\n\nconst tableHeaderVariants = cva(\n  [\n    'border-b bg-muted/50',\n    'font-semibold text-muted-foreground',\n    'whitespace-nowrap'\n  ]\n);\n\nconst tableCellVariants = cva(\n  [\n    'border-b border-border last:border-r-0',\n    'align-top',\n    'transition-colors duration-200'\n  ]\n);\n\nconst tableRowVariants = cva(\n  [\n    'transition-colors duration-200',\n    'hover:bg-muted/50',\n    'focus-within:bg-muted/50',\n    '[&:has([role=checkbox][aria-checked=true])]:bg-muted'\n  ],\n  {\n    variants: {\n      clickable: {\n        true: 'cursor-pointer active:bg-muted/75',\n        false: ''\n      },\n      selected: {\n        true: 'bg-primary/10 hover:bg-primary/20',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      clickable: false,\n      selected: false\n    }\n  }\n);\n\nconst sortButtonVariants = cva(\n  [\n    'inline-flex items-center gap-1',\n    'font-semibold text-left',\n    'transition-colors duration-200',\n    'hover:text-foreground',\n    'focus:outline-none focus:text-foreground',\n    'disabled:opacity-50 disabled:cursor-not-allowed'\n  ]\n);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface ColumnDef<T = any> {\n  readonly id: string;\n  readonly header: string;\n  readonly accessorKey?: keyof T;\n  readonly cell?: (value: T[keyof T], row: T, index: number) => React.ReactNode;\n  readonly sortable?: boolean;\n  readonly filterable?: boolean;\n  readonly width?: string | number;\n  readonly minWidth?: string | number;\n  readonly maxWidth?: string | number;\n  readonly align?: 'left' | 'center' | 'right';\n  readonly sticky?: 'left' | 'right';\n}\n\nexport interface SortConfig {\n  readonly key: string;\n  readonly direction: 'asc' | 'desc';\n}\n\nexport interface TableProps<T = any> extends \n  React.TableHTMLAttributes<HTMLTableElement>,\n  VariantProps<typeof tableVariants> {\n  readonly data: readonly T[];\n  readonly columns: readonly ColumnDef<T>[];\n  readonly loading?: boolean;\n  readonly sortable?: boolean;\n  readonly selectable?: boolean;\n  readonly onRowClick?: (row: T, index: number) => void;\n  readonly onSort?: (sortConfig: SortConfig | null) => void;\n  readonly onSelectionChange?: (selectedRows: readonly T[]) => void;\n  readonly selectedRows?: readonly T[];\n  readonly getRowId?: (row: T) => string | number;\n  readonly emptyMessage?: string;\n  readonly stickyHeader?: boolean;\n  readonly maxHeight?: string;\n  readonly caption?: string;\n  readonly ariaLabel?: string;\n}\n\nexport interface TableHeaderProps extends React.HTMLAttributes<HTMLTableSectionElement> {\n  readonly children: React.ReactNode;\n}\n\nexport interface TableBodyProps extends React.HTMLAttributes<HTMLTableSectionElement> {\n  readonly children: React.ReactNode;\n}\n\nexport interface TableRowProps extends \n  React.HTMLAttributes<HTMLTableRowElement>,\n  VariantProps<typeof tableRowVariants> {\n  readonly children: React.ReactNode;\n}\n\nexport interface TableCellProps extends React.HTMLAttributes<HTMLTableCellElement> {\n  readonly children: React.ReactNode;\n  readonly header?: boolean;\n  readonly align?: 'left' | 'center' | 'right';\n  readonly sticky?: 'left' | 'right';\n  readonly width?: string | number;\n}\n\n// =============================================================================\n// SORT ICON COMPONENT\n// =============================================================================\n\nconst SortIcon: React.FC<{ readonly direction: 'asc' | 'desc' | null }> = ({ direction }) => (\n  <span className=\"inline-flex flex-col ml-1\" aria-hidden=\"true\">\n    <svg \n      className={cn(\n        'w-3 h-3 -mb-1 transition-colors',\n        direction === 'asc' ? 'text-foreground' : 'text-muted-foreground'\n      )} \n      viewBox=\"0 0 24 24\" \n      fill=\"currentColor\"\n    >\n      <path d=\"M7 14l5-5 5 5z\" />\n    </svg>\n    <svg \n      className={cn(\n        'w-3 h-3 transition-colors',\n        direction === 'desc' ? 'text-foreground' : 'text-muted-foreground'\n      )} \n      viewBox=\"0 0 24 24\" \n      fill=\"currentColor\"\n    >\n      <path d=\"M7 10l5 5 5-5z\" />\n    </svg>\n  </span>\n);\n\n// =============================================================================\n// LOADING SKELETON\n// =============================================================================\n\nconst TableSkeleton: React.FC<{ readonly columns: number; readonly rows?: number }> = ({ \n  columns, \n  rows = 5 \n}) => (\n  <div className=\"space-y-3\">\n    {/* Header skeleton */}\n    <div className=\"flex gap-4\">\n      {Array.from({ length: columns }).map((_, index) => (\n        <div key={index} className=\"h-4 bg-muted animate-pulse rounded flex-1\" />\n      ))}\n    </div>\n    \n    {/* Rows skeleton */}\n    {Array.from({ length: rows }).map((_, rowIndex) => (\n      <div key={rowIndex} className=\"flex gap-4\">\n        {Array.from({ length: columns }).map((_, colIndex) => (\n          <div key={colIndex} className=\"h-6 bg-muted/50 animate-pulse rounded flex-1\" />\n        ))}\n      </div>\n    ))}\n  </div>\n);\n\n// =============================================================================\n// TABLE COMPONENTS\n// =============================================================================\n\nexport const Table = React.forwardRef<HTMLTableElement, TableProps>(({\n  className,\n  variant,\n  size,\n  density,\n  data,\n  columns,\n  loading = false,\n  sortable = false,\n  selectable = false,\n  onRowClick,\n  onSort,\n  onSelectionChange,\n  selectedRows = [],\n  getRowId,\n  emptyMessage = 'No data available',\n  stickyHeader = false,\n  maxHeight,\n  caption,\n  ariaLabel,\n  ...props\n}, ref) => {\n  const [sortConfig, setSortConfig] = useState<SortConfig | null>(null);\n  const [internalSelectedRows, setInternalSelectedRows] = useState<readonly any[]>([]);\n  const tableRef = useRef<HTMLTableElement>(null);\n\n  // Use internal selection state if not controlled\n  const currentSelectedRows = selectedRows.length > 0 ? selectedRows : internalSelectedRows;\n\n  // Sort data if sortable\n  const sortedData = useMemo(() => {\n    if (!sortable || !sortConfig) return data;\n    \n    return [...data].sort((a, b) => {\n      const column = columns.find(col => col.id === sortConfig.key);\n      if (!column?.accessorKey) return 0;\n      \n      const aVal = a[column.accessorKey];\n      const bVal = b[column.accessorKey];\n      \n      let comparison = 0;\n      if (aVal < bVal) comparison = -1;\n      if (aVal > bVal) comparison = 1;\n      \n      return sortConfig.direction === 'desc' ? -comparison : comparison;\n    });\n  }, [data, sortConfig, sortable, columns]);\n\n  // Handle column sort\n  const handleSort = useCallback((columnId: string) => {\n    if (!sortable) return;\n    \n    const newSortConfig: SortConfig = {\n      key: columnId,\n      direction: sortConfig?.key === columnId && sortConfig.direction === 'asc' ? 'desc' : 'asc'\n    };\n    \n    setSortConfig(newSortConfig);\n    onSort?.(newSortConfig);\n  }, [sortable, sortConfig, onSort]);\n\n  // Handle row selection\n  const handleRowSelect = useCallback((row: any, selected: boolean) => {\n    if (!selectable) return;\n    \n    const rowId = getRowId ? getRowId(row) : row;\n    let newSelection: readonly any[];\n    \n    if (selected) {\n      newSelection = [...currentSelectedRows, row];\n    } else {\n      newSelection = currentSelectedRows.filter(selectedRow => {\n        const selectedRowId = getRowId ? getRowId(selectedRow) : selectedRow;\n        return selectedRowId !== rowId;\n      });\n    }\n    \n    setInternalSelectedRows(newSelection);\n    onSelectionChange?.(newSelection);\n  }, [selectable, currentSelectedRows, getRowId, onSelectionChange]);\n\n  // Handle select all\n  const handleSelectAll = useCallback((selected: boolean) => {\n    if (!selectable) return;\n    \n    const newSelection = selected ? sortedData : [];\n    setInternalSelectedRows(newSelection);\n    onSelectionChange?.(newSelection);\n  }, [selectable, sortedData, onSelectionChange]);\n\n  // Check if row is selected\n  const isRowSelected = useCallback((row: any) => {\n    if (!selectable) return false;\n    \n    const rowId = getRowId ? getRowId(row) : row;\n    return currentSelectedRows.some(selectedRow => {\n      const selectedRowId = getRowId ? getRowId(selectedRow) : selectedRow;\n      return selectedRowId === rowId;\n    });\n  }, [selectable, currentSelectedRows, getRowId]);\n\n  const allSelected = selectable && sortedData.length > 0 && currentSelectedRows.length === sortedData.length;\n  const someSelected = selectable && currentSelectedRows.length > 0 && currentSelectedRows.length < sortedData.length;\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (!tableRef.current?.contains(event.target as Node)) return;\n      \n      const focusedElement = document.activeElement as HTMLElement;\n      \n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault();\n        \n        const rows = Array.from(tableRef.current.querySelectorAll('tbody tr'));\n        const currentIndex = rows.findIndex(row => row.contains(focusedElement));\n        \n        if (currentIndex === -1) return;\n        \n        const nextIndex = event.key === 'ArrowDown' \n          ? Math.min(currentIndex + 1, rows.length - 1)\n          : Math.max(currentIndex - 1, 0);\n          \n        const nextRow = rows[nextIndex] as HTMLElement;\n        nextRow.focus();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  if (loading) {\n    return (\n      <div \n        className={cn(tableVariants({ variant, size, density }), className)}\n        style={{ maxHeight }}\n        aria-label={ariaLabel || 'Loading table data'}\n        role=\"status\"\n        aria-live=\"polite\"\n      >\n        <TableSkeleton columns={columns.length} />\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={cn(\n        'relative overflow-auto rounded-lg border border-border',\n        maxHeight && 'max-h-96'\n      )}\n      style={{ maxHeight }}\n    >\n      <table\n        ref={ref || tableRef}\n        className={cn(tableVariants({ variant, size, density }), className)}\n        aria-label={ariaLabel}\n        {...props}\n      >\n        {caption && <caption className=\"sr-only\">{caption}</caption>}\n        \n        <TableHeader className={cn(stickyHeader && 'sticky top-0 z-10')}>\n          <TableRow>\n            {selectable && (\n              <TableCell header align=\"center\" width=\"48px\">\n                <input\n                  type=\"checkbox\"\n                  checked={allSelected}\n                  ref={input => {\n                    if (input) input.indeterminate = someSelected;\n                  }}\n                  onChange={(e) => handleSelectAll(e.target.checked)}\n                  aria-label=\"Select all rows\"\n                  className=\"h-4 w-4 rounded border-2 border-border text-primary focus:ring-2 focus:ring-primary/20 focus:ring-offset-2\"\n                />\n              </TableCell>\n            )}\n            \n            {columns.map((column) => (\n              <TableCell\n                key={column.id}\n                header\n                align={column.align}\n                sticky={column.sticky}\n                width={column.width}\n                style={{\n                  minWidth: column.minWidth,\n                  maxWidth: column.maxWidth\n                }}\n              >\n                {column.sortable && sortable ? (\n                  <button\n                    className={sortButtonVariants()}\n                    onClick={() => handleSort(column.id)}\n                    aria-label={`Sort by ${column.header} ${\n                      sortConfig?.key === column.id \n                        ? sortConfig.direction === 'asc' ? 'descending' : 'ascending'\n                        : 'ascending'\n                    }`}\n                  >\n                    {column.header}\n                    <SortIcon\n                      direction={\n                        sortConfig?.key === column.id ? sortConfig.direction : null\n                      }\n                    />\n                  </button>\n                ) : (\n                  column.header\n                )}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHeader>\n        \n        <TableBody>\n          {sortedData.length === 0 ? (\n            <TableRow>\n              <TableCell \n                colSpan={columns.length + (selectable ? 1 : 0)}\n                align=\"center\"\n                className=\"py-12 text-muted-foreground\"\n              >\n                {emptyMessage}\n              </TableCell>\n            </TableRow>\n          ) : (\n            sortedData.map((row, rowIndex) => {\n              const isSelected = isRowSelected(row);\n              const rowId = getRowId ? getRowId(row) : rowIndex;\n              \n              return (\n                <TableRow\n                  key={rowId}\n                  clickable={!!onRowClick}\n                  selected={isSelected}\n                  onClick={onRowClick ? () => onRowClick(row, rowIndex) : undefined}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      onRowClick?.(row, rowIndex);\n                    }\n                  }}\n                  tabIndex={onRowClick ? 0 : undefined}\n                  role={onRowClick ? 'button' : undefined}\n                  aria-selected={selectable ? isSelected : undefined}\n                >\n                  {selectable && (\n                    <TableCell align=\"center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={(e) => handleRowSelect(row, e.target.checked)}\n                        onClick={(e) => e.stopPropagation()}\n                        aria-label={`Select row ${rowIndex + 1}`}\n                        className=\"h-4 w-4 rounded border-2 border-border text-primary focus:ring-2 focus:ring-primary/20 focus:ring-offset-2\"\n                      />\n                    </TableCell>\n                  )}\n                  \n                  {columns.map((column) => {\n                    const value = column.accessorKey ? row[column.accessorKey] : undefined;\n                    const cellContent = column.cell ? column.cell(value, row, rowIndex) : value;\n                    \n                    return (\n                      <TableCell\n                        key={column.id}\n                        align={column.align}\n                        sticky={column.sticky}\n                        width={column.width}\n                        style={{\n                          minWidth: column.minWidth,\n                          maxWidth: column.maxWidth\n                        }}\n                      >\n                        {cellContent}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })\n          )}\n        </TableBody>\n      </table>\n    </div>\n  );\n});\n\nexport const TableHeader = React.forwardRef<HTMLTableSectionElement, TableHeaderProps>(\n  ({ className, children, ...props }, ref) => (\n    <thead ref={ref} className={cn(tableHeaderVariants(), className)} {...props}>\n      {children}\n    </thead>\n  )\n);\n\nexport const TableBody = React.forwardRef<HTMLTableSectionElement, TableBodyProps>(\n  ({ className, children, ...props }, ref) => (\n    <tbody ref={ref} className={cn('divide-y divide-border', className)} {...props}>\n      {children}\n    </tbody>\n  )\n);\n\nexport const TableRow = React.forwardRef<HTMLTableRowElement, TableRowProps>(\n  ({ className, clickable, selected, children, ...props }, ref) => (\n    <tr \n      ref={ref} \n      className={cn(tableRowVariants({ clickable, selected }), className)} \n      {...props}\n    >\n      {children}\n    </tr>\n  )\n);\n\nexport const TableCell = React.forwardRef<HTMLTableCellElement, TableCellProps>(\n  ({ className, children, header = false, align = 'left', sticky, width, ...props }, ref) => {\n    const Component = header ? 'th' : 'td';\n    \n    return (\n      <Component\n        ref={ref}\n        className={cn(\n          tableCellVariants(),\n          align === 'center' && 'text-center',\n          align === 'right' && 'text-right',\n          sticky === 'left' && 'sticky left-0 bg-background',\n          sticky === 'right' && 'sticky right-0 bg-background',\n          header && 'font-semibold text-muted-foreground bg-muted/50',\n          className\n        )}\n        style={{ width }}\n        scope={header ? 'col' : undefined}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n\n// Display names for React DevTools\nTable.displayName = 'Table';\nTableHeader.displayName = 'TableHeader';\nTableBody.displayName = 'TableBody';\nTableRow.displayName = 'TableRow';\nTableCell.displayName = 'TableCell';\n\n// Export types and variants\nexport type { VariantProps, ColumnDef, SortConfig };\nexport { tableVariants, tableHeaderVariants, tableCellVariants, tableRowVariants };"
    }
  ]
}