{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "chart",
  "type": "registry:component",
  "title": "Chart",
  "description": "Data visualization charts with accessibility",
  "category": "components",
  "categories": [
    "components",
    "display",
    "data"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "recharts"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/chart/chart.tsx",
      "type": "registry:component",
      "content": "/**\n * Chart Component - Professional Data Visualization\n * CLAUDE.md Compliant: Professional styling and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n */\n\nimport React, { useState, useMemo, useCallback, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// CHART VARIANTS\n// =============================================================================\n\nconst chartVariants = cva(\n  [\n    'relative w-full rounded-lg border border-border bg-background',\n    'shadow-sm p-6',\n    'focus-within:ring-2 focus-within:ring-primary/20 focus-within:ring-offset-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-background border-border',\n        card: 'bg-card border-border shadow-md',\n        minimal: 'bg-transparent border-0 shadow-none p-4'\n      },\n      size: {\n        sm: 'p-4 h-48',\n        md: 'p-6 h-64',\n        lg: 'p-8 h-80',\n        xl: 'p-10 h-96'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst chartHeaderVariants = cva([\n  'mb-6 pb-2 border-b border-border'\n]);\n\nconst legendVariants = cva([\n  'flex flex-wrap items-center gap-4 mt-4',\n  'text-sm text-muted-foreground'\n]);\n\nconst legendItemVariants = cva([\n  'flex items-center gap-2'\n]);\n\nconst tooltipVariants = cva([\n  'absolute z-50 px-3 py-2',\n  'bg-popover text-popover-foreground',\n  'border border-border rounded-md shadow-lg',\n  'text-sm font-medium',\n  'pointer-events-none',\n  'transform -translate-x-1/2 -translate-y-full',\n  'opacity-0 transition-opacity duration-200'\n], {\n  variants: {\n    visible: {\n      true: 'opacity-100',\n      false: 'opacity-0'\n    }\n  }\n});\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface ChartDataPoint {\n  readonly label: string;\n  readonly value: number;\n  readonly color?: string;\n  readonly metadata?: Record<string, any>;\n}\n\nexport interface ChartSeries {\n  readonly name: string;\n  readonly data: readonly ChartDataPoint[];\n  readonly color?: string;\n  readonly type?: 'line' | 'bar' | 'area';\n}\n\nexport interface ChartProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof chartVariants> {\n  readonly data?: readonly ChartDataPoint[];\n  readonly series?: readonly ChartSeries[];\n  readonly type?: 'bar' | 'line' | 'area' | 'pie' | 'donut';\n  readonly title?: string;\n  readonly description?: string;\n  readonly xAxisLabel?: string;\n  readonly yAxisLabel?: string;\n  readonly showLegend?: boolean;\n  readonly showTooltip?: boolean;\n  readonly showGrid?: boolean;\n  readonly showAxes?: boolean;\n  readonly animated?: boolean;\n  readonly colors?: readonly string[];\n  readonly onDataPointClick?: (dataPoint: ChartDataPoint, index: number) => void;\n  readonly ariaLabel?: string;\n  readonly loading?: boolean;\n  readonly error?: string;\n  readonly emptyMessage?: string;\n}\n\nexport interface TooltipData {\n  readonly x: number;\n  readonly y: number;\n  readonly content: string;\n  readonly visible: boolean;\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\nconst DEFAULT_COLORS = [\n  '#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6',\n  '#06b6d4', '#f97316', '#84cc16', '#ec4899', '#6b7280'\n];\n\nconst formatValue = (value: number): string => {\n  if (value >= 1000000) {\n    return `${(value / 1000000).toFixed(1)}M`;\n  }\n  if (value >= 1000) {\n    return `${(value / 1000).toFixed(1)}K`;\n  }\n  return value.toFixed(0);\n};\n\nconst calculateBarWidth = (containerWidth: number, dataLength: number, padding = 0.2): number => {\n  const availableWidth = containerWidth - 60; // Account for margins\n  const barSpacing = availableWidth / dataLength;\n  return Math.max(barSpacing * (1 - padding), 8); // Minimum 8px width\n};\n\nconst calculateBarHeight = (value: number, maxValue: number, containerHeight: number): number => {\n  const chartHeight = containerHeight - 80; // Account for margins and axes\n  return Math.max((value / maxValue) * chartHeight, 1); // Minimum 1px height\n};\n\n// =============================================================================\n// CHART COMPONENTS\n// =============================================================================\n\nconst ChartHeader: React.FC<{\n  readonly title?: string;\n  readonly description?: string;\n}> = ({ title, description }) => {\n  if (!title && !description) return null;\n  \n  return (\n    <div className={chartHeaderVariants()}>\n      {title && (\n        <h3 className=\"text-lg font-semibold text-foreground mb-1\">\n          {title}\n        </h3>\n      )}\n      {description && (\n        <p className=\"text-sm text-muted-foreground\">\n          {description}\n        </p>\n      )}\n    </div>\n  );\n};\n\nconst ChartLegend: React.FC<{\n  readonly data: readonly ChartDataPoint[];\n  readonly colors: readonly string[];\n}> = ({ data, colors }) => (\n  <div className={legendVariants()}>\n    {data.map((item, index) => (\n      <div key={item.label} className={legendItemVariants()}>\n        <div\n          className=\"w-3 h-3 rounded-sm\"\n          style={{ backgroundColor: item.color || colors[index % colors.length] }}\n          aria-hidden=\"true\"\n        />\n        <span>{item.label}</span>\n      </div>\n    ))}\n  </div>\n);\n\nconst ChartTooltip: React.FC<TooltipData> = ({ x, y, content, visible }) => (\n  <div\n    className={cn(tooltipVariants({ visible }))}\n    style={{ left: x, top: y }}\n    role=\"tooltip\"\n    aria-hidden={!visible}\n  >\n    {content}\n  </div>\n);\n\nconst BarChart: React.FC<{\n  readonly data: readonly ChartDataPoint[];\n  readonly width: number;\n  readonly height: number;\n  readonly colors: readonly string[];\n  readonly showGrid: boolean;\n  readonly showAxes: boolean;\n  readonly animated: boolean;\n  readonly onDataPointClick?: (dataPoint: ChartDataPoint, index: number) => void;\n  readonly onTooltip: (tooltip: TooltipData) => void;\n}> = ({ \n  data, \n  width, \n  height, \n  colors, \n  showGrid, \n  showAxes, \n  animated,\n  onDataPointClick,\n  onTooltip \n}) => {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const barWidth = calculateBarWidth(width, data.length);\n  const chartHeight = height - 80;\n  const chartWidth = width - 60;\n  \n  const handleBarClick = useCallback((dataPoint: ChartDataPoint, index: number) => {\n    onDataPointClick?.(dataPoint, index);\n  }, [onDataPointClick]);\n  \n  const handleBarHover = useCallback((event: React.MouseEvent, dataPoint: ChartDataPoint) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    onTooltip({\n      x: rect.left + rect.width / 2,\n      y: rect.top,\n      content: `${dataPoint.label}: ${formatValue(dataPoint.value)}`,\n      visible: true\n    });\n  }, [onTooltip]);\n  \n  const handleBarLeave = useCallback(() => {\n    onTooltip({ x: 0, y: 0, content: '', visible: false });\n  }, [onTooltip]);\n  \n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      className=\"overflow-visible\"\n      role=\"img\"\n      aria-label=\"Bar chart\"\n    >\n      {/* Grid lines */}\n      {showGrid && (\n        <g className=\"opacity-20\">\n          {[0, 0.25, 0.5, 0.75, 1].map((ratio) => (\n            <line\n              key={ratio}\n              x1={30}\n              y1={30 + chartHeight * (1 - ratio)}\n              x2={30 + chartWidth}\n              y2={30 + chartHeight * (1 - ratio)}\n              stroke=\"currentColor\"\n              strokeWidth=\"1\"\n            />\n          ))}\n        </g>\n      )}\n      \n      {/* Y-axis */}\n      {showAxes && (\n        <g className=\"text-xs fill-current text-muted-foreground\">\n          <line x1={30} y1={30} x2={30} y2={30 + chartHeight} stroke=\"currentColor\" strokeWidth=\"1\" />\n          {[0, 0.25, 0.5, 0.75, 1].map((ratio) => (\n            <text\n              key={ratio}\n              x={25}\n              y={35 + chartHeight * (1 - ratio)}\n              textAnchor=\"end\"\n              dominantBaseline=\"central\"\n            >\n              {formatValue(maxValue * ratio)}\n            </text>\n          ))}\n        </g>\n      )}\n      \n      {/* X-axis */}\n      {showAxes && (\n        <g className=\"text-xs fill-current text-muted-foreground\">\n          <line \n            x1={30} \n            y1={30 + chartHeight} \n            x2={30 + chartWidth} \n            y2={30 + chartHeight} \n            stroke=\"currentColor\" \n            strokeWidth=\"1\" \n          />\n        </g>\n      )}\n      \n      {/* Bars */}\n      <g>\n        {data.map((dataPoint, index) => {\n          const barHeight = calculateBarHeight(dataPoint.value, maxValue, height);\n          const x = 30 + (chartWidth / data.length) * index + (chartWidth / data.length - barWidth) / 2;\n          const y = 30 + chartHeight - barHeight;\n          const color = dataPoint.color || colors[index % colors.length];\n          \n          return (\n            <g key={dataPoint.label}>\n              <rect\n                x={x}\n                y={animated ? 30 + chartHeight : y}\n                width={barWidth}\n                height={animated ? 0 : barHeight}\n                fill={color}\n                className={cn(\n                  'cursor-pointer transition-all duration-500 hover:opacity-80',\n                  animated && 'animate-[slideUp_0.8s_ease-out_forwards]'\n                )}\n                style={{\n                  animationDelay: animated ? `${index * 0.1}s` : '0s',\n                  animationFillMode: 'forwards'\n                }}\n                onClick={() => handleBarClick(dataPoint, index)}\n                onMouseEnter={(e) => handleBarHover(e, dataPoint)}\n                onMouseLeave={handleBarLeave}\n                onFocus={(e) => handleBarHover(e, dataPoint)}\n                onBlur={handleBarLeave}\n                tabIndex={onDataPointClick ? 0 : -1}\n                role={onDataPointClick ? 'button' : undefined}\n                aria-label={`${dataPoint.label}: ${formatValue(dataPoint.value)}`}\n              />\n              \n              {/* X-axis labels */}\n              {showAxes && (\n                <text\n                  x={x + barWidth / 2}\n                  y={35 + chartHeight + 15}\n                  textAnchor=\"middle\"\n                  dominantBaseline=\"central\"\n                  className=\"text-xs fill-current text-muted-foreground\"\n                >\n                  {dataPoint.label}\n                </text>\n              )}\n            </g>\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n\nconst PieChart: React.FC<{\n  readonly data: readonly ChartDataPoint[];\n  readonly width: number;\n  readonly height: number;\n  readonly colors: readonly string[];\n  readonly animated: boolean;\n  readonly onDataPointClick?: (dataPoint: ChartDataPoint, index: number) => void;\n  readonly onTooltip: (tooltip: TooltipData) => void;\n}> = ({ \n  data, \n  width, \n  height, \n  colors, \n  animated,\n  onDataPointClick,\n  onTooltip \n}) => {\n  const radius = Math.min(width, height) / 2 - 40;\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const total = data.reduce((sum, d) => sum + d.value, 0);\n  \n  let cumulativeAngle = -Math.PI / 2; // Start from top\n  \n  const handleSliceClick = useCallback((dataPoint: ChartDataPoint, index: number) => {\n    onDataPointClick?.(dataPoint, index);\n  }, [onDataPointClick]);\n  \n  const handleSliceHover = useCallback((event: React.MouseEvent, dataPoint: ChartDataPoint) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    const percentage = ((dataPoint.value / total) * 100).toFixed(1);\n    onTooltip({\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n      content: `${dataPoint.label}: ${formatValue(dataPoint.value)} (${percentage}%)`,\n      visible: true\n    });\n  }, [onTooltip, total]);\n  \n  const handleSliceLeave = useCallback(() => {\n    onTooltip({ x: 0, y: 0, content: '', visible: false });\n  }, [onTooltip]);\n  \n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      className=\"overflow-visible\"\n      role=\"img\"\n      aria-label=\"Pie chart\"\n    >\n      {data.map((dataPoint, index) => {\n        const angle = (dataPoint.value / total) * 2 * Math.PI;\n        const startAngle = cumulativeAngle;\n        const endAngle = cumulativeAngle + angle;\n        \n        const x1 = centerX + radius * Math.cos(startAngle);\n        const y1 = centerY + radius * Math.sin(startAngle);\n        const x2 = centerX + radius * Math.cos(endAngle);\n        const y2 = centerY + radius * Math.sin(endAngle);\n        \n        const largeArc = angle > Math.PI ? 1 : 0;\n        const pathData = [\n          `M ${centerX} ${centerY}`,\n          `L ${x1} ${y1}`,\n          `A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2}`,\n          'Z'\n        ].join(' ');\n        \n        const color = dataPoint.color || colors[index % colors.length];\n        \n        cumulativeAngle += angle;\n        \n        return (\n          <path\n            key={dataPoint.label}\n            d={pathData}\n            fill={color}\n            stroke=\"white\"\n            strokeWidth=\"2\"\n            className={cn(\n              'cursor-pointer transition-all duration-300 hover:opacity-80',\n              animated && 'animate-[fadeIn_0.6s_ease-out_forwards]'\n            )}\n            style={{\n              animationDelay: animated ? `${index * 0.1}s` : '0s',\n              opacity: animated ? 0 : 1\n            }}\n            onClick={() => handleSliceClick(dataPoint, index)}\n            onMouseEnter={(e) => handleSliceHover(e, dataPoint)}\n            onMouseLeave={handleSliceLeave}\n            onFocus={(e) => handleSliceHover(e, dataPoint)}\n            onBlur={handleSliceLeave}\n            tabIndex={onDataPointClick ? 0 : -1}\n            role={onDataPointClick ? 'button' : undefined}\n            aria-label={`${dataPoint.label}: ${formatValue(dataPoint.value)} (${((dataPoint.value / total) * 100).toFixed(1)}%)`}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\n// =============================================================================\n// MAIN CHART COMPONENT\n// =============================================================================\n\nexport const Chart = React.forwardRef<HTMLDivElement, ChartProps>(({\n  className,\n  variant,\n  size,\n  data = [],\n  series,\n  type = 'bar',\n  title,\n  description,\n  xAxisLabel,\n  yAxisLabel,\n  showLegend = true,\n  showTooltip = true,\n  showGrid = true,\n  showAxes = true,\n  animated = true,\n  colors = DEFAULT_COLORS,\n  onDataPointClick,\n  ariaLabel,\n  loading = false,\n  error,\n  emptyMessage = 'No data available',\n  ...props\n}, ref) => {\n  const [tooltip, setTooltip] = useState<TooltipData>({\n    x: 0,\n    y: 0,\n    content: '',\n    visible: false\n  });\n  const [dimensions, setDimensions] = useState({ width: 400, height: 300 });\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Update dimensions on resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n        setDimensions({ \n          width: width - 48, // Account for padding\n          height: size === 'sm' ? 192 : size === 'lg' ? 320 : size === 'xl' ? 384 : 256\n        });\n      }\n    };\n\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n    \n    updateDimensions();\n\n    return () => resizeObserver.disconnect();\n  }, [size]);\n\n  // Handle tooltip updates\n  const handleTooltip = useCallback((tooltipData: TooltipData) => {\n    if (!showTooltip) return;\n    setTooltip(tooltipData);\n  }, [showTooltip]);\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div\n        ref={ref}\n        className={cn(chartVariants({ variant, size }), className)}\n        role=\"status\"\n        aria-label=\"Loading chart data\"\n        {...props}\n      >\n        <ChartHeader title={title} description={description} />\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"flex items-center gap-3 text-muted-foreground\">\n            <div className=\"w-6 h-6 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n            <span>Loading chart data...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div\n        ref={ref}\n        className={cn(chartVariants({ variant, size }), className)}\n        role=\"alert\"\n        aria-label=\"Chart error\"\n        {...props}\n      >\n        <ChartHeader title={title} description={description} />\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 mx-auto mb-3 text-destructive\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\" />\n              </svg>\n            </div>\n            <p className=\"text-sm text-destructive font-medium\">Error loading chart</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render empty state\n  if (data.length === 0) {\n    return (\n      <div\n        ref={ref}\n        className={cn(chartVariants({ variant, size }), className)}\n        role=\"status\"\n        aria-label=\"No chart data\"\n        {...props}\n      >\n        <ChartHeader title={title} description={description} />\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 mx-auto mb-3 text-muted-foreground\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\" />\n              </svg>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">{emptyMessage}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref || containerRef}\n      className={cn(chartVariants({ variant, size }), className)}\n      role=\"region\"\n      aria-label={ariaLabel || `${type} chart`}\n      {...props}\n    >\n      <ChartHeader title={title} description={description} />\n      \n      <div className=\"relative\">\n        {type === 'bar' && (\n          <BarChart\n            data={data}\n            width={dimensions.width}\n            height={dimensions.height}\n            colors={colors}\n            showGrid={showGrid}\n            showAxes={showAxes}\n            animated={animated}\n            onDataPointClick={onDataPointClick}\n            onTooltip={handleTooltip}\n          />\n        )}\n        \n        {(type === 'pie' || type === 'donut') && (\n          <PieChart\n            data={data}\n            width={dimensions.width}\n            height={dimensions.height}\n            colors={colors}\n            animated={animated}\n            onDataPointClick={onDataPointClick}\n            onTooltip={handleTooltip}\n          />\n        )}\n        \n        {showTooltip && <ChartTooltip {...tooltip} />}\n      </div>\n      \n      {showLegend && <ChartLegend data={data} colors={colors} />}\n      \n      {/* Axis labels */}\n      {(xAxisLabel || yAxisLabel) && (\n        <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n          {xAxisLabel && <div className=\"mt-2\">{xAxisLabel}</div>}\n          {yAxisLabel && (\n            <div \n              className=\"absolute left-2 top-1/2 -rotate-90 transform -translate-y-1/2\"\n              style={{ transformOrigin: 'center' }}\n            >\n              {yAxisLabel}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Screen reader data table */}\n      <table className=\"sr-only\">\n        <caption>Chart data in tabular format</caption>\n        <thead>\n          <tr>\n            <th>Label</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((dataPoint, index) => (\n            <tr key={index}>\n              <td>{dataPoint.label}</td>\n              <td>{dataPoint.value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nChart.displayName = 'Chart';\n\n// Export types and variants\nexport type { VariantProps, ChartDataPoint, ChartSeries };\nexport { chartVariants };"
    }
  ]
}