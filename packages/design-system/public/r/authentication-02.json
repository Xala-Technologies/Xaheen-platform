{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "authentication-02",
  "type": "registry:block",
  "title": "Authentication Form 02",
  "description": "Modern authentication form with social login",
  "category": "patterns",
  "nsm": {
    "classification": "RESTRICTED",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "separator"
  ],
  "files": [
    {
      "path": "blocks/authentication-02/authentication-02.tsx",
      "type": "registry:component",
      "content": "/**\n * Authentication-02 Block - Alternative Auth Design\n * WCAG AAA compliant with tabbed interface for login/register\n * Norwegian standards with BankID and enhanced security features\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Input } from '../../components/input/input';\nimport { Card, CardContent } from '../../components/card/card';\n\nexport interface AuthUser {\n  readonly email: string;\n  readonly password?: string;\n  readonly firstName?: string;\n  readonly lastName?: string;\n  readonly phoneNumber?: string;\n  readonly termsAccepted?: boolean;\n  readonly marketingConsent?: boolean;\n}\n\nexport interface AuthTexts {\n  readonly loginTab: string;\n  readonly registerTab: string;\n  readonly welcomeBack: string;\n  readonly welcomeNew: string;\n  readonly loginSubtitle: string;\n  readonly registerSubtitle: string;\n  readonly emailLabel: string;\n  readonly emailPlaceholder: string;\n  readonly passwordLabel: string;\n  readonly passwordPlaceholder: string;\n  readonly confirmPasswordLabel: string;\n  readonly confirmPasswordPlaceholder: string;\n  readonly firstNameLabel: string;\n  readonly firstNamePlaceholder: string;\n  readonly lastNameLabel: string;\n  readonly lastNamePlaceholder: string;\n  readonly phoneLabel: string;\n  readonly phonePlaceholder: string;\n  readonly loginButton: string;\n  readonly registerButton: string;\n  readonly bankIdLoginButton: string;\n  readonly bankIdRegisterButton: string;\n  readonly termsLabel: string;\n  readonly termsLinkText: string;\n  readonly marketingLabel: string;\n  readonly forgotPassword: string;\n  readonly loadingLogin: string;\n  readonly loadingRegister: string;\n  readonly loadingBankId: string;\n  readonly emailError: string;\n  readonly passwordError: string;\n  readonly confirmPasswordError: string;\n  readonly nameError: string;\n  readonly phoneError: string;\n  readonly termsError: string;\n  readonly successLogin: string;\n  readonly successRegister: string;\n  readonly successBankId: string;\n}\n\nexport interface AuthState {\n  readonly activeTab: 'login' | 'register';\n  readonly email: string;\n  readonly password: string;\n  readonly confirmPassword: string;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly phoneNumber: string;\n  readonly termsAccepted: boolean;\n  readonly marketingConsent: boolean;\n  readonly loading: boolean;\n  readonly bankIdLoading: boolean;\n  readonly errors: Record<string, string>;\n}\n\nexport interface AuthCallbacks {\n  readonly onLogin: (user: AuthUser) => Promise<void>;\n  readonly onRegister: (user: AuthUser) => Promise<void>;\n  readonly onBankIdAuth: (mode: 'login' | 'register') => Promise<void>;\n  readonly onForgotPassword?: (email: string) => void;\n  readonly onTermsClick?: () => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onTabChange?: (tab: 'login' | 'register') => void;\n  readonly onStateChange?: (state: Partial<AuthState>) => void;\n}\n\nexport interface Authentication02Props {\n  readonly texts?: Partial<AuthTexts>;\n  readonly callbacks: AuthCallbacks;\n  readonly state?: Partial<AuthState>;\n  readonly className?: string;\n  readonly defaultTab?: 'login' | 'register';\n  readonly showBankId?: boolean;\n  readonly showPhoneField?: boolean;\n  readonly showMarketingConsent?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly requireTerms?: boolean;\n}\n\nconst defaultTexts: AuthTexts = {\n  loginTab: 'Logg inn',\n  registerTab: 'Registrer',\n  welcomeBack: 'Velkommen tilbake',\n  welcomeNew: 'Opprett konto',\n  loginSubtitle: 'Logg inn på din konto',\n  registerSubtitle: 'Opprett en ny konto for å komme i gang',\n  emailLabel: 'E-postadresse',\n  emailPlaceholder: 'din@epost.no',\n  passwordLabel: 'Passord',\n  passwordPlaceholder: 'Minimum 8 tegn',\n  confirmPasswordLabel: 'Bekreft passord',\n  confirmPasswordPlaceholder: 'Gjenta passordet ditt',\n  firstNameLabel: 'Fornavn',\n  firstNamePlaceholder: 'Ditt fornavn',\n  lastNameLabel: 'Etternavn',\n  lastNamePlaceholder: 'Ditt etternavn',\n  phoneLabel: 'Telefonnummer',\n  phonePlaceholder: '+47 123 45 678',\n  loginButton: 'Logg inn',\n  registerButton: 'Opprett konto',\n  bankIdLoginButton: 'BankID innlogging',\n  bankIdRegisterButton: 'Registrer med BankID',\n  termsLabel: 'Jeg aksepterer',\n  termsLinkText: 'vilkår og betingelser',\n  marketingLabel: 'Jeg ønsker å motta markedsføringsinformasjon',\n  forgotPassword: 'Glemt passord?',\n  loadingLogin: 'Logger inn...',\n  loadingRegister: 'Oppretter konto...',\n  loadingBankId: 'Kobler til BankID...',\n  emailError: 'Ugyldig e-postadresse',\n  passwordError: 'Passord må være minst 8 tegn',\n  confirmPasswordError: 'Passordene stemmer ikke overens',\n  nameError: 'Dette feltet er påkrevd',\n  phoneError: 'Ugyldig telefonnummer',\n  termsError: 'Du må akseptere vilkårene',\n  successLogin: 'Innlogging vellykket',\n  successRegister: 'Konto opprettet',\n  successBankId: 'BankID autentisering vellykket'\n};\n\nconst defaultState: AuthState = {\n  activeTab: 'login',\n  email: '',\n  password: '',\n  confirmPassword: '',\n  firstName: '',\n  lastName: '',\n  phoneNumber: '',\n  termsAccepted: false,\n  marketingConsent: false,\n  loading: false,\n  bankIdLoading: false,\n  errors: {}\n};\n\nexport const Authentication02: React.FC<Authentication02Props> = ({\n  texts = {},\n  callbacks,\n  state = {},\n  className,\n  defaultTab = 'login',\n  showBankId = true,\n  showPhoneField = true,\n  showMarketingConsent = true,\n  nsmClassification,\n  requireTerms = true\n}) => {\n  const t = { ...defaultTexts, ...texts };\n  const currentState = { ...defaultState, activeTab: defaultTab, ...state };\n  \n  const {\n    activeTab,\n    email,\n    password,\n    confirmPassword,\n    firstName,\n    lastName,\n    phoneNumber,\n    termsAccepted,\n    marketingConsent,\n    loading,\n    bankIdLoading,\n    errors\n  } = currentState;\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Update state helper\n  const updateState = useCallback((updates: Partial<AuthState>) => {\n    callbacks.onStateChange?.(updates);\n  }, [callbacks]);\n\n  // Validation functions\n  const validateEmail = (value: string): string | undefined => {\n    if (!value) return t.emailError;\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return t.emailError;\n    return undefined;\n  };\n\n  const validatePassword = (value: string): string | undefined => {\n    if (!value || value.length < 8) return t.passwordError;\n    return undefined;\n  };\n\n  const validateConfirmPassword = (value: string): string | undefined => {\n    if (value !== password) return t.confirmPasswordError;\n    return undefined;\n  };\n\n  const validateRequired = (value: string): string | undefined => {\n    if (!value.trim()) return t.nameError;\n    return undefined;\n  };\n\n  const validatePhone = (value: string): string | undefined => {\n    if (!value) return undefined; // Optional field\n    if (!/^(\\+47)?[\\s]?[2-9]\\d{7}$/.test(value)) return t.phoneError;\n    return undefined;\n  };\n\n  // Event handlers\n  const handleTabChange = useCallback((tab: 'login' | 'register') => {\n    updateState({ activeTab: tab, errors: {} });\n    callbacks.onTabChange?.(tab);\n    announce(`Switched to ${tab === 'login' ? 'login' : 'registration'} form`);\n  }, [updateState, callbacks, announce]);\n\n  const handleInputChange = useCallback((field: keyof AuthState, value: any) => {\n    updateState({ [field]: value });\n    // Clear field error when user starts typing\n    if (errors[field]) {\n      const newErrors = { ...errors };\n      delete newErrors[field];\n      updateState({ errors: newErrors });\n    }\n  }, [updateState, errors]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (loading || bankIdLoading) return;\n\n    const validationErrors: Record<string, string> = {};\n\n    // Common validations\n    const emailError = validateEmail(email);\n    if (emailError) validationErrors.email = emailError;\n\n    const passwordError = validatePassword(password);\n    if (passwordError) validationErrors.password = passwordError;\n\n    if (activeTab === 'register') {\n      // Registration-specific validations\n      const confirmPasswordError = validateConfirmPassword(confirmPassword);\n      if (confirmPasswordError) validationErrors.confirmPassword = confirmPasswordError;\n\n      const firstNameError = validateRequired(firstName);\n      if (firstNameError) validationErrors.firstName = firstNameError;\n\n      const lastNameError = validateRequired(lastName);\n      if (lastNameError) validationErrors.lastName = lastNameError;\n\n      if (showPhoneField) {\n        const phoneError = validatePhone(phoneNumber);\n        if (phoneError) validationErrors.phoneNumber = phoneError;\n      }\n\n      if (requireTerms && !termsAccepted) {\n        validationErrors.terms = t.termsError;\n      }\n    }\n\n    if (Object.keys(validationErrors).length > 0) {\n      updateState({ errors: validationErrors });\n      announce(`Validation errors found`);\n      return;\n    }\n\n    try {\n      updateState({ loading: true });\n      \n      if (activeTab === 'login') {\n        await callbacks.onLogin({ email, password });\n        announce(t.successLogin);\n      } else {\n        await callbacks.onRegister({\n          email,\n          password,\n          firstName,\n          lastName,\n          phoneNumber: showPhoneField ? phoneNumber : undefined,\n          termsAccepted,\n          marketingConsent: showMarketingConsent ? marketingConsent : false\n        });\n        announce(t.successRegister);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Operation failed';\n      updateState({ errors: { general: errorMessage } });\n      announce(`Error: ${errorMessage}`);\n    } finally {\n      updateState({ loading: false });\n    }\n  }, [\n    activeTab, email, password, confirmPassword, firstName, lastName, \n    phoneNumber, termsAccepted, marketingConsent, loading, bankIdLoading,\n    showPhoneField, showMarketingConsent, requireTerms,\n    callbacks, updateState, announce, t\n  ]);\n\n  const handleBankIdAuth = useCallback(async () => {\n    if (loading || bankIdLoading) return;\n\n    try {\n      updateState({ bankIdLoading: true });\n      await callbacks.onBankIdAuth(activeTab);\n      announce(t.successBankId);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'BankID authentication failed';\n      updateState({ errors: { general: errorMessage } });\n      announce(`BankID error: ${errorMessage}`);\n    } finally {\n      updateState({ bankIdLoading: false });\n    }\n  }, [activeTab, loading, bankIdLoading, callbacks, updateState, announce, t]);\n\n  return (\n    <div className={cn('w-full max-w-lg mx-auto', className)}>\n      <Card\n        variant=\"elevated\"\n        nsmClassification={nsmClassification}\n        className=\"overflow-hidden\"\n      >\n        {/* Tab Navigation */}\n        <div className=\"flex border-b border-border\">\n          <button\n            onClick={() => handleTabChange('login')}\n            disabled={loading || bankIdLoading}\n            className={cn(\n              'flex-1 px-6 py-4 text-lg font-medium transition-all duration-200',\n              'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-inset',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              activeTab === 'login' \n                ? 'bg-primary/5 text-primary border-b-2 border-b-primary' \n                : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'\n            )}\n            role=\"tab\"\n            aria-selected={activeTab === 'login'}\n          >\n            {t.loginTab}\n          </button>\n          <button\n            onClick={() => handleTabChange('register')}\n            disabled={loading || bankIdLoading}\n            className={cn(\n              'flex-1 px-6 py-4 text-lg font-medium transition-all duration-200',\n              'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-inset',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              activeTab === 'register' \n                ? 'bg-primary/5 text-primary border-b-2 border-b-primary' \n                : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'\n            )}\n            role=\"tab\"\n            aria-selected={activeTab === 'register'}\n          >\n            {t.registerTab}\n          </button>\n        </div>\n\n        <CardContent className=\"p-8\">\n          {/* Tab Content */}\n          <div role=\"tabpanel\" aria-labelledby={`${activeTab}-tab`}>\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold tracking-tight mb-2\">\n                {activeTab === 'login' ? t.welcomeBack : t.welcomeNew}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                {activeTab === 'login' ? t.loginSubtitle : t.registerSubtitle}\n              </p>\n            </div>\n\n            {/* General Error */}\n            {errors.general && (\n              <div\n                role=\"alert\"\n                className=\"mb-6 p-4 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive text-sm\"\n              >\n                {errors.general}\n              </div>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Registration-only fields */}\n              {activeTab === 'register' && (\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {/* First Name */}\n                  <div>\n                    <label htmlFor=\"firstName\" className=\"text-sm font-medium text-foreground block mb-2\">\n                      {t.firstNameLabel}\n                    </label>\n                    <Input\n                      id=\"firstName\"\n                      name=\"firstName\"\n                      value={firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      placeholder={t.firstNamePlaceholder}\n                      error={!!errors.firstName}\n                      helperText={errors.firstName}\n                      disabled={loading || bankIdLoading}\n                      required\n                      autoComplete=\"given-name\"\n                    />\n                  </div>\n\n                  {/* Last Name */}\n                  <div>\n                    <label htmlFor=\"lastName\" className=\"text-sm font-medium text-foreground block mb-2\">\n                      {t.lastNameLabel}\n                    </label>\n                    <Input\n                      id=\"lastName\"\n                      name=\"lastName\"\n                      value={lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      placeholder={t.lastNamePlaceholder}\n                      error={!!errors.lastName}\n                      helperText={errors.lastName}\n                      disabled={loading || bankIdLoading}\n                      required\n                      autoComplete=\"family-name\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Email */}\n              <div>\n                <label htmlFor=\"email\" className=\"text-sm font-medium text-foreground block mb-2\">\n                  {t.emailLabel}\n                </label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  placeholder={t.emailPlaceholder}\n                  error={!!errors.email}\n                  helperText={errors.email}\n                  disabled={loading || bankIdLoading}\n                  required\n                  autoComplete=\"email\"\n                  leadingIcon={\n                    <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                    </svg>\n                  }\n                />\n              </div>\n\n              {/* Phone Number (Registration only and if enabled) */}\n              {activeTab === 'register' && showPhoneField && (\n                <div>\n                  <label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground block mb-2\">\n                    {t.phoneLabel}\n                  </label>\n                  <Input\n                    id=\"phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    value={phoneNumber}\n                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                    placeholder={t.phonePlaceholder}\n                    error={!!errors.phoneNumber}\n                    helperText={errors.phoneNumber}\n                    disabled={loading || bankIdLoading}\n                    norwegianFormat=\"phone\"\n                    autoComplete=\"tel\"\n                    leadingIcon={\n                      <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                      </svg>\n                    }\n                  />\n                </div>\n              )}\n\n              {/* Password */}\n              <div>\n                <label htmlFor=\"password\" className=\"text-sm font-medium text-foreground block mb-2\">\n                  {t.passwordLabel}\n                </label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  placeholder={t.passwordPlaceholder}\n                  error={!!errors.password}\n                  helperText={errors.password}\n                  disabled={loading || bankIdLoading}\n                  required\n                  autoComplete={activeTab === 'login' ? 'current-password' : 'new-password'}\n                  leadingIcon={\n                    <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                    </svg>\n                  }\n                />\n              </div>\n\n              {/* Confirm Password (Registration only) */}\n              {activeTab === 'register' && (\n                <div>\n                  <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-foreground block mb-2\">\n                    {t.confirmPasswordLabel}\n                  </label>\n                  <Input\n                    id=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    placeholder={t.confirmPasswordPlaceholder}\n                    error={!!errors.confirmPassword}\n                    helperText={errors.confirmPassword}\n                    disabled={loading || bankIdLoading}\n                    required\n                    autoComplete=\"new-password\"\n                    leadingIcon={\n                      <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                      </svg>\n                    }\n                  />\n                </div>\n              )}\n\n              {/* Terms and Marketing (Registration only) */}\n              {activeTab === 'register' && (\n                <div className=\"space-y-4\">\n                  {/* Terms Checkbox */}\n                  {requireTerms && (\n                    <div>\n                      <div className=\"flex items-start\">\n                        <input\n                          id=\"terms\"\n                          name=\"terms\"\n                          type=\"checkbox\"\n                          checked={termsAccepted}\n                          onChange={(e) => handleInputChange('termsAccepted', e.target.checked)}\n                          disabled={loading || bankIdLoading}\n                          className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded mt-1\"\n                        />\n                        <label htmlFor=\"terms\" className=\"ml-3 text-sm text-foreground\">\n                          {t.termsLabel}{' '}\n                          <button\n                            type=\"button\"\n                            onClick={callbacks.onTermsClick}\n                            className=\"text-primary hover:text-primary/80 underline focus:outline-none focus:ring-2 focus:ring-primary/20 rounded\"\n                          >\n                            {t.termsLinkText}\n                          </button>\n                        </label>\n                      </div>\n                      {errors.terms && (\n                        <p className=\"mt-1 text-sm text-destructive\">{errors.terms}</p>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Marketing Checkbox */}\n                  {showMarketingConsent && (\n                    <div className=\"flex items-start\">\n                      <input\n                        id=\"marketing\"\n                        name=\"marketing\"\n                        type=\"checkbox\"\n                        checked={marketingConsent}\n                        onChange={(e) => handleInputChange('marketingConsent', e.target.checked)}\n                        disabled={loading || bankIdLoading}\n                        className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded mt-1\"\n                      />\n                      <label htmlFor=\"marketing\" className=\"ml-3 text-sm text-muted-foreground\">\n                        {t.marketingLabel}\n                      </label>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Submit Button */}\n              <Button\n                type=\"submit\"\n                fullWidth\n                loading={loading}\n                loadingText={activeTab === 'login' ? t.loadingLogin : t.loadingRegister}\n                disabled={loading || bankIdLoading}\n                size=\"lg\"\n                variant=\"primary\"\n                className=\"font-semibold\"\n              >\n                {activeTab === 'login' ? t.loginButton : t.registerButton}\n              </Button>\n\n              {/* BankID Button */}\n              {showBankId && (\n                <Button\n                  type=\"button\"\n                  fullWidth\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={handleBankIdAuth}\n                  loading={bankIdLoading}\n                  loadingText={t.loadingBankId}\n                  disabled={loading || bankIdLoading}\n                  className=\"font-semibold\"\n                  leftIcon={\n                    <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                    </svg>\n                  }\n                >\n                  {activeTab === 'login' ? t.bankIdLoginButton : t.bankIdRegisterButton}\n                </Button>\n              )}\n\n              {/* Forgot Password (Login only) */}\n              {activeTab === 'login' && callbacks.onForgotPassword && (\n                <div className=\"text-center\">\n                  <button\n                    type=\"button\"\n                    onClick={() => callbacks.onForgotPassword?.(email)}\n                    disabled={loading || bankIdLoading}\n                    className=\"text-sm text-primary hover:text-primary/80 transition-colors focus:outline-none focus:ring-2 focus:ring-primary/20 rounded px-2 py-1\"\n                  >\n                    {t.forgotPassword}\n                  </button>\n                </div>\n              )}\n            </form>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};"
    }
  ]
}