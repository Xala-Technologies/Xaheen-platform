{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "input",
  "type": "registry:component",
  "title": "Input",
  "description": "Norwegian-optimized input component",
  "category": "components",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/input/input.tsx",
      "type": "registry:component",
      "content": "/**\n * Input Component - Norwegian-optimized text input\n * CLAUDE.md Compliant: Minimum h-14 (56px) height\n * WCAG AAA: Full keyboard support and proper labeling\n * Norwegian locale support with proper formatting\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst inputVariants = cva(\n  [\n    'flex w-full',\n    'font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background',\n    'border-2 border-input',\n    'transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    // Focus styles\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary',\n    // File input styles\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    // Autofill styles\n    'autofill:bg-background',\n    // High contrast mode\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600',\n        nsmRestricted: 'border-l-4 border-l-yellow-600',\n        nsmConfidential: 'border-l-4 border-l-red-600',\n        nsmSecret: 'border-l-4 border-l-gray-800'\n      },\n      size: {\n        // Professional sizing - no small inputs\n        md: 'h-12 px-4 py-3 text-base rounded-lg',      // 48px height (minimum)\n        lg: 'h-14 px-5 py-4 text-lg rounded-lg',        // 56px height (professional)\n        xl: 'h-16 px-6 py-5 text-xl rounded-xl',        // 64px height (premium)\n        '2xl': 'h-18 px-8 py-6 text-2xl rounded-xl'     // 72px height (luxury)\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: 'w-auto'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'lg',  // Professional default\n      fullWidth: true\n    }\n  }\n);\n\nexport interface InputProps extends \n  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n  VariantProps<typeof inputVariants> {\n  readonly error?: boolean;\n  readonly success?: boolean;\n  readonly warning?: boolean;\n  readonly helperText?: string;\n  readonly leadingIcon?: React.ReactNode;\n  readonly trailingIcon?: React.ReactNode;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly norwegianFormat?: 'phone' | 'postalCode' | 'organizationNumber' | 'nationalId';\n}\n\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ \n    className, \n    type = 'text',\n    variant,\n    size,\n    fullWidth,\n    error,\n    success,\n    warning,\n    helperText,\n    leadingIcon,\n    trailingIcon,\n    nsmClassification,\n    norwegianFormat,\n    disabled,\n    'aria-describedby': ariaDescribedBy,\n    ...props \n  }, ref) => {\n    // Determine variant based on state\n    const stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : stateVariant;\n    \n    // Generate unique ID for helper text\n    const helperId = React.useId();\n    const helperTextId = helperText ? `${helperId}-helper` : undefined;\n    const combinedAriaDescribedBy = [ariaDescribedBy, helperTextId].filter(Boolean).join(' ') || undefined;\n    \n    // Norwegian formatting patterns\n    const formatPatterns = {\n      phone: {\n        pattern: '^(\\\\+47)?[\\\\s]?[2-9]\\\\d{7}$',\n        placeholder: '+47 XXX XX XXX',\n        inputMode: 'tel' as const\n      },\n      postalCode: {\n        pattern: '^\\\\d{4}$',\n        placeholder: '0000',\n        inputMode: 'numeric' as const,\n        maxLength: 4\n      },\n      organizationNumber: {\n        pattern: '^\\\\d{9}$',\n        placeholder: '123 456 789',\n        inputMode: 'numeric' as const,\n        maxLength: 9\n      },\n      nationalId: {\n        pattern: '^\\\\d{11}$',\n        placeholder: 'DDMMYYXXXXX',\n        inputMode: 'numeric' as const,\n        maxLength: 11\n      }\n    };\n    \n    const formatProps = norwegianFormat ? formatPatterns[norwegianFormat] : {};\n    \n    const inputElement = (\n      <input\n        type={type}\n        className={cn(\n          inputVariants({ variant: finalVariant, size, fullWidth }),\n          leadingIcon && 'pl-12',\n          trailingIcon && 'pr-12',\n          className\n        )}\n        ref={ref}\n        disabled={disabled}\n        aria-invalid={error ? 'true' : undefined}\n        aria-describedby={combinedAriaDescribedBy}\n        {...formatProps}\n        {...props}\n      />\n    );\n    \n    // If no icons or helper text, return input directly\n    if (!leadingIcon && !trailingIcon && !helperText && !nsmClassification) {\n      return inputElement;\n    }\n    \n    // Otherwise, wrap with additional elements\n    return (\n      <div className={cn('relative', fullWidth && 'w-full')}>\n        {/* Leading Icon */}\n        {leadingIcon && (\n          <div className=\"absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" aria-hidden=\"true\">\n            {leadingIcon}\n          </div>\n        )}\n        \n        {/* Input Element */}\n        {inputElement}\n        \n        {/* Trailing Icon */}\n        {trailingIcon && (\n          <div className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" aria-hidden=\"true\">\n            {trailingIcon}\n          </div>\n        )}\n        \n        {/* Helper Text */}\n        {helperText && (\n          <p \n            id={helperTextId}\n            className={cn(\n              'mt-2 text-sm',\n              error && 'text-destructive',\n              success && 'text-green-600',\n              warning && 'text-yellow-600',\n              !error && !success && !warning && 'text-muted-foreground'\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n        \n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM Classification: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\n// Export types and variants\nexport { inputVariants };\nexport type { VariantProps };"
    }
  ]
}