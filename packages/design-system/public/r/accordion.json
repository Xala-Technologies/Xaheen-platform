{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "accordion",
  "type": "registry:component",
  "title": "Accordion",
  "description": "Collapsible content sections with accessibility support",
  "category": "components",
  "categories": [
    "components",
    "navigation",
    "disclosure"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/accordion/accordion.tsx",
      "type": "registry:component",
      "content": "/**\n * Accordion Component - Collapsible Content Sections\n * CLAUDE.md Compliant: Professional sizing and spacing\n * WCAG AAA: Full keyboard navigation, ARIA support, and screen reader compatibility\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDownIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst accordionVariants = cva(\n  [\n    'border border-border rounded-lg',\n    'bg-card text-card-foreground',\n    'transition-all duration-200 ease-in-out'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'shadow-sm hover:shadow-md',\n        elevated: 'shadow-md hover:shadow-lg',\n        outline: 'shadow-none',\n        ghost: 'border-transparent shadow-none',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600 shadow-sm',\n        nsmRestricted: 'border-l-4 border-l-yellow-600 shadow-sm',\n        nsmConfidential: 'border-l-4 border-l-red-600 shadow-sm',\n        nsmSecret: 'border-l-4 border-l-gray-800 shadow-sm'\n      },\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg'\n      },\n      collapsible: {\n        single: '',\n        multiple: ''\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      collapsible: 'single'\n    }\n  }\n);\n\nconst accordionItemVariants = cva(\n  [\n    'border-b border-border last:border-b-0',\n    'transition-colors duration-200'\n  ],\n  {\n    variants: {\n      disabled: {\n        true: 'opacity-50 cursor-not-allowed',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      disabled: false\n    }\n  }\n);\n\nconst accordionTriggerVariants = cva(\n  [\n    'flex w-full items-center justify-between',\n    'px-6 py-4 text-left font-medium',\n    'transition-all duration-200 ease-in-out',\n    'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-2',\n    'hover:bg-accent/5 active:bg-accent/10',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    // Professional minimum height\n    'min-h-[3rem]'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'px-4 py-3 text-sm min-h-[2.5rem]',\n        md: 'px-6 py-4 text-base min-h-[3rem]',\n        lg: 'px-8 py-5 text-lg min-h-[3.5rem]'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\nconst accordionContentVariants = cva(\n  [\n    'overflow-hidden transition-all duration-200 ease-in-out',\n    'data-[state=closed]:animate-accordion-up',\n    'data-[state=open]:animate-accordion-down'\n  ]\n);\n\nconst accordionContentInnerVariants = cva(\n  [\n    'pb-4 pt-0'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'px-4 pb-3',\n        md: 'px-6 pb-4', \n        lg: 'px-8 pb-5'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\n// Types\nexport interface AccordionProps extends \n  Omit<React.HTMLAttributes<HTMLDivElement>, 'type'>,\n  VariantProps<typeof accordionVariants> {\n  readonly type?: 'single' | 'multiple';\n  readonly value?: string | string[];\n  readonly defaultValue?: string | string[];\n  readonly onValueChange?: (value: string | string[]) => void;\n  readonly disabled?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nexport interface AccordionItemProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof accordionItemVariants> {\n  readonly value: string;\n  readonly disabled?: boolean;\n}\n\nexport interface AccordionTriggerProps extends \n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  VariantProps<typeof accordionTriggerVariants> {\n  readonly hideChevron?: boolean;\n  readonly customIcon?: React.ReactNode;\n}\n\nexport interface AccordionContentProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof accordionContentVariants> {\n  readonly forceMount?: boolean;\n}\n\n// Context for managing accordion state\ninterface AccordionContextType {\n  type: 'single' | 'multiple';\n  value: string | string[];\n  onItemToggle: (value: string) => void;\n  disabled?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst AccordionContext = React.createContext<AccordionContextType | null>(null);\n\n// Hook to use accordion context\nfunction useAccordionContext(): AccordionContextType {\n  const context = React.useContext(AccordionContext);\n  if (!context) {\n    throw new Error('Accordion components must be used within an Accordion');\n  }\n  return context;\n}\n\n// Context for individual accordion items\ninterface AccordionItemContextType {\n  value: string;\n  isOpen: boolean;\n  disabled?: boolean;\n  onToggle: () => void;\n}\n\nconst AccordionItemContext = React.createContext<AccordionItemContextType | null>(null);\n\nfunction useAccordionItemContext(): AccordionItemContextType {\n  const context = React.useContext(AccordionItemContext);\n  if (!context) {\n    throw new Error('AccordionTrigger and AccordionContent must be used within an AccordionItem');\n  }\n  return context;\n}\n\n// Main Accordion Component\nexport const Accordion = React.forwardRef<HTMLDivElement, AccordionProps>(\n  ({ \n    className, \n    variant, \n    size, \n    type = 'single',\n    value: controlledValue,\n    defaultValue,\n    onValueChange,\n    disabled = false,\n    nsmClassification,\n    children,\n    ...props \n  }, ref) => {\n    // State management for uncontrolled accordion\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<string | string[]>(\n      defaultValue || (type === 'multiple' ? [] : '')\n    );\n    \n    const isControlled = controlledValue !== undefined;\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    const handleItemToggle = React.useCallback((itemValue: string) => {\n      if (disabled) return;\n      \n      let newValue: string | string[];\n      \n      if (type === 'multiple') {\n        const currentArray = Array.isArray(value) ? value : [];\n        newValue = currentArray.includes(itemValue)\n          ? currentArray.filter(v => v !== itemValue)\n          : [...currentArray, itemValue];\n      } else {\n        newValue = value === itemValue ? '' : itemValue;\n      }\n      \n      if (!isControlled) {\n        setUncontrolledValue(newValue);\n      }\n      \n      onValueChange?.(newValue);\n    }, [disabled, type, value, isControlled, onValueChange]);\n\n    const contextValue: AccordionContextType = {\n      type,\n      value,\n      onItemToggle: handleItemToggle,\n      disabled,\n      size\n    };\n\n    return (\n      <AccordionContext.Provider value={contextValue}>\n        <div\n          ref={ref}\n          className={cn(accordionVariants({ variant: finalVariant, size }), className)}\n          data-orientation=\"vertical\"\n          {...props}\n        >\n          {/* NSM Classification for screen readers */}\n          {nsmClassification && (\n            <span className=\"sr-only\">\n              NSM Classification: {nsmClassification}\n            </span>\n          )}\n          {children}\n        </div>\n      </AccordionContext.Provider>\n    );\n  }\n);\n\nAccordion.displayName = 'Accordion';\n\n// Accordion Item Component\nexport const AccordionItem = React.forwardRef<HTMLDivElement, AccordionItemProps>(\n  ({ \n    className, \n    value: itemValue, \n    disabled: itemDisabled = false, \n    children, \n    ...props \n  }, ref) => {\n    const { value, onItemToggle, disabled: accordionDisabled, type } = useAccordionContext();\n    \n    const isDisabled = accordionDisabled || itemDisabled;\n    const isOpen = type === 'multiple' \n      ? Array.isArray(value) && value.includes(itemValue)\n      : value === itemValue;\n\n    const handleToggle = React.useCallback(() => {\n      if (!isDisabled) {\n        onItemToggle(itemValue);\n      }\n    }, [isDisabled, onItemToggle, itemValue]);\n\n    const itemContextValue: AccordionItemContextType = {\n      value: itemValue,\n      isOpen,\n      disabled: isDisabled,\n      onToggle: handleToggle\n    };\n\n    return (\n      <AccordionItemContext.Provider value={itemContextValue}>\n        <div\n          ref={ref}\n          className={cn(accordionItemVariants({ disabled: isDisabled }), className)}\n          data-state={isOpen ? 'open' : 'closed'}\n          data-disabled={isDisabled || undefined}\n          {...props}\n        >\n          {children}\n        </div>\n      </AccordionItemContext.Provider>\n    );\n  }\n);\n\nAccordionItem.displayName = 'AccordionItem';\n\n// Accordion Trigger Component\nexport const AccordionTrigger = React.forwardRef<HTMLButtonElement, AccordionTriggerProps>(\n  ({ \n    className, \n    size, \n    hideChevron = false, \n    customIcon,\n    children, \n    ...props \n  }, ref) => {\n    const { size: accordionSize } = useAccordionContext();\n    const { isOpen, disabled, onToggle, value } = useAccordionItemContext();\n    \n    const finalSize = size || accordionSize;\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        className={cn(accordionTriggerVariants({ size: finalSize }), className)}\n        disabled={disabled}\n        aria-expanded={isOpen}\n        aria-controls={`accordion-content-${value}`}\n        data-state={isOpen ? 'open' : 'closed'}\n        onClick={onToggle}\n        {...props}\n      >\n        <span className=\"text-left\">{children}</span>\n        \n        {!hideChevron && (\n          <span \n            className={cn(\n              'ml-2 flex-shrink-0 transition-transform duration-200',\n              isOpen && 'rotate-180'\n            )}\n            aria-hidden=\"true\"\n          >\n            {customIcon || (\n              <ChevronDownIcon className=\"h-5 w-5\" />\n            )}\n          </span>\n        )}\n      </button>\n    );\n  }\n);\n\nAccordionTrigger.displayName = 'AccordionTrigger';\n\n// Accordion Content Component\nexport const AccordionContent = React.forwardRef<HTMLDivElement, AccordionContentProps>(\n  ({ className, size, children, forceMount = false, ...props }, ref) => {\n    const { size: accordionSize } = useAccordionContext();\n    const { isOpen, value } = useAccordionItemContext();\n    \n    const finalSize = size || accordionSize;\n\n    if (!forceMount && !isOpen) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(accordionContentVariants(), className)}\n        id={`accordion-content-${value}`}\n        role=\"region\"\n        aria-labelledby={`accordion-trigger-${value}`}\n        data-state={isOpen ? 'open' : 'closed'}\n        style={{\n          '--accordion-content-height': 'var(--radix-accordion-content-height)',\n          '--accordion-content-width': 'var(--radix-accordion-content-width)',\n        } as React.CSSProperties}\n        {...props}\n      >\n        <div className={cn(accordionContentInnerVariants({ size: finalSize }))}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nAccordionContent.displayName = 'AccordionContent';\n\n// Export variants and types\nexport { accordionVariants, accordionItemVariants, accordionTriggerVariants, accordionContentVariants };\nexport type { VariantProps };"
    }
  ]
}