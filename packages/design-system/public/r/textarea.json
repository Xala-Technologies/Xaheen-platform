{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "textarea",
  "type": "registry:component",
  "title": "Textarea",
  "description": "Multi-line text input",
  "category": "components",
  "categories": [
    "components",
    "form",
    "input"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/textarea/textarea.tsx",
      "type": "registry:component",
      "content": "/**\n * Textarea Component - Professional multi-line text input\n * CLAUDE.md Compliant: Professional sizing with minimum height standards\n * WCAG AAA: Full keyboard support, screen reader compatibility, and proper labeling\n * Universal tokens integration for consistent theming\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst textareaVariants = cva(\n  [\n    'flex w-full rounded-lg border-2 border-input bg-background',\n    'px-4 py-3 text-base text-foreground',\n    'placeholder:text-muted-foreground',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'focus-visible:ring-primary/20 focus-visible:border-primary',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'transition-all duration-200 ease-in-out',\n    'resize-y',\n    // Autofill styles\n    'autofill:bg-background',\n    // High contrast mode\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus-visible:ring-destructive/20 focus-visible:border-destructive',\n        success: 'border-green-600 focus-visible:ring-green-600/20 focus-visible:border-green-600',\n        warning: 'border-yellow-600 focus-visible:ring-yellow-600/20 focus-visible:border-yellow-600',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600',\n        nsmRestricted: 'border-l-4 border-l-yellow-600',\n        nsmConfidential: 'border-l-4 border-l-red-600',\n        nsmSecret: 'border-l-4 border-l-gray-800'\n      },\n      size: {\n        sm: 'min-h-20 text-sm px-3 py-2',      // 80px minimum (professional)\n        md: 'min-h-24 text-base px-4 py-3',    // 96px minimum (CLAUDE.md compliant)\n        lg: 'min-h-32 text-lg px-5 py-4',      // 128px minimum (premium)\n        xl: 'min-h-40 text-xl px-6 py-5'       // 160px minimum (luxury)\n      },\n      resize: {\n        none: 'resize-none',\n        vertical: 'resize-y',\n        horizontal: 'resize-x',\n        both: 'resize'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      resize: 'vertical'\n    }\n  }\n);\n\nexport interface TextareaProps extends \n  Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'size'>,\n  VariantProps<typeof textareaVariants> {\n  readonly error?: boolean;\n  readonly success?: boolean;\n  readonly warning?: boolean;\n  readonly helperText?: string;\n  readonly characterCount?: boolean;\n  readonly maxLength?: number;\n  readonly minLength?: number;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly autoResize?: boolean;\n}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({\n    className,\n    variant,\n    size,\n    resize,\n    error,\n    success,\n    warning,\n    helperText,\n    characterCount = false,\n    maxLength,\n    minLength,\n    nsmClassification,\n    autoResize = false,\n    disabled,\n    value,\n    defaultValue,\n    onChange,\n    'aria-describedby': ariaDescribedBy,\n    ...props\n  }, ref) => {\n    const [internalValue, setInternalValue] = React.useState(defaultValue || '');\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n    \n    // Use forwarded ref or internal ref\n    React.useImperativeHandle(ref, () => textareaRef.current!);\n    \n    const isControlled = value !== undefined;\n    const currentValue = isControlled ? value : internalValue;\n    \n    // Determine variant based on state\n    const stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : stateVariant;\n    \n    // Generate unique IDs\n    const textareaId = React.useId();\n    const helperTextId = helperText ? `${textareaId}-helper` : undefined;\n    const countId = characterCount ? `${textareaId}-count` : undefined;\n    const combinedAriaDescribedBy = [ariaDescribedBy, helperTextId, countId]\n      .filter(Boolean)\n      .join(' ') || undefined;\n\n    // Auto-resize functionality\n    const adjustHeight = React.useCallback(() => {\n      if (!autoResize || !textareaRef.current) return;\n      \n      const textarea = textareaRef.current;\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    }, [autoResize]);\n\n    React.useEffect(() => {\n      if (autoResize) {\n        adjustHeight();\n      }\n    }, [currentValue, autoResize, adjustHeight]);\n\n    const handleChange = React.useCallback((event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      try {\n        if (!isControlled) {\n          setInternalValue(event.target.value);\n        }\n        \n        onChange?.(event);\n        \n        if (autoResize) {\n          adjustHeight();\n        }\n      } catch (error) {\n        console.error('Textarea change error:', error);\n      }\n    }, [isControlled, onChange, autoResize, adjustHeight]);\n\n    // Character count calculation\n    const characterCountCurrent = String(currentValue || '').length;\n    const isOverLimit = maxLength ? characterCountCurrent > maxLength : false;\n    const isUnderLimit = minLength ? characterCountCurrent < minLength : false;\n\n    const textareaElement = (\n      <textarea\n        className={cn(\n          textareaVariants({ \n            variant: finalVariant, \n            size, \n            resize: autoResize ? 'none' : resize \n          }),\n          className\n        )}\n        ref={textareaRef}\n        disabled={disabled}\n        value={currentValue}\n        maxLength={maxLength}\n        minLength={minLength}\n        aria-invalid={error ? 'true' : undefined}\n        aria-describedby={combinedAriaDescribedBy}\n        onChange={handleChange}\n        {...props}\n      />\n    );\n\n    // If no helper text, character count, or NSM classification, return textarea directly\n    if (!helperText && !characterCount && !nsmClassification) {\n      return textareaElement;\n    }\n\n    // Otherwise, wrap with additional elements\n    return (\n      <div className=\"space-y-2\">\n        {textareaElement}\n        \n        <div className=\"flex justify-between items-start\">\n          {/* Helper Text */}\n          {helperText && (\n            <p \n              id={helperTextId}\n              className={cn(\n                'text-sm',\n                error && 'text-destructive',\n                success && 'text-green-600',\n                warning && 'text-yellow-600',\n                !error && !success && !warning && 'text-muted-foreground'\n              )}\n            >\n              {helperText}\n            </p>\n          )}\n          \n          {/* Character Count */}\n          {characterCount && (\n            <p \n              id={countId}\n              className={cn(\n                'text-sm tabular-nums',\n                isOverLimit && 'text-destructive font-medium',\n                isUnderLimit && minLength && 'text-yellow-600',\n                !isOverLimit && !isUnderLimit && 'text-muted-foreground'\n              )}\n              aria-live=\"polite\"\n            >\n              {characterCountCurrent}\n              {maxLength && (\n                <span className=\"text-muted-foreground\">\n                  /{maxLength}\n                </span>\n              )}\n            </p>\n          )}\n        </div>\n        \n        {/* Validation Messages */}\n        {isOverLimit && maxLength && (\n          <p className=\"text-sm text-destructive\" role=\"alert\">\n            Character limit exceeded by {characterCountCurrent - maxLength}\n          </p>\n        )}\n        \n        {isUnderLimit && minLength && (\n          <p className=\"text-sm text-yellow-600\" role=\"alert\">\n            Minimum {minLength - characterCountCurrent} more characters required\n          </p>\n        )}\n        \n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            NSM Classification: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nTextarea.displayName = 'Textarea';\n\n// Export types and variants\nexport { textareaVariants };\nexport type { VariantProps };"
    }
  ]
}