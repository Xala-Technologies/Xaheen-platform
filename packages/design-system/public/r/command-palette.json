{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "command-palette",
  "type": "registry:block",
  "title": "Command Palette",
  "description": "Quick action command interface",
  "category": "patterns",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "dialog",
    "input",
    "button"
  ],
  "files": [
    {
      "path": "blocks/command-palette/command-palette.tsx",
      "type": "registry:component",
      "content": "/**\n * Command Palette Block - Global Command Interface\n * WCAG AAA compliant with keyboard shortcuts and screen reader support\n * Norwegian standards with extensive command search capabilities\n */\n\nimport React, { useState, useCallback, useEffect, useRef, useMemo } from 'react';\nimport { cn } from '../../lib/utils';\nimport { Button } from '../../components/button/button';\nimport { Input } from '../../components/input/input';\n\nexport interface CommandItem {\n  readonly id: string;\n  readonly title: string;\n  readonly description?: string;\n  readonly icon?: React.ReactNode;\n  readonly shortcut?: string[];\n  readonly category?: string;\n  readonly action?: () => void | Promise<void>;\n  readonly disabled?: boolean;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly keywords?: string[];\n  readonly priority?: number;\n}\n\nexport interface CommandCategory {\n  readonly id: string;\n  readonly title: string;\n  readonly icon?: React.ReactNode;\n  readonly items: CommandItem[];\n}\n\nexport interface CommandPaletteTexts {\n  readonly placeholder: string;\n  readonly searchPrompt: string;\n  readonly noResultsFound: string;\n  readonly loadingText: string;\n  readonly closeLabel: string;\n  readonly searchLabel: string;\n  readonly executeLabel: string;\n  readonly navigateHint: string;\n  readonly selectHint: string;\n  readonly closeHint: string;\n  readonly categoryLabel: string;\n  readonly resultsCount: string;\n  readonly recentCommands: string;\n  readonly suggestedCommands: string;\n  readonly allCommands: string;\n  readonly executingCommand: string;\n  readonly commandExecuted: string;\n  readonly dialogTitle: string;\n}\n\nexport interface CommandPaletteState {\n  readonly isOpen: boolean;\n  readonly query: string;\n  readonly selectedIndex: number;\n  readonly loading: boolean;\n  readonly executing: boolean;\n  readonly executingCommand?: string;\n  readonly recentCommands: string[];\n  readonly filteredItems: CommandItem[];\n  readonly categories: CommandCategory[];\n}\n\nexport interface CommandPaletteCallbacks {\n  readonly onOpen?: () => void;\n  readonly onClose?: () => void;\n  readonly onQueryChange?: (query: string) => void;\n  readonly onCommandExecute?: (command: CommandItem) => void;\n  readonly onRecentCommand?: (commandId: string) => void;\n  readonly onAnnounce?: (message: string) => void;\n  readonly onKeyboardShortcut?: (shortcut: string[]) => void;\n  readonly onStateChange?: (state: Partial<CommandPaletteState>) => void;\n}\n\nexport interface CommandPaletteProps {\n  readonly texts?: Partial<CommandPaletteTexts>;\n  readonly callbacks: CommandPaletteCallbacks;\n  readonly state?: Partial<CommandPaletteState>;\n  readonly commands: CommandItem[];\n  readonly className?: string;\n  readonly maxResults?: number;\n  readonly showCategories?: boolean;\n  readonly showShortcuts?: boolean;\n  readonly showRecentCommands?: boolean;\n  readonly keyboardShortcut?: string[];\n  readonly debounceMs?: number;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n}\n\nconst defaultTexts: CommandPaletteTexts = {\n  placeholder: 'S√∏k etter kommandoer...',\n  searchPrompt: 'Skriv for √• s√∏ke etter kommandoer',\n  noResultsFound: 'Ingen kommandoer funnet',\n  loadingText: 'Laster kommandoer...',\n  closeLabel: 'Lukk kommandopalett',\n  searchLabel: 'S√∏k kommandoer',\n  executeLabel: 'Utf√∏r kommando',\n  navigateHint: 'Naviger',\n  selectHint: 'Velg',\n  closeHint: 'Lukk',\n  categoryLabel: 'Kategori',\n  resultsCount: 'resultater',\n  recentCommands: 'Nylige kommandoer',\n  suggestedCommands: 'Foresl√•tte kommandoer',\n  allCommands: 'Alle kommandoer',\n  executingCommand: 'Utf√∏rer kommando...',\n  commandExecuted: 'Kommando utf√∏rt',\n  dialogTitle: 'Kommandopalett'\n};\n\nconst defaultState: CommandPaletteState = {\n  isOpen: false,\n  query: '',\n  selectedIndex: -1,\n  loading: false,\n  executing: false,\n  recentCommands: [],\n  filteredItems: [],\n  categories: []\n};\n\nconst defaultCommands: CommandItem[] = [\n  {\n    id: 'search',\n    title: 'S√∏k',\n    description: 'S√∏k i dokumenter og filer',\n    icon: 'üîç',\n    shortcut: ['Ctrl', 'K'],\n    category: 'navigation',\n    keywords: ['find', 'search', 'look', 's√∏k', 'finn']\n  },\n  {\n    id: 'new-document',\n    title: 'Nytt dokument',\n    description: 'Opprett et nytt dokument',\n    icon: 'üìÑ',\n    shortcut: ['Ctrl', 'N'],\n    category: 'creation',\n    keywords: ['new', 'create', 'document', 'ny', 'dokument']\n  },\n  {\n    id: 'settings',\n    title: 'Innstillinger',\n    description: '√Öpne applikasjonsinnstillinger',\n    icon: '‚öôÔ∏è',\n    shortcut: ['Ctrl', ','],\n    category: 'system',\n    keywords: ['settings', 'preferences', 'config', 'innstillinger']\n  }\n];\n\nexport const CommandPalette: React.FC<CommandPaletteProps> = ({\n  texts = {},\n  callbacks,\n  state = {},\n  commands = defaultCommands,\n  className,\n  maxResults = 10,\n  showCategories = true,\n  showShortcuts = true,\n  showRecentCommands = true,\n  keyboardShortcut = ['Meta', 'K'],\n  debounceMs = 200,\n  nsmClassification\n}) => {\n  const t = { ...defaultTexts, ...texts };\n  const currentState = { ...defaultState, ...state };\n  \n  const {\n    isOpen,\n    query,\n    selectedIndex,\n    loading,\n    executing,\n    executingCommand,\n    recentCommands,\n    filteredItems,\n    categories\n  } = currentState;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n\n  // Update state helper\n  const updateState = useCallback((updates: Partial<CommandPaletteState>) => {\n    callbacks.onStateChange?.(updates);\n  }, [callbacks]);\n\n  const announce = useCallback((message: string) => {\n    callbacks.onAnnounce?.(message);\n  }, [callbacks]);\n\n  // Filter commands based on query\n  const filteredCommands = useMemo(() => {\n    if (!query) return commands.slice(0, maxResults);\n    \n    const lowerQuery = query.toLowerCase();\n    const matches = commands.filter(command => {\n      const titleMatch = command.title.toLowerCase().includes(lowerQuery);\n      const descriptionMatch = command.description?.toLowerCase().includes(lowerQuery);\n      const keywordMatch = command.keywords?.some(keyword => \n        keyword.toLowerCase().includes(lowerQuery)\n      );\n      \n      return titleMatch || descriptionMatch || keywordMatch;\n    });\n\n    // Sort by relevance (priority, then title match, then description match)\n    return matches\n      .sort((a, b) => {\n        const aPriority = a.priority || 0;\n        const bPriority = b.priority || 0;\n        if (aPriority !== bPriority) return bPriority - aPriority;\n        \n        const aTitleMatch = a.title.toLowerCase().includes(lowerQuery);\n        const bTitleMatch = b.title.toLowerCase().includes(lowerQuery);\n        if (aTitleMatch !== bTitleMatch) return aTitleMatch ? -1 : 1;\n        \n        return a.title.localeCompare(b.title);\n      })\n      .slice(0, maxResults);\n  }, [query, commands, maxResults]);\n\n  // Group commands by category\n  const categorizedCommands = useMemo(() => {\n    if (!showCategories) return filteredCommands;\n    \n    const grouped = filteredCommands.reduce((acc, command) => {\n      const category = command.category || 'other';\n      if (!acc[category]) acc[category] = [];\n      acc[category].push(command);\n      return acc;\n    }, {} as Record<string, CommandItem[]>);\n\n    return Object.entries(grouped).map(([categoryId, items]) => ({\n      id: categoryId,\n      title: categoryId.charAt(0).toUpperCase() + categoryId.slice(1),\n      items\n    }));\n  }, [filteredCommands, showCategories]);\n\n  // Recent commands filtered\n  const recentCommandItems = useMemo(() => {\n    if (!showRecentCommands) return [];\n    return recentCommands\n      .map(id => commands.find(cmd => cmd.id === id))\n      .filter(Boolean) as CommandItem[];\n  }, [recentCommands, commands, showRecentCommands]);\n\n  // Global keyboard shortcut handler\n  const handleGlobalKeyDown = useCallback((e: KeyboardEvent) => {\n    const keys = [];\n    if (e.ctrlKey) keys.push('Ctrl');\n    if (e.metaKey) keys.push('Meta');\n    if (e.altKey) keys.push('Alt');\n    if (e.shiftKey) keys.push('Shift');\n    keys.push(e.key);\n\n    if (keyboardShortcut.every(key => keys.includes(key))) {\n      e.preventDefault();\n      if (!isOpen) {\n        callbacks.onOpen?.();\n        updateState({ isOpen: true });\n        callbacks.onKeyboardShortcut?.(keyboardShortcut);\n      }\n    }\n\n    if (e.key === 'Escape' && isOpen) {\n      e.preventDefault();\n      handleClose();\n    }\n  }, [keyboardShortcut, isOpen, callbacks, updateState]);\n\n  // Register global keyboard shortcut\n  useEffect(() => {\n    window.addEventListener('keydown', handleGlobalKeyDown);\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown);\n  }, [handleGlobalKeyDown]);\n\n  // Focus management\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // Debounced query update\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      updateState({ filteredItems: filteredCommands });\n      if (query && filteredCommands.length > 0) {\n        updateState({ selectedIndex: 0 });\n      } else {\n        updateState({ selectedIndex: -1 });\n      }\n    }, debounceMs);\n\n    return () => clearTimeout(timer);\n  }, [query, filteredCommands, debounceMs, updateState]);\n\n  // Event handlers\n  const handleOpen = useCallback(() => {\n    callbacks.onOpen?.();\n    updateState({ isOpen: true, query: '', selectedIndex: -1 });\n  }, [callbacks, updateState]);\n\n  const handleClose = useCallback(() => {\n    callbacks.onClose?.();\n    updateState({ isOpen: false, query: '', selectedIndex: -1 });\n  }, [callbacks, updateState]);\n\n  const handleQueryChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = e.target.value;\n    callbacks.onQueryChange?.(newQuery);\n    updateState({ query: newQuery });\n  }, [callbacks, updateState]);\n\n  const handleKeyDown = useCallback(async (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        const nextIndex = selectedIndex < filteredCommands.length - 1 \n          ? selectedIndex + 1 \n          : selectedIndex;\n        updateState({ selectedIndex: nextIndex });\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault();\n        const prevIndex = selectedIndex > 0 ? selectedIndex - 1 : -1;\n        updateState({ selectedIndex: prevIndex });\n        break;\n\n      case 'Enter':\n        e.preventDefault();\n        if (selectedIndex >= 0 && filteredCommands[selectedIndex]) {\n          await handleExecuteCommand(filteredCommands[selectedIndex]);\n        }\n        break;\n\n      case 'Escape':\n        e.preventDefault();\n        handleClose();\n        break;\n    }\n  }, [selectedIndex, filteredCommands, updateState, handleClose]);\n\n  const handleExecuteCommand = useCallback(async (command: CommandItem) => {\n    if (command.disabled || executing) return;\n\n    try {\n      updateState({ \n        executing: true, \n        executingCommand: command.title \n      });\n      \n      announce(`${t.executingCommand} ${command.title}`);\n      \n      // Add to recent commands\n      const newRecent = [command.id, ...recentCommands.filter(id => id !== command.id)].slice(0, 5);\n      updateState({ recentCommands: newRecent });\n      \n      // Execute command\n      if (command.action) {\n        await command.action();\n      }\n      \n      callbacks.onCommandExecute?.(command);\n      announce(`${t.commandExecuted}: ${command.title}`);\n      \n      // Close palette after execution\n      setTimeout(() => {\n        handleClose();\n      }, 100);\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Command execution failed';\n      announce(`Error: ${errorMessage}`);\n    } finally {\n      updateState({ executing: false, executingCommand: undefined });\n    }\n  }, [executing, recentCommands, callbacks, updateState, announce, t, handleClose]);\n\n  const handleCommandClick = useCallback((command: CommandItem) => {\n    updateState({ selectedIndex: filteredCommands.indexOf(command) });\n    handleExecuteCommand(command);\n  }, [filteredCommands, updateState, handleExecuteCommand]);\n\n  const renderShortcut = useCallback((shortcut: string[]) => {\n    if (!showShortcuts) return null;\n    \n    return (\n      <div className=\"flex items-center gap-1\">\n        {shortcut.map((key, index) => (\n          <kbd\n            key={index}\n            className=\"px-2 py-1 text-xs font-mono bg-muted border rounded\"\n          >\n            {key === 'Meta' ? '‚åò' : key === 'Ctrl' ? '‚åÉ' : key}\n          </kbd>\n        ))}\n      </div>\n    );\n  }, [showShortcuts]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50\"\n        onClick={handleClose}\n        aria-hidden=\"true\"\n      />\n\n      {/* Command Palette Dialog */}\n      <div \n        className={cn(\n          'fixed z-50 w-full max-w-2xl',\n          'top-[15%] left-1/2 -translate-x-1/2',\n          'animate-in fade-in slide-in-from-bottom-4',\n          className\n        )}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-label={t.dialogTitle}\n      >\n        <div className={cn(\n          'bg-card border-2 border-border rounded-xl shadow-2xl overflow-hidden',\n          nsmClassification && 'border-l-4',\n          nsmClassification === 'OPEN' && 'border-l-green-600',\n          nsmClassification === 'RESTRICTED' && 'border-l-yellow-600',\n          nsmClassification === 'CONFIDENTIAL' && 'border-l-red-600',\n          nsmClassification === 'SECRET' && 'border-l-gray-800'\n        )}>\n          \n          {/* Search Input */}\n          <div className=\"flex items-center gap-3 p-4 border-b\">\n            <svg className=\"h-5 w-5 text-muted-foreground\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n            \n            <Input\n              ref={inputRef}\n              value={query}\n              onChange={handleQueryChange}\n              onKeyDown={handleKeyDown}\n              placeholder={t.placeholder}\n              className=\"flex-1 border-0 focus:ring-0 h-12 text-lg bg-transparent\"\n              aria-label={t.searchLabel}\n              autoComplete=\"off\"\n              spellCheck={false}\n            />\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              aria-label={t.closeLabel}\n              className=\"flex-shrink-0\"\n            >\n              <span className=\"text-xl\">√ó</span>\n            </Button>\n          </div>\n\n          {/* Command List */}\n          <div \n            ref={listRef}\n            className=\"max-h-[400px] overflow-y-auto\"\n            role=\"listbox\"\n            aria-label=\"Available commands\"\n          >\n            {/* Loading State */}\n            {loading && (\n              <div className=\"p-8 text-center\">\n                <div className=\"inline-flex items-center gap-3\">\n                  <div className=\"h-5 w-5 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span>{t.loadingText}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Executing State */}\n            {executing && executingCommand && (\n              <div className=\"p-4 bg-primary/10 border-b\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-4 w-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span className=\"text-primary font-medium\">\n                    {t.executingCommand} {executingCommand}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            {/* Recent Commands */}\n            {!loading && !query && recentCommandItems.length > 0 && (\n              <div className=\"p-4 border-b\">\n                <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">\n                  {t.recentCommands}\n                </h3>\n                <div className=\"space-y-1\">\n                  {recentCommandItems.map((command, index) => (\n                    <button\n                      key={command.id}\n                      onClick={() => handleCommandClick(command)}\n                      className={cn(\n                        'flex items-center gap-3 w-full p-3 rounded-lg text-left transition-colors',\n                        'hover:bg-accent',\n                        selectedIndex === index && 'bg-accent'\n                      )}\n                      role=\"option\"\n                      aria-selected={selectedIndex === index}\n                      disabled={command.disabled}\n                    >\n                      {command.icon && (\n                        <span className=\"text-xl flex-shrink-0\" aria-hidden=\"true\">\n                          {command.icon}\n                        </span>\n                      )}\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium truncate\">{command.title}</p>\n                        {command.description && (\n                          <p className=\"text-sm text-muted-foreground truncate\">\n                            {command.description}\n                          </p>\n                        )}\n                      </div>\n                      {command.shortcut && renderShortcut(command.shortcut)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Filtered Commands */}\n            {!loading && filteredCommands.length > 0 && (\n              <div className=\"p-2\">\n                {showCategories ? (\n                  // Categorized view\n                  categorizedCommands.map(category => (\n                    <div key={category.id} className=\"mb-4 last:mb-0\">\n                      <h3 className=\"px-3 py-2 text-sm font-medium text-muted-foreground\">\n                        {category.title}\n                      </h3>\n                      {category.items.map((command, globalIndex) => {\n                        const isSelected = selectedIndex === filteredCommands.indexOf(command);\n                        return (\n                          <button\n                            key={command.id}\n                            onClick={() => handleCommandClick(command)}\n                            className={cn(\n                              'flex items-center gap-3 w-full p-3 rounded-lg text-left transition-colors',\n                              'hover:bg-accent',\n                              isSelected && 'bg-accent',\n                              command.disabled && 'opacity-50 cursor-not-allowed'\n                            )}\n                            role=\"option\"\n                            aria-selected={isSelected}\n                            disabled={command.disabled}\n                          >\n                            {command.icon && (\n                              <span className=\"text-xl flex-shrink-0\" aria-hidden=\"true\">\n                                {command.icon}\n                              </span>\n                            )}\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"font-medium truncate\">{command.title}</p>\n                              {command.description && (\n                                <p className=\"text-sm text-muted-foreground truncate\">\n                                  {command.description}\n                                </p>\n                              )}\n                            </div>\n                            {command.nsmClassification && (\n                              <span className={cn(\n                                'text-xs px-2 py-1 rounded',\n                                command.nsmClassification === 'OPEN' && 'bg-green-100 text-green-700',\n                                command.nsmClassification === 'RESTRICTED' && 'bg-yellow-100 text-yellow-700',\n                                command.nsmClassification === 'CONFIDENTIAL' && 'bg-red-100 text-red-700',\n                                command.nsmClassification === 'SECRET' && 'bg-gray-100 text-gray-700'\n                              )}>\n                                {command.nsmClassification}\n                              </span>\n                            )}\n                            {command.shortcut && renderShortcut(command.shortcut)}\n                          </button>\n                        );\n                      })}\n                    </div>\n                  ))\n                ) : (\n                  // Flat view\n                  filteredCommands.map((command, index) => (\n                    <button\n                      key={command.id}\n                      onClick={() => handleCommandClick(command)}\n                      className={cn(\n                        'flex items-center gap-3 w-full p-3 rounded-lg text-left transition-colors',\n                        'hover:bg-accent',\n                        selectedIndex === index && 'bg-accent',\n                        command.disabled && 'opacity-50 cursor-not-allowed'\n                      )}\n                      role=\"option\"\n                      aria-selected={selectedIndex === index}\n                      disabled={command.disabled}\n                    >\n                      {command.icon && (\n                        <span className=\"text-xl flex-shrink-0\" aria-hidden=\"true\">\n                          {command.icon}\n                        </span>\n                      )}\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium truncate\">{command.title}</p>\n                        {command.description && (\n                          <p className=\"text-sm text-muted-foreground truncate\">\n                            {command.description}\n                          </p>\n                        )}\n                      </div>\n                      {command.nsmClassification && (\n                        <span className={cn(\n                          'text-xs px-2 py-1 rounded',\n                          command.nsmClassification === 'OPEN' && 'bg-green-100 text-green-700',\n                          command.nsmClassification === 'RESTRICTED' && 'bg-yellow-100 text-yellow-700',\n                          command.nsmClassification === 'CONFIDENTIAL' && 'bg-red-100 text-red-700',\n                          command.nsmClassification === 'SECRET' && 'bg-gray-100 text-gray-700'\n                        )}>\n                          {command.nsmClassification}\n                        </span>\n                      )}\n                      {command.shortcut && renderShortcut(command.shortcut)}\n                    </button>\n                  ))\n                )}\n              </div>\n            )}\n\n            {/* No Results */}\n            {!loading && query && filteredCommands.length === 0 && (\n              <div className=\"p-8 text-center\">\n                <p className=\"text-muted-foreground\">\n                  {t.noResultsFound}\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-3 border-t bg-muted/50 flex items-center justify-between text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-4\">\n              <span className=\"flex items-center gap-1\">\n                <kbd className=\"px-1.5 py-0.5 rounded bg-background border\">‚Üë‚Üì</kbd>\n                {t.navigateHint}\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <kbd className=\"px-1.5 py-0.5 rounded bg-background border\">‚Üµ</kbd>\n                {t.selectHint}\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <kbd className=\"px-1.5 py-0.5 rounded bg-background border\">esc</kbd>\n                {t.closeHint}\n              </span>\n            </div>\n            {filteredCommands.length > 0 && (\n              <span>{filteredCommands.length} {t.resultsCount}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};"
    }
  ]
}