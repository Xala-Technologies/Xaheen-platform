{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "utils",
  "type": "registry:utils",
  "title": "Utilities",
  "description": "Core utility functions",
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte"
  ],
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "utils/cn.ts",
      "type": "registry:utils",
      "content": "/**\n * Class Name Utility Function\n * Professional implementation of clsx with proper type safety\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Utility function to merge CSS class names\n * Combines clsx functionality with tailwind-merge for optimal Tailwind CSS handling\n * \n * @param inputs - CSS class names, objects, or arrays\n * @returns Merged class name string\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Conditional class name utility\n * Applies classes based on boolean conditions\n * \n * @param condition - Boolean condition\n * @param truthyClasses - Classes to apply when condition is true\n * @param falsyClasses - Classes to apply when condition is false\n * @returns Conditional class name string\n */\nexport function conditional(\n  condition: boolean,\n  truthyClasses: ClassValue,\n  falsyClasses?: ClassValue\n): string {\n  return cn(condition ? truthyClasses : falsyClasses);\n}\n\n/**\n * Responsive class name utility\n * Applies different classes at different breakpoints\n * \n * @param base - Base classes (applied at all breakpoints)\n * @param responsive - Responsive classes object\n * @returns Responsive class name string\n */\nexport function responsive(\n  base: ClassValue,\n  responsive: {\n    sm?: ClassValue;\n    md?: ClassValue;\n    lg?: ClassValue;\n    xl?: ClassValue;\n    '2xl'?: ClassValue;\n  }\n): string {\n  return cn(\n    base,\n    responsive.sm && `sm:${responsive.sm}`,\n    responsive.md && `md:${responsive.md}`,\n    responsive.lg && `lg:${responsive.lg}`,\n    responsive.xl && `xl:${responsive.xl}`,\n    responsive['2xl'] && `2xl:${responsive['2xl']}`\n  );\n}\n\n/**\n * Focus ring utility for accessibility\n * Applies consistent focus styling across components\n * \n * @param variant - Focus ring variant\n * @returns Focus ring class names\n */\nexport function focusRing(variant: 'default' | 'primary' | 'destructive' = 'default'): string {\n  const baseClasses = 'focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  switch (variant) {\n    case 'primary':\n      return cn(baseClasses, 'focus:ring-primary/20');\n    case 'destructive':\n      return cn(baseClasses, 'focus:ring-destructive/20');\n    default:\n      return cn(baseClasses, 'focus:ring-ring');\n  }\n}\n\n/**\n * High contrast mode support utility\n * Adds additional styling for high contrast mode\n * \n * @param classes - Additional classes for high contrast\n * @returns High contrast compatible class names\n */\nexport function highContrast(classes: ClassValue): string {\n  return cn(\n    classes,\n    'contrast-more:border-2',\n    'contrast-more:shadow-none'\n  );\n}\n\n/**\n * Reduced motion support utility\n * Removes animations for users who prefer reduced motion\n * \n * @param animatedClasses - Classes with animations\n * @param staticClasses - Classes without animations (fallback)\n * @returns Motion-safe class names\n */\nexport function motionSafe(\n  animatedClasses: ClassValue,\n  staticClasses?: ClassValue\n): string {\n  return cn(\n    'motion-reduce:animate-none',\n    'motion-reduce:transform-none',\n    animatedClasses,\n    staticClasses && `motion-reduce:${staticClasses}`\n  );\n}\n\n/**\n * Dark mode variant utility\n * Applies different classes for light and dark themes\n * \n * @param lightClasses - Classes for light mode\n * @param darkClasses - Classes for dark mode\n * @returns Theme-aware class names\n */\nexport function themeVariant(\n  lightClasses: ClassValue,\n  darkClasses: ClassValue\n): string {\n  return cn(lightClasses, `dark:${darkClasses}`);\n}\n\n/**\n * NSM classification utility\n * Applies appropriate styling based on Norwegian security classification\n * \n * @param classification - NSM security classification\n * @returns NSM-appropriate class names\n */\nexport function nsmClassification(\n  classification: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET'\n): string {\n  switch (classification) {\n    case 'OPEN':\n      return 'border-green-200 bg-green-50/50 text-green-800';\n    case 'RESTRICTED':\n      return 'border-yellow-200 bg-yellow-50/50 text-yellow-800';\n    case 'CONFIDENTIAL':\n      return 'border-red-200 bg-red-50/50 text-red-800';\n    case 'SECRET':\n      return 'border-gray-400 bg-gray-100/50 text-gray-900';\n    default:\n      return '';\n  }\n}"
    }
  ]
}