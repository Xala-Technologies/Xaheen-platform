{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "use-accessibility",
  "type": "registry:hook",
  "title": "useAccessibility",
  "description": "WCAG AAA compliance hooks",
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "files": [
    {
      "path": "hooks/use-accessibility.ts",
      "type": "registry:hook",
      "content": "/**\n * useAccessibility Hook - WCAG AAA Compliance Utilities\n * Norwegian accessibility standards and requirements\n * Comprehensive accessibility testing and management\n */\n\nimport { useEffect, useState, useCallback, useRef } from 'react';\n\nexport interface AccessibilityConfig {\n  /** Enable live region announcements */\n  readonly announcements?: boolean;\n  /** Language for screen reader announcements */\n  readonly language?: 'nb-NO' | 'nn-NO' | 'en-US';\n  /** Enable focus trap management */\n  readonly focusTrap?: boolean;\n  /** Enable skip links */\n  readonly skipLinks?: boolean;\n}\n\nexport interface AccessibilityState {\n  /** User prefers reduced motion */\n  readonly prefersReducedMotion: boolean;\n  /** User prefers high contrast */\n  readonly prefersHighContrast: boolean;\n  /** User prefers reduced transparency */\n  readonly prefersReducedTransparency: boolean;\n  /** Keyboard navigation is active */\n  readonly keyboardNavigation: boolean;\n  /** Screen reader is detected */\n  readonly screenReaderActive: boolean;\n  /** Current color scheme preference */\n  readonly colorScheme: 'light' | 'dark' | 'no-preference';\n  /** Current language */\n  readonly language: string;\n}\n\nexport interface AccessibilityHelpers {\n  /** Announce message to screen readers */\n  readonly announce: (message: string, priority?: 'polite' | 'assertive') => void;\n  /** Set page title with proper formatting */\n  readonly setTitle: (title: string, includeAppName?: boolean) => void;\n  /** Trap focus within an element */\n  readonly trapFocus: (element: HTMLElement) => () => void;\n  /** Create skip link */\n  readonly createSkipLink: (target: string, label?: string) => void;\n  /** Check color contrast ratio */\n  readonly checkContrast: (foreground: string, background: string) => number;\n  /** Format number for Norwegian locale */\n  readonly formatNumber: (num: number, options?: Intl.NumberFormatOptions) => string;\n  /** Format date for Norwegian locale */\n  readonly formatDate: (date: Date, options?: Intl.DateTimeFormatOptions) => string;\n  /** Get ARIA label in Norwegian */\n  readonly getAriaLabel: (key: string, params?: Record<string, string>) => string;\n}\n\n// Norwegian ARIA labels\nconst norwegianAriaLabels: Record<string, string> = {\n  'close': 'Lukk',\n  'open': 'Åpne',\n  'menu': 'Meny',\n  'navigation': 'Navigasjon',\n  'search': 'Søk',\n  'loading': 'Laster',\n  'error': 'Feil',\n  'success': 'Suksess',\n  'warning': 'Advarsel',\n  'info': 'Informasjon',\n  'previous': 'Forrige',\n  'next': 'Neste',\n  'first': 'Første',\n  'last': 'Siste',\n  'page': 'Side',\n  'of': 'av',\n  'items': 'elementer',\n  'selected': 'valgt',\n  'expanded': 'utvidet',\n  'collapsed': 'kollapset',\n  'sort-ascending': 'Sorter stigende',\n  'sort-descending': 'Sorter synkende',\n  'filter': 'Filter',\n  'clear': 'Tøm',\n  'apply': 'Bruk',\n  'cancel': 'Avbryt',\n  'save': 'Lagre',\n  'delete': 'Slett',\n  'edit': 'Rediger',\n  'view': 'Vis',\n  'more': 'Mer',\n  'less': 'Mindre',\n  'show-all': 'Vis alle',\n  'hide': 'Skjul',\n  'required': 'påkrevd',\n  'optional': 'valgfritt'\n};\n\nexport const useAccessibility = (config: AccessibilityConfig = {}): [AccessibilityState, AccessibilityHelpers] => {\n  const {\n    announcements = true,\n    language = 'nb-NO',\n    focusTrap = false,\n    skipLinks = true\n  } = config;\n\n  // State\n  const [state, setState] = useState<AccessibilityState>({\n    prefersReducedMotion: false,\n    prefersHighContrast: false,\n    prefersReducedTransparency: false,\n    keyboardNavigation: false,\n    screenReaderActive: false,\n    colorScheme: 'no-preference',\n    language\n  });\n\n  // Refs\n  const announcerRef = useRef<HTMLDivElement | null>(null);\n  const focusTrapCleanupRef = useRef<(() => void) | null>(null);\n\n  // Initialize accessibility features\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    // Check media queries\n    const updateMediaQueries = () => {\n      setState(prev => ({\n        ...prev,\n        prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n        prefersHighContrast: window.matchMedia('(prefers-contrast: high)').matches,\n        prefersReducedTransparency: window.matchMedia('(prefers-reduced-transparency: reduce)').matches,\n        colorScheme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : \n                     window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : \n                     'no-preference'\n      }));\n    };\n\n    updateMediaQueries();\n\n    // Media query listeners\n    const queries = [\n      window.matchMedia('(prefers-reduced-motion: reduce)'),\n      window.matchMedia('(prefers-contrast: high)'),\n      window.matchMedia('(prefers-reduced-transparency: reduce)'),\n      window.matchMedia('(prefers-color-scheme: dark)'),\n      window.matchMedia('(prefers-color-scheme: light)')\n    ];\n\n    queries.forEach(query => query.addEventListener('change', updateMediaQueries));\n\n    // Keyboard navigation detection\n    let lastInteraction: 'mouse' | 'keyboard' = 'mouse';\n    \n    const handleMouseDown = () => {\n      lastInteraction = 'mouse';\n      setState(prev => ({ ...prev, keyboardNavigation: false }));\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Tab') {\n        lastInteraction = 'keyboard';\n        setState(prev => ({ ...prev, keyboardNavigation: true }));\n      }\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Create announcer element\n    if (announcements && !announcerRef.current) {\n      const announcer = document.createElement('div');\n      announcer.setAttribute('role', 'status');\n      announcer.setAttribute('aria-live', 'polite');\n      announcer.setAttribute('aria-atomic', 'true');\n      announcer.className = 'sr-only';\n      announcer.style.cssText = 'position: absolute; left: -10000px; width: 1px; height: 1px; overflow: hidden;';\n      document.body.appendChild(announcer);\n      announcerRef.current = announcer;\n    }\n\n    return () => {\n      queries.forEach(query => query.removeEventListener('change', updateMediaQueries));\n      window.removeEventListener('mousedown', handleMouseDown);\n      window.removeEventListener('keydown', handleKeyDown);\n      \n      if (announcerRef.current) {\n        document.body.removeChild(announcerRef.current);\n        announcerRef.current = null;\n      }\n    };\n  }, [announcements]);\n\n  // Announce to screen readers\n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    if (!announcerRef.current) return;\n    \n    announcerRef.current.setAttribute('aria-live', priority);\n    announcerRef.current.textContent = message;\n    \n    // Clear after announcement\n    setTimeout(() => {\n      if (announcerRef.current) {\n        announcerRef.current.textContent = '';\n      }\n    }, 1000);\n  }, []);\n\n  // Set document title\n  const setTitle = useCallback((title: string, includeAppName = true) => {\n    const appName = 'Xaheen';\n    document.title = includeAppName ? `${title} - ${appName}` : title;\n  }, []);\n\n  // Focus trap implementation\n  const trapFocus = useCallback((element: HTMLElement) => {\n    const focusableElements = element.querySelectorAll(\n      'a[href], button, textarea, input[type=\"text\"], input[type=\"radio\"], input[type=\"checkbox\"], select, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    const firstFocusable = focusableElements[0] as HTMLElement;\n    const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n\n      if (e.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          e.preventDefault();\n          lastFocusable?.focus();\n        }\n      } else {\n        if (document.activeElement === lastFocusable) {\n          e.preventDefault();\n          firstFocusable?.focus();\n        }\n      }\n    };\n\n    element.addEventListener('keydown', handleKeyDown);\n    firstFocusable?.focus();\n\n    return () => {\n      element.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  // Create skip link\n  const createSkipLink = useCallback((target: string, label = 'Hopp til hovedinnhold') => {\n    const link = document.createElement('a');\n    link.href = `#${target}`;\n    link.className = 'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-primary focus:text-primary-foreground focus:rounded-md focus:shadow-lg';\n    link.textContent = label;\n    \n    document.body.insertBefore(link, document.body.firstChild);\n  }, []);\n\n  // Check color contrast ratio (WCAG formula)\n  const checkContrast = useCallback((foreground: string, background: string): number => {\n    const getLuminance = (color: string): number => {\n      const rgb = color.match(/\\d+/g);\n      if (!rgb || rgb.length < 3) return 0;\n      \n      const [r, g, b] = rgb.map(c => {\n        const val = parseInt(c) / 255;\n        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n      });\n      \n      return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    };\n\n    const l1 = getLuminance(foreground);\n    const l2 = getLuminance(background);\n    const lighter = Math.max(l1, l2);\n    const darker = Math.min(l1, l2);\n    \n    return (lighter + 0.05) / (darker + 0.05);\n  }, []);\n\n  // Norwegian number formatting\n  const formatNumber = useCallback((num: number, options?: Intl.NumberFormatOptions): string => {\n    return new Intl.NumberFormat(language, options).format(num);\n  }, [language]);\n\n  // Norwegian date formatting\n  const formatDate = useCallback((date: Date, options?: Intl.DateTimeFormatOptions): string => {\n    return new Intl.DateTimeFormat(language, options).format(date);\n  }, [language]);\n\n  // Get ARIA label with parameter substitution\n  const getAriaLabel = useCallback((key: string, params?: Record<string, string>): string => {\n    let label = norwegianAriaLabels[key] || key;\n    \n    if (params) {\n      Object.entries(params).forEach(([param, value]) => {\n        label = label.replace(`{${param}}`, value);\n      });\n    }\n    \n    return label;\n  }, []);\n\n  const helpers: AccessibilityHelpers = {\n    announce,\n    setTitle,\n    trapFocus,\n    createSkipLink,\n    checkContrast,\n    formatNumber,\n    formatDate,\n    getAriaLabel\n  };\n\n  return [state, helpers];\n};\n\n// Export types and labels\nexport { norwegianAriaLabels };\nexport type { AccessibilityState, AccessibilityHelpers };"
    }
  ]
}