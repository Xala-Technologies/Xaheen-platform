{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "select",
  "type": "registry:component",
  "title": "Select",
  "description": "Dropdown selection input",
  "category": "components",
  "categories": [
    "components",
    "form",
    "input"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-select"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/select/select.tsx",
      "type": "registry:component",
      "content": "/**\n * Select Component - Dropdown Selection Inputs\n * CLAUDE.md Compliant: Professional sizing (minimum h-14 equivalent)\n * WCAG AAA: Full keyboard navigation, ARIA support, and screen reader compatibility\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDownIcon, ChevronUpIcon, CheckIcon, XMarkIcon, MagnifyingGlassIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst selectTriggerVariants = cva(\n  [\n    'flex w-full items-center justify-between rounded-lg border-2 border-input bg-background px-4 py-3',\n    'text-base text-foreground placeholder:text-muted-foreground',\n    'transition-all duration-200 ease-in-out',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20 focus:border-primary',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'hover:border-primary/50',\n    // Professional minimum height (CLAUDE.md compliant)\n    'min-h-[3.5rem]'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'h-10 px-3 py-2 text-sm min-h-[2.5rem]',\n        md: 'h-12 px-4 py-3 text-base min-h-[3rem]',\n        lg: 'h-14 px-5 py-4 text-lg min-h-[3.5rem]', // CLAUDE.md preferred\n        xl: 'h-16 px-6 py-5 text-xl min-h-[4rem]'\n      },\n      variant: {\n        default: 'border-input',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n        // NSM Security Classification variants\n        nsmOpen: 'border-l-4 border-l-green-600 border-input shadow-sm',\n        nsmRestricted: 'border-l-4 border-l-yellow-600 border-input shadow-sm',\n        nsmConfidential: 'border-l-4 border-l-red-600 border-input shadow-sm',\n        nsmSecret: 'border-l-4 border-l-gray-800 border-input shadow-sm'\n      },\n      multiple: {\n        true: 'min-h-[3.5rem] py-2',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      size: 'lg',\n      variant: 'default',\n      multiple: false\n    }\n  }\n);\n\nconst selectContentVariants = cva(\n  [\n    'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-lg border bg-popover text-popover-foreground shadow-lg',\n    'data-[state=open]:animate-in data-[state=closed]:animate-out',\n    'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n    'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95',\n    'data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2',\n    'data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg',\n        xl: 'text-xl'\n      }\n    },\n    defaultVariants: {\n      size: 'lg'\n    }\n  }\n);\n\nconst selectItemVariants = cva(\n  [\n    'relative flex w-full cursor-pointer select-none items-center rounded-md py-2 pl-8 pr-2 text-sm',\n    'outline-none transition-all duration-150',\n    'focus:bg-accent focus:text-accent-foreground',\n    'data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n    'data-[selected]:bg-primary/10 data-[selected]:font-medium',\n    // Professional minimum height\n    'min-h-[2.5rem]'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'py-1.5 pl-6 pr-2 text-sm min-h-[2rem]',\n        md: 'py-2 pl-8 pr-2 text-base min-h-[2.5rem]',\n        lg: 'py-2.5 pl-10 pr-3 text-lg min-h-[3rem]',\n        xl: 'py-3 pl-12 pr-4 text-xl min-h-[3.5rem]'\n      }\n    },\n    defaultVariants: {\n      size: 'lg'\n    }\n  }\n);\n\n// Types\nexport interface SelectOption {\n  readonly value: string;\n  readonly label: string;\n  readonly disabled?: boolean;\n  readonly description?: string;\n  readonly icon?: React.ReactNode;\n  readonly group?: string;\n}\n\nexport interface SelectProps extends \n  Omit<React.HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'>,\n  VariantProps<typeof selectTriggerVariants> {\n  readonly value?: string | string[];\n  readonly defaultValue?: string | string[];\n  readonly onValueChange?: (value: string | string[]) => void;\n  readonly options: SelectOption[];\n  readonly placeholder?: string;\n  readonly disabled?: boolean;\n  readonly required?: boolean;\n  readonly clearable?: boolean;\n  readonly searchable?: boolean;\n  readonly multiple?: boolean;\n  readonly loading?: boolean;\n  readonly error?: boolean;\n  readonly errorMessage?: string;\n  readonly helperText?: string;\n  readonly maxSelection?: number;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly emptyMessage?: string;\n  readonly createable?: boolean;\n  readonly onCreateOption?: (inputValue: string) => void;\n}\n\n// Portal component\nconst Portal: React.FC<{ children: React.ReactNode; container?: HTMLElement }> = ({ \n  children, \n  container \n}) => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  const target = container || document.body;\n  return target ? React.createPortal(children, target) : null;\n};\n\n// Main Select Component\nexport const Select = React.forwardRef<HTMLDivElement, SelectProps>(\n  ({ \n    className, \n    size = 'lg',\n    variant = 'default',\n    multiple = false,\n    value: controlledValue,\n    defaultValue,\n    onValueChange,\n    options = [],\n    placeholder = 'Velg...',\n    disabled = false,\n    required = false,\n    clearable = false,\n    searchable = false,\n    loading = false,\n    error = false,\n    errorMessage,\n    helperText,\n    maxSelection,\n    nsmClassification,\n    emptyMessage = 'Ingen alternativer funnet',\n    createable = false,\n    onCreateOption,\n    ...props \n  }, ref) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [searchTerm, setSearchTerm] = React.useState('');\n    const [focusedIndex, setFocusedIndex] = React.useState(-1);\n    \n    const triggerRef = React.useRef<HTMLButtonElement>(null);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const searchRef = React.useRef<HTMLInputElement>(null);\n    \n    // Handle controlled/uncontrolled value\n    const [uncontrolledValue, setUncontrolledValue] = React.useState(\n      defaultValue || (multiple ? [] : '')\n    );\n    \n    const isControlled = controlledValue !== undefined;\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    \n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : error ? 'error' : variant;\n\n    // Filter options based on search term\n    const filteredOptions = React.useMemo(() => {\n      if (!searchTerm) return options;\n      return options.filter(option => \n        option.label.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        option.value.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }, [options, searchTerm]);\n\n    // Group filtered options\n    const groupedOptions = React.useMemo(() => {\n      const groups: Record<string, SelectOption[]> = {};\n      const ungrouped: SelectOption[] = [];\n      \n      filteredOptions.forEach(option => {\n        if (option.group) {\n          if (!groups[option.group]) groups[option.group] = [];\n          groups[option.group].push(option);\n        } else {\n          ungrouped.push(option);\n        }\n      });\n      \n      return { groups, ungrouped };\n    }, [filteredOptions]);\n\n    // Get selected options\n    const selectedOptions = React.useMemo(() => {\n      if (multiple && Array.isArray(value)) {\n        return options.filter(option => value.includes(option.value));\n      } else if (!multiple && typeof value === 'string') {\n        return options.filter(option => option.value === value);\n      }\n      return [];\n    }, [options, value, multiple]);\n\n    // Handle value change\n    const handleValueChange = React.useCallback((newValue: string | string[]) => {\n      if (!isControlled) {\n        setUncontrolledValue(newValue);\n      }\n      onValueChange?.(newValue);\n    }, [isControlled, onValueChange]);\n\n    // Handle option selection\n    const handleOptionSelect = React.useCallback((optionValue: string) => {\n      if (multiple && Array.isArray(value)) {\n        const currentValues = value as string[];\n        const newValues = currentValues.includes(optionValue)\n          ? currentValues.filter(v => v !== optionValue)\n          : [...currentValues, optionValue];\n        \n        // Check max selection limit\n        if (maxSelection && newValues.length > maxSelection && !currentValues.includes(optionValue)) {\n          return;\n        }\n        \n        handleValueChange(newValues);\n      } else {\n        handleValueChange(optionValue);\n        setIsOpen(false);\n        setSearchTerm('');\n      }\n    }, [multiple, value, maxSelection, handleValueChange]);\n\n    // Handle clear selection\n    const handleClear = React.useCallback((event: React.MouseEvent) => {\n      event.stopPropagation();\n      handleValueChange(multiple ? [] : '');\n    }, [multiple, handleValueChange]);\n\n    // Handle keyboard navigation\n    const handleKeyDown = React.useCallback((event: React.KeyboardEvent) => {\n      if (disabled) return;\n\n      switch (event.key) {\n        case 'Enter':\n          event.preventDefault();\n          if (!isOpen) {\n            setIsOpen(true);\n          } else if (focusedIndex >= 0 && focusedIndex < filteredOptions.length) {\n            handleOptionSelect(filteredOptions[focusedIndex].value);\n          }\n          break;\n        case 'Escape':\n          event.preventDefault();\n          setIsOpen(false);\n          setSearchTerm('');\n          triggerRef.current?.focus();\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          if (!isOpen) {\n            setIsOpen(true);\n          } else {\n            setFocusedIndex(prev => Math.min(prev + 1, filteredOptions.length - 1));\n          }\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          if (isOpen) {\n            setFocusedIndex(prev => Math.max(prev - 1, -1));\n          }\n          break;\n        case ' ':\n          if (!searchable) {\n            event.preventDefault();\n            setIsOpen(!isOpen);\n          }\n          break;\n      }\n    }, [disabled, isOpen, focusedIndex, filteredOptions, handleOptionSelect, searchable]);\n\n    // Handle outside click\n    React.useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (\n          contentRef.current && \n          !contentRef.current.contains(event.target as Node) &&\n          triggerRef.current &&\n          !triggerRef.current.contains(event.target as Node)\n        ) {\n          setIsOpen(false);\n          setSearchTerm('');\n        }\n      };\n\n      if (isOpen) {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n      }\n    }, [isOpen]);\n\n    // Focus search input when opened\n    React.useEffect(() => {\n      if (isOpen && searchable && searchRef.current) {\n        searchRef.current.focus();\n      }\n    }, [isOpen, searchable]);\n\n    // Create option handler\n    const handleCreateOption = React.useCallback(() => {\n      if (createable && searchTerm && onCreateOption) {\n        onCreateOption(searchTerm);\n        setSearchTerm('');\n        setIsOpen(false);\n      }\n    }, [createable, searchTerm, onCreateOption]);\n\n    // Generate unique ID for accessibility\n    const selectId = React.useId();\n    const contentId = `${selectId}-content`;\n    const helperId = helperText || errorMessage ? `${selectId}-helper` : undefined;\n\n    return (\n      <div ref={ref} className={cn('relative w-full', className)} {...props}>\n        {/* Select Trigger */}\n        <button\n          ref={triggerRef}\n          type=\"button\"\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-controls={contentId}\n          aria-describedby={helperId}\n          aria-invalid={error}\n          aria-required={required}\n          disabled={disabled}\n          className={cn(\n            selectTriggerVariants({ size, variant: finalVariant, multiple }),\n            className\n          )}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n        >\n          <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n            {/* Selected Values Display */}\n            {multiple && selectedOptions.length > 0 ? (\n              <div className=\"flex flex-wrap gap-1\">\n                {selectedOptions.map((option) => (\n                  <span\n                    key={option.value}\n                    className=\"inline-flex items-center gap-1 px-2 py-1 rounded-md bg-primary/10 text-primary text-sm\"\n                  >\n                    {option.label}\n                    <button\n                      type=\"button\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleOptionSelect(option.value);\n                      }}\n                      className=\"hover:bg-primary/20 rounded p-0.5\"\n                    >\n                      <XMarkIcon className=\"h-3 w-3\" />\n                    </button>\n                  </span>\n                ))}\n              </div>\n            ) : (\n              <span className={cn(\n                'truncate',\n                !selectedOptions.length && 'text-muted-foreground'\n              )}>\n                {selectedOptions.length > 0 ? selectedOptions[0].label : placeholder}\n              </span>\n            )}\n          </div>\n\n          {/* Action Icons */}\n          <div className=\"flex items-center gap-1\">\n            {/* Loading Spinner */}\n            {loading && (\n              <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n            )}\n            \n            {/* Clear Button */}\n            {clearable && selectedOptions.length > 0 && !disabled && (\n              <button\n                type=\"button\"\n                onClick={handleClear}\n                className=\"p-0.5 hover:bg-accent rounded\"\n              >\n                <XMarkIcon className=\"h-4 w-4\" />\n              </button>\n            )}\n            \n            {/* Dropdown Icon */}\n            {!loading && (\n              <div className=\"p-0.5\">\n                {isOpen ? (\n                  <ChevronUpIcon className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronDownIcon className=\"h-4 w-4\" />\n                )}\n              </div>\n            )}\n          </div>\n        </button>\n\n        {/* Dropdown Content */}\n        {isOpen && (\n          <Portal>\n            <div\n              ref={contentRef}\n              id={contentId}\n              role=\"listbox\"\n              aria-multiselectable={multiple}\n              className={cn(\n                selectContentVariants({ size }),\n                'absolute top-full left-0 right-0 mt-1 z-50'\n              )}\n              style={{\n                minWidth: triggerRef.current?.getBoundingClientRect().width\n              }}\n            >\n              {/* Search Input */}\n              {searchable && (\n                <div className=\"flex items-center border-b px-3 pb-2\">\n                  <MagnifyingGlassIcon className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                  <input\n                    ref={searchRef}\n                    type=\"text\"\n                    placeholder=\"Søk...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"flex-1 outline-none bg-transparent text-sm\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && createable && searchTerm) {\n                        e.preventDefault();\n                        handleCreateOption();\n                      }\n                    }}\n                  />\n                </div>\n              )}\n\n              {/* Options List */}\n              <div className=\"max-h-80 overflow-y-auto py-1\">\n                {/* Ungrouped Options */}\n                {groupedOptions.ungrouped.map((option, index) => (\n                  <SelectOption\n                    key={option.value}\n                    option={option}\n                    size={size}\n                    selected={multiple \n                      ? Array.isArray(value) && value.includes(option.value)\n                      : value === option.value\n                    }\n                    focused={index === focusedIndex}\n                    onSelect={() => handleOptionSelect(option.value)}\n                  />\n                ))}\n\n                {/* Grouped Options */}\n                {Object.entries(groupedOptions.groups).map(([groupName, groupOptions]) => (\n                  <div key={groupName}>\n                    <div className=\"px-3 py-2 text-xs font-semibold text-muted-foreground border-t\">\n                      {groupName}\n                    </div>\n                    {groupOptions.map((option, index) => (\n                      <SelectOption\n                        key={option.value}\n                        option={option}\n                        size={size}\n                        selected={multiple \n                          ? Array.isArray(value) && value.includes(option.value)\n                          : value === option.value\n                        }\n                        focused={groupedOptions.ungrouped.length + index === focusedIndex}\n                        onSelect={() => handleOptionSelect(option.value)}\n                      />\n                    ))}\n                  </div>\n                ))}\n\n                {/* Create Option */}\n                {createable && searchTerm && !filteredOptions.some(o => o.label.toLowerCase() === searchTerm.toLowerCase()) && (\n                  <button\n                    type=\"button\"\n                    onClick={handleCreateOption}\n                    className={cn(\n                      selectItemVariants({ size }),\n                      'w-full text-left border-t'\n                    )}\n                  >\n                    Opprett \"{searchTerm}\"\n                  </button>\n                )}\n\n                {/* Empty State */}\n                {filteredOptions.length === 0 && (\n                  <div className=\"px-3 py-2 text-center text-muted-foreground text-sm\">\n                    {emptyMessage}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Portal>\n        )}\n\n        {/* Helper Text */}\n        {(helperText || errorMessage) && (\n          <p \n            id={helperId}\n            className={cn(\n              'mt-2 text-sm',\n              error ? 'text-destructive' : 'text-muted-foreground'\n            )}\n            role={error ? 'alert' : undefined}\n          >\n            {errorMessage || helperText}\n          </p>\n        )}\n\n        {/* NSM Classification for screen readers */}\n        {nsmClassification && (\n          <span className=\"sr-only\">\n            Select NSM-klassifisering: {nsmClassification}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nSelect.displayName = 'Select';\n\n// Select Option Component\nexport interface SelectOptionProps {\n  option: SelectOption;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  selected: boolean;\n  focused: boolean;\n  onSelect: () => void;\n}\n\nconst SelectOption: React.FC<SelectOptionProps> = ({\n  option,\n  size = 'lg',\n  selected,\n  focused,\n  onSelect\n}) => {\n  return (\n    <button\n      type=\"button\"\n      role=\"option\"\n      aria-selected={selected}\n      disabled={option.disabled}\n      className={cn(\n        selectItemVariants({ size }),\n        focused && 'bg-accent text-accent-foreground',\n        selected && 'bg-primary/10 font-medium'\n      )}\n      onClick={onSelect}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        {selected && <CheckIcon className=\"h-4 w-4\" />}\n      </span>\n      \n      <div className=\"flex items-center gap-2\">\n        {option.icon && (\n          <span className=\"flex-shrink-0\">\n            {option.icon}\n          </span>\n        )}\n        \n        <div className=\"flex flex-col items-start\">\n          <span className=\"truncate\">{option.label}</span>\n          {option.description && (\n            <span className=\"text-xs text-muted-foreground truncate\">\n              {option.description}\n            </span>\n          )}\n        </div>\n      </div>\n    </button>\n  );\n};\n\n// Export variants and types\nexport { selectTriggerVariants, selectContentVariants, selectItemVariants };\nexport type { VariantProps, SelectOption };"
    }
  ]
}