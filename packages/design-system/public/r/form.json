{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "form",
  "type": "registry:component",
  "title": "Form",
  "description": "Form components with validation",
  "category": "components",
  "categories": [
    "components",
    "form"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "react-hook-form"
  ],
  "registryDependencies": [
    "utils",
    "label"
  ],
  "files": [
    {
      "path": "components/form/form.tsx",
      "type": "registry:component",
      "content": "/**\n * Form Component - Form Container with Validation\n * CLAUDE.md Compliant: Professional form styling and validation\n * WCAG AAA: Proper form labeling, error handling, and accessibility support\n * CVA: Class Variance Authority for consistent styling\n * Universal Tokens: Uses design system tokens for consistency\n * Norwegian locale support with proper formatting and validation\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ExclamationTriangleIcon, CheckCircleIcon } from '@heroicons/react/24/outline';\nimport { cn } from '../../lib/utils';\n\nconst formVariants = cva(\n  [\n    'space-y-6'\n  ],\n  {\n    variants: {\n      layout: {\n        vertical: 'space-y-6',\n        horizontal: 'space-y-4',\n        inline: 'flex flex-wrap gap-4',\n        grid: 'grid gap-4'\n      },\n      size: {\n        sm: 'text-sm space-y-4',\n        md: 'text-base space-y-6',\n        lg: 'text-lg space-y-8'\n      },\n      variant: {\n        default: '',\n        card: 'p-6 border border-border rounded-lg bg-card',\n        elevated: 'p-8 border border-border rounded-xl bg-card shadow-lg',\n        // NSM Security Classification variants\n        nsmOpen: 'p-6 border-l-4 border-l-green-600 border border-border rounded-lg bg-card',\n        nsmRestricted: 'p-6 border-l-4 border-l-yellow-600 border border-border rounded-lg bg-card',\n        nsmConfidential: 'p-6 border-l-4 border-l-red-600 border border-border rounded-lg bg-card',\n        nsmSecret: 'p-8 border-l-4 border-l-gray-800 border border-border rounded-xl bg-card shadow-lg'\n      }\n    },\n    defaultVariants: {\n      layout: 'vertical',\n      size: 'md',\n      variant: 'default'\n    }\n  }\n);\n\nconst formFieldVariants = cva(\n  [\n    'space-y-2'\n  ],\n  {\n    variants: {\n      layout: {\n        vertical: 'space-y-2',\n        horizontal: 'flex items-center gap-4',\n        inline: 'flex items-center gap-2'\n      }\n    },\n    defaultVariants: {\n      layout: 'vertical'\n    }\n  }\n);\n\nconst formLabelVariants = cva(\n  [\n    'text-sm font-medium leading-none',\n    'peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\n  ],\n  {\n    variants: {\n      required: {\n        true: 'after:content-[\"*\"] after:ml-1 after:text-destructive',\n        false: ''\n      },\n      size: {\n        sm: 'text-sm',\n        md: 'text-base', \n        lg: 'text-lg'\n      }\n    },\n    defaultVariants: {\n      required: false,\n      size: 'md'\n    }\n  }\n);\n\nconst formDescriptionVariants = cva(\n  [\n    'text-sm text-muted-foreground'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'text-xs',\n        md: 'text-sm',\n        lg: 'text-base'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\nconst formMessageVariants = cva(\n  [\n    'text-sm font-medium flex items-center gap-1.5'\n  ],\n  {\n    variants: {\n      type: {\n        error: 'text-destructive',\n        success: 'text-green-600 dark:text-green-400',\n        warning: 'text-yellow-600 dark:text-yellow-400',\n        info: 'text-blue-600 dark:text-blue-400'\n      },\n      size: {\n        sm: 'text-xs',\n        md: 'text-sm',\n        lg: 'text-base'\n      }\n    },\n    defaultVariants: {\n      type: 'error',\n      size: 'md'\n    }\n  }\n);\n\n// Types\nexport interface FormProps extends \n  React.FormHTMLAttributes<HTMLFormElement>,\n  VariantProps<typeof formVariants> {\n  readonly onSubmit?: (event: React.FormEvent<HTMLFormElement>) => void;\n  readonly onReset?: (event: React.FormEvent<HTMLFormElement>) => void;\n  readonly loading?: boolean;\n  readonly disabled?: boolean;\n  readonly errors?: Record<string, string>;\n  readonly nsmClassification?: 'OPEN' | 'RESTRICTED' | 'CONFIDENTIAL' | 'SECRET';\n  readonly norwegianValidation?: boolean;\n}\n\nexport interface FormFieldProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof formFieldVariants> {\n  readonly name?: string;\n  readonly error?: string;\n  readonly success?: string;\n  readonly warning?: string;\n  readonly info?: string;\n}\n\nexport interface FormLabelProps extends \n  React.LabelHTMLAttributes<HTMLLabelElement>,\n  VariantProps<typeof formLabelVariants> {\n  readonly htmlFor: string;\n}\n\nexport interface FormDescriptionProps extends \n  React.HTMLAttributes<HTMLParagraphElement>,\n  VariantProps<typeof formDescriptionVariants> {}\n\nexport interface FormMessageProps extends \n  React.HTMLAttributes<HTMLParagraphElement>,\n  VariantProps<typeof formMessageVariants> {\n  readonly children: React.ReactNode;\n}\n\nexport interface FormControlProps extends React.HTMLAttributes<HTMLDivElement> {\n  readonly name?: string;\n  readonly required?: boolean;\n  readonly disabled?: boolean;\n  readonly error?: string;\n}\n\n// Context for form state management\ninterface FormContextType {\n  layout?: 'vertical' | 'horizontal' | 'inline' | 'grid';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  disabled?: boolean;\n  errors?: Record<string, string>;\n  norwegianValidation?: boolean;\n}\n\nconst FormContext = React.createContext<FormContextType>({});\n\nexport function useFormContext(): FormContextType {\n  return React.useContext(FormContext);\n}\n\n// Norwegian validation patterns\nconst norwegianValidationPatterns = {\n  phone: {\n    pattern: /^(\\+47)?[\\s]?[2-9]\\d{7}$/,\n    message: 'Vennligst oppgi et gyldig norsk telefonnummer'\n  },\n  postalCode: {\n    pattern: /^\\d{4}$/,\n    message: 'Postnummeret må være 4 siffer'\n  },\n  organizationNumber: {\n    pattern: /^\\d{9}$/,\n    message: 'Organisasjonsnummeret må være 9 siffer'\n  },\n  nationalId: {\n    pattern: /^\\d{11}$/,\n    message: 'Personnummeret må være 11 siffer'\n  },\n  bankAccount: {\n    pattern: /^\\d{4}[\\s.]?\\d{2}[\\s.]?\\d{5}$/,\n    message: 'Vennligst oppgi et gyldig norsk kontonummer'\n  }\n};\n\n// Main Form Component\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  ({ \n    className, \n    layout = 'vertical',\n    size = 'md',\n    variant = 'default',\n    loading = false,\n    disabled = false,\n    errors = {},\n    nsmClassification,\n    norwegianValidation = false,\n    onSubmit,\n    onReset,\n    children,\n    ...props \n  }, ref) => {\n    // Auto-select NSM variant if classification is provided\n    const finalVariant = nsmClassification \n      ? `nsm${nsmClassification.charAt(0).toUpperCase() + nsmClassification.slice(1).toLowerCase()}` as 'nsmOpen' | 'nsmRestricted' | 'nsmConfidential' | 'nsmSecret'\n      : variant;\n\n    const contextValue: FormContextType = {\n      layout,\n      size,\n      loading,\n      disabled,\n      errors,\n      norwegianValidation\n    };\n\n    const handleSubmit = React.useCallback((event: React.FormEvent<HTMLFormElement>) => {\n      if (loading || disabled) {\n        event.preventDefault();\n        return;\n      }\n      onSubmit?.(event);\n    }, [loading, disabled, onSubmit]);\n\n    const handleReset = React.useCallback((event: React.FormEvent<HTMLFormElement>) => {\n      onReset?.(event);\n    }, [onReset]);\n\n    return (\n      <FormContext.Provider value={contextValue}>\n        <form\n          ref={ref}\n          className={cn(\n            formVariants({ layout, size, variant: finalVariant }),\n            loading && 'opacity-70 pointer-events-none',\n            className\n          )}\n          onSubmit={handleSubmit}\n          onReset={handleReset}\n          noValidate={norwegianValidation}\n          data-loading={loading || undefined}\n          {...props}\n        >\n          {children}\n\n          {/* NSM Classification for screen readers */}\n          {nsmClassification && (\n            <span className=\"sr-only\">\n              Skjema NSM-klassifisering: {nsmClassification}\n            </span>\n          )}\n        </form>\n      </FormContext.Provider>\n    );\n  }\n);\n\nForm.displayName = 'Form';\n\n// Form Field Component\nexport const FormField = React.forwardRef<HTMLDivElement, FormFieldProps>(\n  ({ \n    className, \n    layout: fieldLayout,\n    name,\n    error: fieldError,\n    success,\n    warning,\n    info,\n    children,\n    ...props \n  }, ref) => {\n    const { layout: formLayout, errors } = useFormContext();\n    const finalLayout = fieldLayout || formLayout || 'vertical';\n    const error = fieldError || (name && errors?.[name]);\n\n    const fieldId = React.useId();\n    const errorId = error ? `${fieldId}-error` : undefined;\n    const descriptionId = `${fieldId}-description`;\n\n    // Enhanced children with IDs for accessibility\n    const enhancedChildren = React.Children.map(children, (child) => {\n      if (React.isValidElement(child)) {\n        // Clone with appropriate props based on component type\n        const childProps: any = {\n          ...child.props,\n        };\n\n        // Add error state to form controls\n        if (error) {\n          childProps.error = true;\n          childProps['aria-invalid'] = true;\n        }\n\n        // Add describedby for accessibility\n        const existingDescribedBy = child.props['aria-describedby'];\n        const newDescribedBy = [existingDescribedBy, errorId].filter(Boolean).join(' ');\n        if (newDescribedBy) {\n          childProps['aria-describedby'] = newDescribedBy;\n        }\n\n        return React.cloneElement(child, childProps);\n      }\n      return child;\n    });\n\n    return (\n      <div\n        ref={ref}\n        className={cn(formFieldVariants({ layout: finalLayout }), className)}\n        {...props}\n      >\n        {enhancedChildren}\n        \n        {/* Error Message */}\n        {error && (\n          <FormMessage id={errorId} type=\"error\">\n            {error}\n          </FormMessage>\n        )}\n        \n        {/* Success Message */}\n        {success && !error && (\n          <FormMessage type=\"success\">\n            {success}\n          </FormMessage>\n        )}\n        \n        {/* Warning Message */}\n        {warning && !error && !success && (\n          <FormMessage type=\"warning\">\n            {warning}\n          </FormMessage>\n        )}\n        \n        {/* Info Message */}\n        {info && !error && !success && !warning && (\n          <FormMessage type=\"info\">\n            {info}\n          </FormMessage>\n        )}\n      </div>\n    );\n  }\n);\n\nFormField.displayName = 'FormField';\n\n// Form Label Component\nexport const FormLabel = React.forwardRef<HTMLLabelElement, FormLabelProps>(\n  ({ \n    className, \n    required = false,\n    size,\n    children,\n    ...props \n  }, ref) => {\n    const { size: formSize } = useFormContext();\n    const finalSize = size || formSize || 'md';\n\n    return (\n      <label\n        ref={ref}\n        className={cn(formLabelVariants({ required, size: finalSize }), className)}\n        {...props}\n      >\n        {children}\n      </label>\n    );\n  }\n);\n\nFormLabel.displayName = 'FormLabel';\n\n// Form Description Component\nexport const FormDescription = React.forwardRef<HTMLParagraphElement, FormDescriptionProps>(\n  ({ \n    className, \n    size,\n    ...props \n  }, ref) => {\n    const { size: formSize } = useFormContext();\n    const finalSize = size || formSize || 'md';\n\n    return (\n      <p\n        ref={ref}\n        className={cn(formDescriptionVariants({ size: finalSize }), className)}\n        {...props}\n      />\n    );\n  }\n);\n\nFormDescription.displayName = 'FormDescription';\n\n// Form Message Component\nexport const FormMessage = React.forwardRef<HTMLParagraphElement, FormMessageProps>(\n  ({ \n    className, \n    type = 'error',\n    size,\n    children,\n    ...props \n  }, ref) => {\n    const { size: formSize } = useFormContext();\n    const finalSize = size || formSize || 'md';\n\n    const getIcon = () => {\n      switch (type) {\n        case 'error':\n          return <ExclamationTriangleIcon className=\"h-4 w-4 flex-shrink-0\" />;\n        case 'success':\n          return <CheckCircleIcon className=\"h-4 w-4 flex-shrink-0\" />;\n        default:\n          return null;\n      }\n    };\n\n    return (\n      <p\n        ref={ref}\n        role={type === 'error' ? 'alert' : 'status'}\n        aria-live=\"polite\"\n        className={cn(formMessageVariants({ type, size: finalSize }), className)}\n        {...props}\n      >\n        {getIcon()}\n        <span>{children}</span>\n      </p>\n    );\n  }\n);\n\nFormMessage.displayName = 'FormMessage';\n\n// Form Control Component - Wrapper for form inputs\nexport const FormControl = React.forwardRef<HTMLDivElement, FormControlProps>(\n  ({ \n    className, \n    name,\n    required = false,\n    disabled = false,\n    error,\n    children,\n    ...props \n  }, ref) => {\n    const { disabled: formDisabled, errors } = useFormContext();\n    const isDisabled = disabled || formDisabled;\n    const fieldError = error || (name && errors?.[name]);\n\n    return (\n      <div\n        ref={ref}\n        className={cn('relative', className)}\n        data-disabled={isDisabled || undefined}\n        data-error={fieldError ? true : undefined}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nFormControl.displayName = 'FormControl';\n\n// Form Group Component - Groups related form fields\nexport interface FormGroupProps extends React.HTMLAttributes<HTMLFieldSetElement> {\n  readonly legend?: string;\n  readonly description?: string;\n  readonly required?: boolean;\n  readonly disabled?: boolean;\n}\n\nexport const FormGroup = React.forwardRef<HTMLFieldSetElement, FormGroupProps>(\n  ({ \n    className, \n    legend,\n    description,\n    required = false,\n    disabled = false,\n    children,\n    ...props \n  }, ref) => {\n    const { disabled: formDisabled } = useFormContext();\n    const isDisabled = disabled || formDisabled;\n\n    const groupId = React.useId();\n    const descriptionId = description ? `${groupId}-description` : undefined;\n\n    return (\n      <fieldset\n        ref={ref}\n        disabled={isDisabled}\n        aria-describedby={descriptionId}\n        className={cn(\n          'border border-border rounded-lg p-4 space-y-4',\n          isDisabled && 'opacity-50',\n          className\n        )}\n        {...props}\n      >\n        {legend && (\n          <legend className={cn(\n            'text-sm font-medium px-2 -ml-2',\n            required && 'after:content-[\"*\"] after:ml-1 after:text-destructive'\n          )}>\n            {legend}\n          </legend>\n        )}\n        \n        {description && (\n          <FormDescription id={descriptionId}>\n            {description}\n          </FormDescription>\n        )}\n        \n        {children}\n      </fieldset>\n    );\n  }\n);\n\nFormGroup.displayName = 'FormGroup';\n\n// Form Section Component - Logical sections within a form\nexport interface FormSectionProps extends React.HTMLAttributes<HTMLDivElement> {\n  readonly title?: string;\n  readonly description?: string;\n}\n\nexport const FormSection = React.forwardRef<HTMLDivElement, FormSectionProps>(\n  ({ \n    className, \n    title,\n    description,\n    children,\n    ...props \n  }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn('space-y-4', className)}\n        {...props}\n      >\n        {(title || description) && (\n          <div className=\"space-y-1\">\n            {title && (\n              <h3 className=\"text-lg font-semibold leading-none tracking-tight\">\n                {title}\n              </h3>\n            )}\n            {description && (\n              <FormDescription>\n                {description}\n              </FormDescription>\n            )}\n          </div>\n        )}\n        \n        {children}\n      </div>\n    );\n  }\n);\n\nFormSection.displayName = 'FormSection';\n\n// Norwegian Validation Hook\nexport function useNorwegianValidation() {\n  return React.useCallback((field: keyof typeof norwegianValidationPatterns, value: string): string | null => {\n    const validation = norwegianValidationPatterns[field];\n    if (!validation) return null;\n    \n    return validation.pattern.test(value) ? null : validation.message;\n  }, []);\n}\n\n// Export variants and types\nexport { \n  formVariants, \n  formFieldVariants, \n  formLabelVariants, \n  formDescriptionVariants,\n  formMessageVariants,\n  norwegianValidationPatterns \n};\nexport type { VariantProps };"
    }
  ]
}