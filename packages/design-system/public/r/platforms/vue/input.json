{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "input",
  "type": "registry:component",
  "title": "Input",
  "description": "Norwegian-optimized input component",
  "category": "components",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "platforms/vue/Input.vue",
      "type": "registry:component",
      "content": "<template>\n  <div :class=\"cn('relative', fullWidth && 'w-full')\" v-if=\"leadingIcon || trailingIcon || helperText\">\n    <div \n      v-if=\"leadingIcon\" \n      class=\"absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" \n      aria-hidden=\"true\"\n    >\n      <slot name=\"leading-icon\" />\n    </div>\n    \n    <input\n      :type=\"type\"\n      :class=\"cn(\n        inputVariants({ variant: stateVariant, size, fullWidth }),\n        leadingIcon && 'pl-12',\n        trailingIcon && 'pr-12',\n        className\n      )\"\n      :disabled=\"disabled\"\n      :aria-invalid=\"error ? 'true' : undefined\"\n      :aria-describedby=\"combinedAriaDescribedBy\"\n      v-bind=\"$attrs\"\n      v-model=\"modelValue\"\n      @input=\"$emit('update:modelValue', ($event.target as HTMLInputElement).value)\"\n    />\n    \n    <div \n      v-if=\"trailingIcon\" \n      class=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" \n      aria-hidden=\"true\"\n    >\n      <slot name=\"trailing-icon\" />\n    </div>\n    \n    <p \n      v-if=\"helperText\"\n      :id=\"helperTextId\"\n      :class=\"cn(\n        'mt-2 text-sm',\n        error && 'text-destructive',\n        success && 'text-green-600',\n        warning && 'text-yellow-600',\n        !error && !success && !warning && 'text-muted-foreground'\n      )\"\n    >\n      {{ helperText }}\n    </p>\n  </div>\n  \n  <input\n    v-else\n    :type=\"type\"\n    :class=\"cn(\n      inputVariants({ variant: stateVariant, size, fullWidth }),\n      className\n    )\"\n    :disabled=\"disabled\"\n    :aria-invalid=\"error ? 'true' : undefined\"\n    :aria-describedby=\"combinedAriaDescribedBy\"\n    v-bind=\"$attrs\"\n    v-model=\"modelValue\"\n    @input=\"$emit('update:modelValue', ($event.target as HTMLInputElement).value)\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, useId } from 'vue';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst inputVariants = cva(\n  [\n    'flex w-full',\n    'font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background',\n    'border-2 border-input',\n    'transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary',\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    'autofill:bg-background',\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n      },\n      size: {\n        md: 'h-12 px-4 py-3 text-base rounded-lg',\n        lg: 'h-14 px-5 py-4 text-lg rounded-lg',\n        xl: 'h-16 px-6 py-5 text-xl rounded-xl',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: 'w-auto'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'lg',\n      fullWidth: true\n    }\n  }\n);\n\ninterface Props {\n  modelValue?: string | number;\n  type?: string;\n  variant?: 'default' | 'error' | 'success' | 'warning';\n  size?: 'md' | 'lg' | 'xl';\n  fullWidth?: boolean;\n  error?: boolean;\n  success?: boolean;\n  warning?: boolean;\n  helperText?: string;\n  leadingIcon?: boolean;\n  trailingIcon?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  type: 'text',\n  variant: 'default',\n  size: 'lg',\n  fullWidth: true,\n  error: false,\n  success: false,\n  warning: false,\n  disabled: false,\n});\n\ndefineEmits<{\n  'update:modelValue': [value: string | number];\n}>();\n\nconst stateVariant = computed(() => {\n  if (props.error) return 'error';\n  if (props.success) return 'success';\n  if (props.warning) return 'warning';\n  return props.variant;\n});\n\nconst helperId = useId();\nconst helperTextId = computed(() => props.helperText ? `${helperId}-helper` : undefined);\nconst combinedAriaDescribedBy = computed(() => {\n  const parts = [];\n  if (helperTextId.value) parts.push(helperTextId.value);\n  return parts.length > 0 ? parts.join(' ') : undefined;\n});\n</script>"
    }
  ],
  "platformFiles": {
    "react": [
      {
        "path": "platforms/react/input.tsx",
        "type": "registry:component",
        "content": "/**\n * React Platform Input Component\n * Norwegian-optimized text input with full accessibility support\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst inputVariants = cva(\n  [\n    'flex w-full',\n    'font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background',\n    'border-2 border-input',\n    'transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    // Focus styles\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary',\n    // File input styles\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    // Autofill styles\n    'autofill:bg-background',\n    // High contrast mode\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n      },\n      size: {\n        md: 'h-12 px-4 py-3 text-base rounded-lg',\n        lg: 'h-14 px-5 py-4 text-lg rounded-lg',\n        xl: 'h-16 px-6 py-5 text-xl rounded-xl',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: 'w-auto'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'lg',\n      fullWidth: true\n    }\n  }\n);\n\nexport interface ReactInputProps extends \n  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n  VariantProps<typeof inputVariants> {\n  readonly error?: boolean;\n  readonly success?: boolean;\n  readonly warning?: boolean;\n  readonly helperText?: string;\n  readonly leadingIcon?: React.ReactNode;\n  readonly trailingIcon?: React.ReactNode;\n}\n\nexport const Input = React.forwardRef<HTMLInputElement, ReactInputProps>(\n  ({ \n    className, \n    type = 'text',\n    variant,\n    size,\n    fullWidth,\n    error,\n    success,\n    warning,\n    helperText,\n    leadingIcon,\n    trailingIcon,\n    disabled,\n    'aria-describedby': ariaDescribedBy,\n    ...props \n  }, ref) => {\n    const stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n    \n    const helperId = React.useId();\n    const helperTextId = helperText ? `${helperId}-helper` : undefined;\n    const combinedAriaDescribedBy = [ariaDescribedBy, helperTextId].filter(Boolean).join(' ') || undefined;\n    \n    const inputElement = (\n      <input\n        type={type}\n        className={cn(\n          inputVariants({ variant: stateVariant, size, fullWidth }),\n          leadingIcon && 'pl-12',\n          trailingIcon && 'pr-12',\n          className\n        )}\n        ref={ref}\n        disabled={disabled}\n        aria-invalid={error ? 'true' : undefined}\n        aria-describedby={combinedAriaDescribedBy}\n        {...props}\n      />\n    );\n    \n    if (!leadingIcon && !trailingIcon && !helperText) {\n      return inputElement;\n    }\n    \n    return (\n      <div className={cn('relative', fullWidth && 'w-full')}>\n        {leadingIcon && (\n          <div className=\"absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" aria-hidden=\"true\">\n            {leadingIcon}\n          </div>\n        )}\n        \n        {inputElement}\n        \n        {trailingIcon && (\n          <div className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" aria-hidden=\"true\">\n            {trailingIcon}\n          </div>\n        )}\n        \n        {helperText && (\n          <p \n            id={helperTextId}\n            className={cn(\n              'mt-2 text-sm',\n              error && 'text-destructive',\n              success && 'text-green-600',\n              warning && 'text-yellow-600',\n              !error && !success && !warning && 'text-muted-foreground'\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'ReactInput';\n\nexport { inputVariants };"
      }
    ],
    "vue": [
      {
        "path": "platforms/vue/Input.vue",
        "type": "registry:component",
        "content": "<template>\n  <div :class=\"cn('relative', fullWidth && 'w-full')\" v-if=\"leadingIcon || trailingIcon || helperText\">\n    <div \n      v-if=\"leadingIcon\" \n      class=\"absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" \n      aria-hidden=\"true\"\n    >\n      <slot name=\"leading-icon\" />\n    </div>\n    \n    <input\n      :type=\"type\"\n      :class=\"cn(\n        inputVariants({ variant: stateVariant, size, fullWidth }),\n        leadingIcon && 'pl-12',\n        trailingIcon && 'pr-12',\n        className\n      )\"\n      :disabled=\"disabled\"\n      :aria-invalid=\"error ? 'true' : undefined\"\n      :aria-describedby=\"combinedAriaDescribedBy\"\n      v-bind=\"$attrs\"\n      v-model=\"modelValue\"\n      @input=\"$emit('update:modelValue', ($event.target as HTMLInputElement).value)\"\n    />\n    \n    <div \n      v-if=\"trailingIcon\" \n      class=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" \n      aria-hidden=\"true\"\n    >\n      <slot name=\"trailing-icon\" />\n    </div>\n    \n    <p \n      v-if=\"helperText\"\n      :id=\"helperTextId\"\n      :class=\"cn(\n        'mt-2 text-sm',\n        error && 'text-destructive',\n        success && 'text-green-600',\n        warning && 'text-yellow-600',\n        !error && !success && !warning && 'text-muted-foreground'\n      )\"\n    >\n      {{ helperText }}\n    </p>\n  </div>\n  \n  <input\n    v-else\n    :type=\"type\"\n    :class=\"cn(\n      inputVariants({ variant: stateVariant, size, fullWidth }),\n      className\n    )\"\n    :disabled=\"disabled\"\n    :aria-invalid=\"error ? 'true' : undefined\"\n    :aria-describedby=\"combinedAriaDescribedBy\"\n    v-bind=\"$attrs\"\n    v-model=\"modelValue\"\n    @input=\"$emit('update:modelValue', ($event.target as HTMLInputElement).value)\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, useId } from 'vue';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst inputVariants = cva(\n  [\n    'flex w-full',\n    'font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background',\n    'border-2 border-input',\n    'transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary',\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    'autofill:bg-background',\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n      },\n      size: {\n        md: 'h-12 px-4 py-3 text-base rounded-lg',\n        lg: 'h-14 px-5 py-4 text-lg rounded-lg',\n        xl: 'h-16 px-6 py-5 text-xl rounded-xl',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: 'w-auto'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'lg',\n      fullWidth: true\n    }\n  }\n);\n\ninterface Props {\n  modelValue?: string | number;\n  type?: string;\n  variant?: 'default' | 'error' | 'success' | 'warning';\n  size?: 'md' | 'lg' | 'xl';\n  fullWidth?: boolean;\n  error?: boolean;\n  success?: boolean;\n  warning?: boolean;\n  helperText?: string;\n  leadingIcon?: boolean;\n  trailingIcon?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  type: 'text',\n  variant: 'default',\n  size: 'lg',\n  fullWidth: true,\n  error: false,\n  success: false,\n  warning: false,\n  disabled: false,\n});\n\ndefineEmits<{\n  'update:modelValue': [value: string | number];\n}>();\n\nconst stateVariant = computed(() => {\n  if (props.error) return 'error';\n  if (props.success) return 'success';\n  if (props.warning) return 'warning';\n  return props.variant;\n});\n\nconst helperId = useId();\nconst helperTextId = computed(() => props.helperText ? `${helperId}-helper` : undefined);\nconst combinedAriaDescribedBy = computed(() => {\n  const parts = [];\n  if (helperTextId.value) parts.push(helperTextId.value);\n  return parts.length > 0 ? parts.join(' ') : undefined;\n});\n</script>"
      }
    ],
    "angular": [
      {
        "path": "platforms/angular/input.component.ts",
        "type": "registry:component",
        "content": "/**\n * Angular Input Component\n * Norwegian-optimized text input with full accessibility support\n */\n\nimport { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'xaheen-input',\n  template: `\n    <div [class]=\"containerClasses\" *ngIf=\"leadingIcon || trailingIcon || helperText; else simpleInput\">\n      <div \n        *ngIf=\"leadingIcon\"\n        class=\"absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\"\n        aria-hidden=\"true\"\n      >\n        <ng-content select=\"[slot=leading-icon]\"></ng-content>\n      </div>\n      \n      <input\n        [type]=\"type\"\n        [class]=\"inputClasses\"\n        [disabled]=\"disabled\"\n        [attr.aria-invalid]=\"error ? 'true' : null\"\n        [attr.aria-describedby]=\"combinedAriaDescribedBy\"\n        [value]=\"value\"\n        (input)=\"onInput($event)\"\n        (blur)=\"onTouched()\"\n      />\n      \n      <div \n        *ngIf=\"trailingIcon\"\n        class=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\"\n        aria-hidden=\"true\"\n      >\n        <ng-content select=\"[slot=trailing-icon]\"></ng-content>\n      </div>\n      \n      <p \n        *ngIf=\"helperText\"\n        [id]=\"helperTextId\"\n        [class]=\"helperTextClasses\"\n      >\n        {{ helperText }}\n      </p>\n    </div>\n    \n    <ng-template #simpleInput>\n      <input\n        [type]=\"type\"\n        [class]=\"inputClasses\"\n        [disabled]=\"disabled\"\n        [attr.aria-invalid]=\"error ? 'true' : null\"\n        [attr.aria-describedby]=\"combinedAriaDescribedBy\"\n        [value]=\"value\"\n        (input)=\"onInput($event)\"\n        (blur)=\"onTouched()\"\n      />\n    </ng-template>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements ControlValueAccessor {\n  @Input() type: string = 'text';\n  @Input() variant: 'default' | 'error' | 'success' | 'warning' = 'default';\n  @Input() size: 'md' | 'lg' | 'xl' = 'lg';\n  @Input() fullWidth: boolean = true;\n  @Input() error: boolean = false;\n  @Input() success: boolean = false;\n  @Input() warning: boolean = false;\n  @Input() helperText?: string;\n  @Input() leadingIcon: boolean = false;\n  @Input() trailingIcon: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() className?: string;\n\n  @Output() valueChange = new EventEmitter<string>();\n\n  value: string = '';\n  private helperId = `input-${Math.random().toString(36).substr(2, 9)}`;\n\n  private onChange = (value: string) => {};\n  onTouched = () => {};\n\n  get stateVariant(): string {\n    if (this.error) return 'error';\n    if (this.success) return 'success';\n    if (this.warning) return 'warning';\n    return this.variant;\n  }\n\n  get containerClasses(): string {\n    const classes = ['relative'];\n    if (this.fullWidth) classes.push('w-full');\n    return classes.join(' ');\n  }\n\n  get inputClasses(): string {\n    const baseClasses = [\n      'flex w-full',\n      'font-medium text-foreground placeholder:text-muted-foreground',\n      'bg-background',\n      'border-2 border-input',\n      'transition-all duration-200 ease-in-out',\n      'disabled:cursor-not-allowed disabled:opacity-50',\n      'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n      'focus:border-primary',\n      'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n      'autofill:bg-background',\n      'contrast-more:border-2'\n    ];\n\n    // Size variants\n    const sizeClasses = {\n      md: 'h-12 px-4 py-3 text-base rounded-lg',\n      lg: 'h-14 px-5 py-4 text-lg rounded-lg',\n      xl: 'h-16 px-6 py-5 text-xl rounded-xl',\n    };\n\n    // State variants\n    const stateClasses = {\n      default: '',\n      error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n      success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n      warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n    };\n\n    const classes = [\n      ...baseClasses,\n      sizeClasses[this.size],\n      stateClasses[this.stateVariant as keyof typeof stateClasses]\n    ];\n\n    if (this.leadingIcon) classes.push('pl-12');\n    if (this.trailingIcon) classes.push('pr-12');\n    if (!this.fullWidth) classes.push('w-auto');\n    if (this.className) classes.push(this.className);\n\n    return classes.join(' ');\n  }\n\n  get helperTextClasses(): string {\n    const classes = ['mt-2 text-sm'];\n    \n    if (this.error) classes.push('text-destructive');\n    else if (this.success) classes.push('text-green-600');\n    else if (this.warning) classes.push('text-yellow-600');\n    else classes.push('text-muted-foreground');\n\n    return classes.join(' ');\n  }\n\n  get helperTextId(): string {\n    return this.helperText ? `${this.helperId}-helper` : '';\n  }\n\n  get combinedAriaDescribedBy(): string | null {\n    const parts = [];\n    if (this.helperTextId) parts.push(this.helperTextId);\n    return parts.length > 0 ? parts.join(' ') : null;\n  }\n\n  onInput(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    this.value = target.value;\n    this.onChange(this.value);\n    this.valueChange.emit(this.value);\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: string): void {\n    this.value = value || '';\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}"
      }
    ],
    "svelte": [
      {
        "path": "platforms/svelte/Input.svelte",
        "type": "registry:component",
        "content": "<script lang=\"ts\">\n  import { cn } from '../../lib/utils';\n  \n  export let value: string | number = '';\n  export let type: string = 'text';\n  export let variant: 'default' | 'error' | 'success' | 'warning' = 'default';\n  export let size: 'md' | 'lg' | 'xl' = 'lg';\n  export let fullWidth: boolean = true;\n  export let error: boolean = false;\n  export let success: boolean = false;\n  export let warning: boolean = false;\n  export let helperText: string = '';\n  export let disabled: boolean = false;\n  export let className: string = '';\n  export let placeholder: string = '';\n  \n  let inputElement: HTMLInputElement;\n  \n  const inputVariants = {\n    variant: {\n      default: '',\n      error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n      success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n      warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n    },\n    size: {\n      md: 'h-12 px-4 py-3 text-base rounded-lg',\n      lg: 'h-14 px-5 py-4 text-lg rounded-lg',\n      xl: 'h-16 px-6 py-5 text-xl rounded-xl',\n    },\n    fullWidth: {\n      true: 'w-full',\n      false: 'w-auto'\n    }\n  };\n  \n  $: stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n  \n  $: inputClasses = cn(\n    'flex font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background border-2 border-input transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    'autofill:bg-background contrast-more:border-2',\n    inputVariants.variant[stateVariant],\n    inputVariants.size[size],\n    inputVariants.fullWidth[fullWidth.toString() as 'true' | 'false'],\n    className\n  );\n  \n  $: helperTextClasses = cn(\n    'mt-2 text-sm',\n    error && 'text-destructive',\n    success && 'text-green-600',\n    warning && 'text-yellow-600',\n    !error && !success && !warning && 'text-muted-foreground'\n  );\n  \n  function handleInput(event: Event) {\n    const target = event.target as HTMLInputElement;\n    value = target.value;\n  }\n</script>\n\n<div class={cn('relative', fullWidth && 'w-full')}>\n  <input\n    bind:this={inputElement}\n    {type}\n    class={inputClasses}\n    {disabled}\n    {placeholder}\n    {value}\n    aria-invalid={error ? 'true' : undefined}\n    aria-describedby={helperText ? 'helper-text' : undefined}\n    on:input={handleInput}\n    on:change\n    on:focus\n    on:blur\n    {...$$restProps}\n  />\n  \n  {#if helperText}\n    <p \n      id=\"helper-text\"\n      class={helperTextClasses}\n    >\n      {helperText}\n    </p>\n  {/if}\n</div>"
      }
    ],
    "react-native": [
      {
        "path": "platforms/react-native/Input.tsx",
        "type": "registry:component",
        "content": "/**\n * React Native Input Component\n * Mobile-optimized text input with touch accessibility\n */\n\nimport React from 'react';\nimport { TextInput, View, Text, StyleSheet, TextInputProps } from 'react-native';\n\nconst inputStyles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n  input: {\n    fontSize: 16,\n    paddingHorizontal: 16,\n    paddingVertical: 14,\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    borderRadius: 8,\n    backgroundColor: '#ffffff',\n    color: '#0f172a',\n  },\n  inputFocused: {\n    borderColor: '#3b82f6',\n    shadowColor: '#3b82f6',\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  inputError: {\n    borderColor: '#ef4444',\n  },\n  inputSuccess: {\n    borderColor: '#10b981',\n  },\n  inputWarning: {\n    borderColor: '#f59e0b',\n  },\n  inputDisabled: {\n    opacity: 0.5,\n    backgroundColor: '#f8fafc',\n  },\n  sizeSmall: {\n    fontSize: 14,\n    paddingVertical: 10,\n  },\n  sizeLarge: {\n    fontSize: 18,\n    paddingVertical: 18,\n  },\n  helperText: {\n    fontSize: 14,\n    marginTop: 6,\n    color: '#64748b',\n  },\n  helperTextError: {\n    color: '#ef4444',\n  },\n  helperTextSuccess: {\n    color: '#10b981',\n  },\n  helperTextWarning: {\n    color: '#f59e0b',\n  },\n});\n\nexport interface ReactNativeInputProps extends TextInputProps {\n  readonly variant?: 'default' | 'error' | 'success' | 'warning';\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly error?: boolean;\n  readonly success?: boolean;\n  readonly warning?: boolean;\n  readonly helperText?: string;\n  readonly disabled?: boolean;\n}\n\nexport const Input = React.forwardRef<TextInput, ReactNativeInputProps>(\n  ({ \n    variant = 'default',\n    size = 'md',\n    error = false,\n    success = false,\n    warning = false,\n    helperText,\n    disabled = false,\n    style,\n    ...props \n  }, ref) => {\n    const [isFocused, setIsFocused] = React.useState(false);\n    \n    const stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n    \n    const inputStyle = [\n      inputStyles.input,\n      size === 'sm' && inputStyles.sizeSmall,\n      size === 'lg' && inputStyles.sizeLarge,\n      isFocused && inputStyles.inputFocused,\n      stateVariant === 'error' && inputStyles.inputError,\n      stateVariant === 'success' && inputStyles.inputSuccess,\n      stateVariant === 'warning' && inputStyles.inputWarning,\n      disabled && inputStyles.inputDisabled,\n      style,\n    ];\n    \n    const helperTextStyle = [\n      inputStyles.helperText,\n      error && inputStyles.helperTextError,\n      success && inputStyles.helperTextSuccess,\n      warning && inputStyles.helperTextWarning,\n    ];\n    \n    return (\n      <View style={inputStyles.container}>\n        <TextInput\n          ref={ref}\n          style={inputStyle}\n          editable={!disabled}\n          accessible={true}\n          accessibilityRole=\"text\"\n          accessibilityState={{\n            disabled,\n            invalid: error,\n          }}\n          onFocus={(e) => {\n            setIsFocused(true);\n            props.onFocus?.(e);\n          }}\n          onBlur={(e) => {\n            setIsFocused(false);\n            props.onBlur?.(e);\n          }}\n          {...props}\n        />\n        {helperText && (\n          <Text \n            style={helperTextStyle}\n            accessible={true}\n            accessibilityRole=\"text\"\n          >\n            {helperText}\n          </Text>\n        )}\n      </View>\n    );\n  }\n);\n\nInput.displayName = 'ReactNativeInput';"
      }
    ],
    "electron": [
      {
        "path": "platforms/electron/input.tsx",
        "type": "registry:component",
        "content": "/**\n * Electron Input Implementation\n * Enhanced React input with Electron-specific features\n */\n\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// ELECTRON API TYPES\n// =============================================================================\n\ninterface ElectronAPI {\n  readonly showOpenDialog: (options: OpenDialogOptions) => Promise<string[]>;\n  readonly showSaveDialog: (options: SaveDialogOptions) => Promise<string | null>;\n  readonly showContextMenu: (options: ContextMenuOptions) => void;\n  readonly registerShortcut: (shortcut: string, callback: () => void) => void;\n  readonly unregisterShortcut: (shortcut: string) => void;\n  readonly getPlatform: () => 'darwin' | 'win32' | 'linux';\n  readonly readClipboard: () => Promise<string>;\n  readonly writeClipboard: (text: string) => void;\n}\n\ninterface OpenDialogOptions {\n  readonly title?: string;\n  readonly defaultPath?: string;\n  readonly filters?: Array<{\n    readonly name: string;\n    readonly extensions: string[];\n  }>;\n  readonly properties?: Array<'openFile' | 'openDirectory' | 'multiSelections'>;\n}\n\ninterface SaveDialogOptions {\n  readonly title?: string;\n  readonly defaultPath?: string;\n  readonly filters?: Array<{\n    readonly name: string;\n    readonly extensions: string[];\n  }>;\n}\n\ninterface ContextMenuOptions {\n  readonly items: Array<{\n    readonly label: string;\n    readonly click?: () => void;\n    readonly type?: 'normal' | 'separator';\n    readonly enabled?: boolean;\n    readonly accelerator?: string;\n  }>;\n}\n\ndeclare global {\n  interface Window {\n    readonly electronAPI?: ElectronAPI;\n  }\n}\n\n// =============================================================================\n// VARIANT DEFINITIONS\n// =============================================================================\n\nconst inputVariants = cva(\n  [\n    'flex w-full rounded-lg border-2 bg-background text-sm',\n    'transition-all duration-200',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    // Professional sizing\n    'h-14 px-4'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'border-input',\n          'focus:border-primary focus:ring-primary',\n          'hover:border-primary/50'\n        ],\n        error: [\n          'border-destructive',\n          'focus:border-destructive focus:ring-destructive',\n          'hover:border-destructive/70'\n        ],\n        success: [\n          'border-green-500',\n          'focus:border-green-500 focus:ring-green-500',\n          'hover:border-green-500/70'\n        ]\n      },\n      size: {\n        sm: 'h-10 text-sm',\n        md: 'h-14 text-base',\n        lg: 'h-16 text-lg'\n      },\n      platform: {\n        darwin: 'font-normal',\n        win32: 'font-medium',\n        linux: 'font-normal'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface ElectronInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n    VariantProps<typeof inputVariants> {\n  /**\n   * Input label\n   */\n  readonly label?: string;\n  \n  /**\n   * Error message\n   */\n  readonly error?: string;\n  \n  /**\n   * Success message\n   */\n  readonly success?: string;\n  \n  /**\n   * Helper text\n   */\n  readonly helperText?: string;\n  \n  /**\n   * Icon to display before input\n   */\n  readonly icon?: React.ReactNode;\n  \n  /**\n   * Icon to display after input\n   */\n  readonly suffixIcon?: React.ReactNode;\n  \n  /**\n   * Enable file picker integration\n   */\n  readonly filePicker?: boolean;\n  \n  /**\n   * File picker options\n   */\n  readonly filePickerOptions?: OpenDialogOptions;\n  \n  /**\n   * Enable native context menu\n   */\n  readonly nativeContextMenu?: boolean;\n  \n  /**\n   * Custom context menu items\n   */\n  readonly contextMenuItems?: Array<{\n    readonly label: string;\n    readonly onClick?: () => void;\n    readonly shortcut?: string;\n  }>;\n  \n  /**\n   * Enable clipboard integration\n   */\n  readonly clipboardIntegration?: boolean;\n  \n  /**\n   * Platform-specific styling override\n   */\n  readonly platformOverride?: 'darwin' | 'win32' | 'linux' | 'auto';\n}\n\n// =============================================================================\n// MAIN ELECTRON INPUT COMPONENT\n// =============================================================================\n\nexport const ElectronInput = forwardRef<HTMLInputElement, ElectronInputProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      label,\n      error,\n      success,\n      helperText,\n      icon,\n      suffixIcon,\n      filePicker = false,\n      filePickerOptions,\n      nativeContextMenu = true,\n      contextMenuItems = [],\n      clipboardIntegration = true,\n      platformOverride = 'auto',\n      disabled,\n      value,\n      onChange,\n      onContextMenu,\n      ...props\n    },\n    ref\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [internalValue, setInternalValue] = useState(value || '');\n    \n    // Detect platform\n    const platform = platformOverride === 'auto' \n      ? (window.electronAPI?.getPlatform() || 'darwin')\n      : platformOverride;\n    \n    // Determine variant based on state\n    const effectiveVariant = error ? 'error' : success ? 'success' : variant;\n\n    // Handle value changes\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n      setInternalValue(e.target.value);\n      onChange?.(e);\n    }, [onChange]);\n\n    // Handle file picker\n    const handleFilePicker = useCallback(async () => {\n      if (window.electronAPI && filePicker) {\n        try {\n          const result = await window.electronAPI.showOpenDialog({\n            title: 'Select File',\n            properties: ['openFile'],\n            ...filePickerOptions\n          });\n          \n          if (result.length > 0) {\n            const newValue = result[0];\n            setInternalValue(newValue);\n            \n            // Trigger change event\n            if (inputRef.current) {\n              const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\n                window.HTMLInputElement.prototype,\n                'value'\n              )?.set;\n              nativeInputValueSetter?.call(inputRef.current, newValue);\n              \n              const event = new Event('input', { bubbles: true });\n              inputRef.current.dispatchEvent(event);\n            }\n          }\n        } catch (err) {\n          console.error('File picker error:', err);\n        }\n      }\n    }, [filePicker, filePickerOptions]);\n\n    // Handle context menu\n    const handleContextMenu = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n      if (nativeContextMenu && window.electronAPI) {\n        e.preventDefault();\n        \n        const defaultItems = clipboardIntegration ? [\n          {\n            label: 'Cut',\n            click: () => {\n              if (inputRef.current) {\n                const selected = inputRef.current.value.substring(\n                  inputRef.current.selectionStart || 0,\n                  inputRef.current.selectionEnd || 0\n                );\n                window.electronAPI?.writeClipboard(selected);\n                document.execCommand('cut');\n              }\n            },\n            accelerator: 'Ctrl+X'\n          },\n          {\n            label: 'Copy',\n            click: () => {\n              if (inputRef.current) {\n                const selected = inputRef.current.value.substring(\n                  inputRef.current.selectionStart || 0,\n                  inputRef.current.selectionEnd || 0\n                );\n                window.electronAPI?.writeClipboard(selected);\n              }\n            },\n            accelerator: 'Ctrl+C'\n          },\n          {\n            label: 'Paste',\n            click: async () => {\n              const text = await window.electronAPI?.readClipboard();\n              if (text && inputRef.current) {\n                document.execCommand('insertText', false, text);\n              }\n            },\n            accelerator: 'Ctrl+V'\n          },\n          { type: 'separator' as const },\n          {\n            label: 'Select All',\n            click: () => inputRef.current?.select(),\n            accelerator: 'Ctrl+A'\n          }\n        ] : [];\n\n        const menuItems = [\n          ...defaultItems,\n          ...(contextMenuItems.length > 0 ? [{ type: 'separator' as const }] : []),\n          ...contextMenuItems.map(item => ({\n            label: item.label,\n            click: item.onClick,\n            accelerator: item.shortcut,\n            type: 'normal' as const,\n            enabled: !disabled\n          }))\n        ];\n\n        window.electronAPI.showContextMenu({ items: menuItems });\n      }\n      onContextMenu?.(e);\n    }, [nativeContextMenu, clipboardIntegration, contextMenuItems, disabled, onContextMenu]);\n\n    // Sync ref\n    useEffect(() => {\n      if (ref && inputRef.current) {\n        if (typeof ref === 'function') {\n          ref(inputRef.current);\n        } else {\n          ref.current = inputRef.current;\n        }\n      }\n    }, [ref]);\n\n    return (\n      <div className=\"w-full space-y-2\">\n        {/* Label */}\n        {label && (\n          <label \n            htmlFor={props.id}\n            className=\"block text-sm font-medium text-foreground\"\n          >\n            {label}\n            {props.required && <span className=\"ml-1 text-destructive\">*</span>}\n          </label>\n        )}\n\n        {/* Input container */}\n        <div className=\"relative\">\n          {/* Prefix icon */}\n          {icon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {icon}\n            </div>\n          )}\n\n          {/* Input field */}\n          <input\n            ref={inputRef}\n            className={cn(\n              inputVariants({ variant: effectiveVariant, size, platform }),\n              icon && 'pl-10',\n              (suffixIcon || filePicker) && 'pr-10',\n              className\n            )}\n            value={internalValue}\n            onChange={handleChange}\n            onContextMenu={handleContextMenu}\n            disabled={disabled}\n            aria-invalid={!!error}\n            aria-describedby={\n              error ? `${props.id}-error` : \n              success ? `${props.id}-success` : \n              helperText ? `${props.id}-helper` : \n              undefined\n            }\n            {...props}\n          />\n\n          {/* Suffix icon or file picker button */}\n          {(suffixIcon || filePicker) && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n              {filePicker ? (\n                <button\n                  type=\"button\"\n                  onClick={handleFilePicker}\n                  disabled={disabled}\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  aria-label=\"Choose file\"\n                >\n                  <svg\n                    className=\"h-5 w-5\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\"\n                    />\n                  </svg>\n                </button>\n              ) : (\n                suffixIcon\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Helper/Error/Success text */}\n        {error && (\n          <p id={`${props.id}-error`} className=\"text-sm text-destructive\" role=\"alert\">\n            {error}\n          </p>\n        )}\n        {success && !error && (\n          <p id={`${props.id}-success`} className=\"text-sm text-green-600\">\n            {success}\n          </p>\n        )}\n        {helperText && !error && !success && (\n          <p id={`${props.id}-helper`} className=\"text-sm text-muted-foreground\">\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nElectronInput.displayName = 'ElectronInput';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const ElectronInputMeta = {\n  id: 'electron-input',\n  name: 'ElectronInput',\n  platform: 'electron',\n  baseComponent: 'input',\n  category: 'atom',\n  description: 'Enhanced input with Electron-specific features like native file dialogs and clipboard integration',\n  \n  // Electron-specific features\n  electronFeatures: [\n    'Native file picker dialog',\n    'Native context menus',\n    'Clipboard integration',\n    'Platform-specific styling',\n    'File path validation'\n  ],\n  \n  // Accessibility features\n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Keyboard navigation',\n      'Screen reader support',\n      'Error announcements',\n      'Label association',\n      'Native OS accessibility APIs'\n    ]\n  },\n  \n  // Usage examples\n  examples: {\n    basic: '<ElectronInput label=\"Name\" placeholder=\"Enter your name\" />',\n    withFilePicker: `\n<ElectronInput \n  label=\"Select File\" \n  filePicker\n  filePickerOptions={{\n    filters: [\n      { name: 'Images', extensions: ['jpg', 'png', 'gif'] },\n      { name: 'All Files', extensions: ['*'] }\n    ]\n  }}\n/>`,\n    withValidation: '<ElectronInput label=\"Email\" type=\"email\" error=\"Invalid email address\" />',\n    withIcon: '<ElectronInput label=\"Search\" icon={<SearchIcon />} />'\n  }\n} as const;\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type ElectronInputVariant = VariantProps<typeof inputVariants>['variant'];\nexport type ElectronInputSize = VariantProps<typeof inputVariants>['size'];\n\n// Default export for compatibility\nexport default ElectronInput;"
      }
    ],
    "ionic": [
      {
        "path": "platforms/ionic/input.tsx",
        "type": "registry:component",
        "content": "/**\n * Ionic Input Implementation\n * Enhanced input component with Ionic framework integration\n * Generated from universal InputSpec\n */\n\nimport React, { forwardRef, useState, useRef, useCallback } from 'react';\nimport { \n  IonInput, \n  IonItem, \n  IonLabel, \n  IonNote, \n  IonIcon,\n  IonText,\n  IonInputPasswordToggle\n} from '@ionic/react';\nimport { \n  alertCircle, \n  checkmarkCircle, \n  informationCircle,\n  eyeOutline,\n  eyeOffOutline\n} from 'ionicons/icons';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// IONIC VARIANT DEFINITIONS\n// =============================================================================\n\nconst ionicInputVariants = cva(\n  // Base classes for Ionic integration\n  [\n    'ion-input-wrapper',\n    'w-full'\n  ],\n  {\n    variants: {\n      variant: {\n        default: ['ion-color-primary'],\n        error: ['ion-color-danger'],\n        success: ['ion-color-success'],\n        warning: ['ion-color-warning']\n      },\n      size: {\n        sm: ['ion-input-small'],\n        md: ['ion-input-default'],\n        lg: ['ion-input-large']\n      },\n      fill: {\n        solid: ['ion-fill-solid'],\n        outline: ['ion-fill-outline'],\n        solid_outline: ['ion-fill-solid-outline']\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      fill: 'solid'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface IonicInputProps\n  extends Omit<React.ComponentProps<typeof IonInput>, 'type' | 'value' | 'onIonChange'>,\n    VariantProps<typeof ionicInputVariants> {\n  /**\n   * HTML input type\n   */\n  readonly type?: 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url' | 'date' | 'time' | 'datetime-local';\n  \n  /**\n   * Current value of the input\n   */\n  readonly value?: string;\n  \n  /**\n   * Label for the input\n   */\n  readonly label?: string;\n  \n  /**\n   * Label placement\n   */\n  readonly labelPlacement?: 'stacked' | 'floating' | 'fixed' | 'start' | 'end';\n  \n  /**\n   * Helper text below the input\n   */\n  readonly helperText?: string;\n  \n  /**\n   * Error message to display\n   */\n  readonly error?: string;\n  \n  /**\n   * Success message to display\n   */\n  readonly success?: string;\n  \n  /**\n   * Warning message to display\n   */\n  readonly warning?: string;\n  \n  /**\n   * Counter showing current/max characters\n   */\n  readonly counter?: boolean;\n  \n  /**\n   * Maximum length for input\n   */\n  readonly maxlength?: number;\n  \n  /**\n   * Clear button when input has value\n   */\n  readonly clearInput?: boolean;\n  \n  /**\n   * Clear button only on focus\n   */\n  readonly clearOnEdit?: boolean;\n  \n  /**\n   * Prefix content (icon or text)\n   */\n  readonly prefix?: string | React.ReactNode;\n  \n  /**\n   * Suffix content (icon or text)\n   */\n  readonly suffix?: string | React.ReactNode;\n  \n  /**\n   * Show password toggle for password inputs\n   */\n  readonly showPasswordToggle?: boolean;\n  \n  /**\n   * Haptic feedback on interaction\n   */\n  readonly haptic?: 'light' | 'medium' | 'heavy';\n  \n  /**\n   * Change event handler\n   */\n  readonly onChange?: (value: string) => void;\n  \n  /**\n   * Blur event handler\n   */\n  readonly onBlur?: (event: CustomEvent) => void;\n  \n  /**\n   * Focus event handler\n   */\n  readonly onFocus?: (event: CustomEvent) => void;\n  \n  /**\n   * Custom CSS classes\n   */\n  readonly className?: string;\n}\n\n// =============================================================================\n// HAPTIC FEEDBACK UTILITY\n// =============================================================================\n\nconst triggerHapticFeedback = (type: IonicInputProps['haptic']) => {\n  if (typeof window !== 'undefined' && 'Haptics' in window) {\n    try {\n      switch (type) {\n        case 'light':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'light' });\n          break;\n        case 'medium':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'medium' });\n          break;\n        case 'heavy':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'heavy' });\n          break;\n      }\n    } catch (error) {\n      console.warn('Haptic feedback not available:', error);\n    }\n  }\n};\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport const Input = forwardRef<HTMLIonInputElement, IonicInputProps>(\n  ({ \n    className,\n    variant = 'default',\n    size = 'md',\n    fill = 'solid',\n    type = 'text',\n    value,\n    label,\n    labelPlacement = 'floating',\n    helperText,\n    error,\n    success,\n    warning,\n    counter = false,\n    maxlength,\n    clearInput = false,\n    clearOnEdit = false,\n    prefix,\n    suffix,\n    showPasswordToggle = true,\n    haptic,\n    disabled = false,\n    required = false,\n    placeholder,\n    onChange,\n    onBlur,\n    onFocus,\n    ...props \n  }, ref) => {\n    const [isFocused, setIsFocused] = useState(false);\n    const [internalValue, setInternalValue] = useState(value || '');\n    \n    // Determine variant based on state\n    const currentVariant = error ? 'error' \n                        : success ? 'success'\n                        : warning ? 'warning'\n                        : variant;\n    \n    // Get status icon\n    const getStatusIcon = () => {\n      if (error) return alertCircle;\n      if (success) return checkmarkCircle;\n      if (warning) return informationCircle;\n      return null;\n    };\n    \n    // Get status message\n    const statusMessage = error || success || warning || helperText;\n    \n    const handleChange = useCallback((event: CustomEvent) => {\n      const newValue = event.detail.value || '';\n      setInternalValue(newValue);\n      \n      if (haptic) {\n        triggerHapticFeedback(haptic);\n      }\n      \n      onChange?.(newValue);\n    }, [onChange, haptic]);\n    \n    const handleFocus = useCallback((event: CustomEvent) => {\n      setIsFocused(true);\n      onFocus?.(event);\n    }, [onFocus]);\n    \n    const handleBlur = useCallback((event: CustomEvent) => {\n      setIsFocused(false);\n      onBlur?.(event);\n    }, [onBlur]);\n    \n    const renderIcon = (icon: string | React.ReactNode, slot?: 'start' | 'end') => {\n      if (!icon) return null;\n      \n      if (typeof icon === 'string') {\n        return <IonIcon icon={icon} slot={slot} />;\n      }\n      \n      return <span slot={slot}>{icon}</span>;\n    };\n    \n    // Character counter display\n    const characterCount = maxlength && counter ? (\n      <IonNote slot=\"end\" className=\"ion-text-right\">\n        {internalValue.length}/{maxlength}\n      </IonNote>\n    ) : null;\n    \n    return (\n      <IonItem \n        className={cn(\n          ionicInputVariants({ variant: currentVariant, size, fill }), \n          'ion-item-input',\n          isFocused && 'ion-focused',\n          disabled && 'ion-disabled',\n          className\n        )}\n        lines=\"full\"\n      >\n        {label && (\n          <IonLabel \n            position={labelPlacement}\n            className={cn(\n              'ion-label',\n              required && 'ion-label-required'\n            )}\n          >\n            {label}\n            {required && <span className=\"ion-required-indicator\"> *</span>}\n          </IonLabel>\n        )}\n        \n        <IonInput\n          ref={ref}\n          type={type}\n          value={internalValue}\n          placeholder={placeholder}\n          disabled={disabled}\n          required={required}\n          maxlength={maxlength}\n          clearInput={clearInput && type !== 'password'}\n          clearOnEdit={clearOnEdit}\n          onIonInput={handleChange}\n          onIonFocus={handleFocus}\n          onIonBlur={handleBlur}\n          className=\"ion-input-field\"\n          {...props}\n        >\n          {prefix && renderIcon(prefix, 'start')}\n          {suffix && renderIcon(suffix, 'end')}\n          {type === 'password' && showPasswordToggle && (\n            <IonInputPasswordToggle slot=\"end\" />\n          )}\n        </IonInput>\n        \n        {characterCount}\n        \n        {statusMessage && (\n          <IonNote \n            slot=\"helper\" \n            color={currentVariant === 'default' ? undefined : currentVariant}\n            className=\"ion-helper-text\"\n          >\n            {getStatusIcon() && (\n              <IonIcon \n                icon={getStatusIcon()!} \n                className=\"ion-helper-icon\" \n              />\n            )}\n            {statusMessage}\n          </IonNote>\n        )}\n      </IonItem>\n    );\n  }\n);\n\nInput.displayName = 'IonicInput';\n\n// =============================================================================\n// SPECIALIZED INPUT VARIANTS\n// =============================================================================\n\n/**\n * Search Input with Ionic styling\n */\nexport const SearchInput = forwardRef<HTMLIonInputElement, Omit<IonicInputProps, 'type'>>(\n  ({ placeholder = 'Search...', clearInput = true, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        type=\"search\"\n        placeholder={placeholder}\n        clearInput={clearInput}\n        prefix=\"search\"\n        className=\"ion-search-input\"\n        {...props}\n      />\n    );\n  }\n);\n\nSearchInput.displayName = 'IonicSearchInput';\n\n/**\n * PIN Input for secure entry\n */\nexport const PinInput = forwardRef<HTMLIonInputElement, Omit<IonicInputProps, 'type'> & {\n  length?: number;\n}>(({ length = 4, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      type=\"number\"\n      maxlength={length}\n      pattern=\"[0-9]*\"\n      inputMode=\"numeric\"\n      className=\"ion-pin-input\"\n      {...props}\n    />\n  );\n});\n\nPinInput.displayName = 'IonicPinInput';\n\n/**\n * Currency Input with formatting\n */\nexport const CurrencyInput = forwardRef<HTMLIonInputElement, Omit<IonicInputProps, 'type'> & {\n  currency?: string;\n}>(({ currency = 'NOK', prefix = currency, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      type=\"number\"\n      inputMode=\"decimal\"\n      prefix={prefix}\n      className=\"ion-currency-input\"\n      {...props}\n    />\n  );\n});\n\nCurrencyInput.displayName = 'IonicCurrencyInput';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const IonicInputMeta = {\n  id: 'ionic-input',\n  name: 'IonicInput',\n  platform: 'ionic',\n  category: 'atom',\n  description: 'Enhanced input component built with Ionic framework for mobile-first experiences',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Native mobile keyboard support',\n      'Platform-specific input types',\n      'Screen reader optimized',\n      'Touch-friendly tap targets',\n      'Clear visual focus indicators',\n      'Error state announcements'\n    ]\n  },\n  \n  bundle: {\n    size: '7.8kb',\n    dependencies: ['@ionic/react', '@ionic/core', 'ionicons', 'react'],\n    treeshakable: true\n  },\n  \n  features: {\n    hapticFeedback: 'Subtle haptic feedback on interaction',\n    nativeKeyboards: 'Platform-specific virtual keyboards',\n    floatingLabels: 'Material Design inspired floating labels',\n    clearButtons: 'Built-in clear functionality',\n    passwordToggle: 'Native password visibility toggle',\n    characterCounter: 'Built-in character counting',\n    statusMessages: 'Integrated error/success/warning states'\n  },\n  \n  usage: {\n    basic: '<Input label=\"Email\" type=\"email\" />',\n    withError: '<Input label=\"Password\" type=\"password\" error=\"Password is required\" />',\n    withHelper: '<Input label=\"Phone\" type=\"tel\" helperText=\"Include country code\" />',\n    withCounter: '<Input label=\"Bio\" maxlength={200} counter />',\n    search: '<SearchInput placeholder=\"Search products...\" />',\n    pin: '<PinInput label=\"Enter PIN\" length={6} />',\n    currency: '<CurrencyInput label=\"Amount\" currency=\"USD\" />'\n  }\n} as const;\n\nexport default Input;"
      }
    ],
    "vanilla": [
      {
        "path": "platforms/vanilla/input.js",
        "type": "registry:component",
        "content": "/**\n * Input Component - Vanilla JS/Web Components Implementation\n * Generated from universal input specification\n * WCAG AAA compliant with full keyboard and screen reader support\n */\n\nimport { UniversalTokens } from '../../core/universal-tokens.js';\nimport { InputSpec } from '../../core/component-specs.js';\n\n// =============================================================================\n// CSS CUSTOM PROPERTIES FROM TOKENS\n// =============================================================================\n\nconst cssVariables = UniversalTokens.converters.toCSSVariables({\n  colors: UniversalTokens.colors,\n  spacing: UniversalTokens.spacing,\n  typography: UniversalTokens.typography,\n  shadows: UniversalTokens.shadows,\n  borders: UniversalTokens.borders,\n  animations: UniversalTokens.animations\n});\n\n// =============================================================================\n// INPUT WEB COMPONENT\n// =============================================================================\n\nclass XaheenInput extends HTMLElement {\n  static get observedAttributes() {\n    return [\n      'type', 'value', 'placeholder', 'disabled', 'required',\n      'error', 'label', 'name', 'id', 'autocomplete', 'pattern',\n      'minlength', 'maxlength', 'min', 'max', 'step', 'readonly',\n      'aria-label', 'aria-describedby', 'aria-invalid'\n    ];\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this._internals = this.attachInternals ? this.attachInternals() : null;\n    this._value = '';\n    this._onChange = this._onChange.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n  }\n\n  // =============================================================================\n  // LIFECYCLE METHODS\n  // =============================================================================\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n    this.setupAccessibility();\n    this.updateFormValue();\n  }\n\n  disconnectedCallback() {\n    this.removeEventListeners();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      if (name === 'value') {\n        this._value = newValue || '';\n        this.updateInputValue();\n        this.updateFormValue();\n      } else {\n        this.render();\n      }\n      \n      if (name === 'disabled' || name === 'required' || name === 'error') {\n        this.updateAccessibility();\n        this.updateValidity();\n      }\n    }\n  }\n\n  // =============================================================================\n  // GETTERS & SETTERS\n  // =============================================================================\n\n  get type() {\n    return this.getAttribute('type') || 'text';\n  }\n\n  set type(value) {\n    this.setAttribute('type', value);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val || '';\n    this.setAttribute('value', this._value);\n    this.updateInputValue();\n    this.updateFormValue();\n  }\n\n  get placeholder() {\n    return this.getAttribute('placeholder') || '';\n  }\n\n  set placeholder(value) {\n    this.setAttribute('placeholder', value);\n  }\n\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get required() {\n    return this.hasAttribute('required');\n  }\n\n  set required(value) {\n    if (value) {\n      this.setAttribute('required', '');\n    } else {\n      this.removeAttribute('required');\n    }\n  }\n\n  get error() {\n    return this.getAttribute('error') || '';\n  }\n\n  set error(value) {\n    if (value) {\n      this.setAttribute('error', value);\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get label() {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value) {\n    this.setAttribute('label', value);\n  }\n\n  get name() {\n    return this.getAttribute('name') || '';\n  }\n\n  set name(value) {\n    this.setAttribute('name', value);\n  }\n\n  // =============================================================================\n  // RENDER METHOD\n  // =============================================================================\n\n  render() {\n    const styles = this.createStyles();\n    const hasError = !!this.error;\n    const inputId = this.getAttribute('id') || `input-${Math.random().toString(36).substr(2, 9)}`;\n    const errorId = `${inputId}-error`;\n    const labelId = `${inputId}-label`;\n\n    this.shadowRoot.innerHTML = `\n      <style>${styles}</style>\n      <div class=\"input-container\">\n        ${this.label ? `\n          <label \n            id=\"${labelId}\"\n            for=\"${inputId}\" \n            class=\"input-label\"\n            part=\"label\"\n          >\n            ${this.label}\n            ${this.required ? '<span class=\"required-indicator\" aria-label=\"required\">*</span>' : ''}\n          </label>\n        ` : ''}\n        \n        <div class=\"input-wrapper ${hasError ? 'input-wrapper--error' : ''}\">\n          <slot name=\"prefix\" class=\"input-prefix\"></slot>\n          \n          <input\n            id=\"${inputId}\"\n            part=\"input\"\n            class=\"input ${hasError ? 'input--error' : ''}\"\n            type=\"${this.type}\"\n            placeholder=\"${this.placeholder}\"\n            ${this.disabled ? 'disabled' : ''}\n            ${this.required ? 'required' : ''}\n            ${this.getAttribute('readonly') ? 'readonly' : ''}\n            ${this.getAttribute('pattern') ? `pattern=\"${this.getAttribute('pattern')}\"` : ''}\n            ${this.getAttribute('minlength') ? `minlength=\"${this.getAttribute('minlength')}\"` : ''}\n            ${this.getAttribute('maxlength') ? `maxlength=\"${this.getAttribute('maxlength')}\"` : ''}\n            ${this.getAttribute('min') ? `min=\"${this.getAttribute('min')}\"` : ''}\n            ${this.getAttribute('max') ? `max=\"${this.getAttribute('max')}\"` : ''}\n            ${this.getAttribute('step') ? `step=\"${this.getAttribute('step')}\"` : ''}\n            ${this.getAttribute('autocomplete') ? `autocomplete=\"${this.getAttribute('autocomplete')}\"` : ''}\n            aria-label=\"${this.getAttribute('aria-label') || this.label || ''}\"\n            aria-labelledby=\"${this.label ? labelId : ''}\"\n            aria-describedby=\"${hasError ? errorId : ''}\"\n            aria-invalid=\"${hasError}\"\n            aria-required=\"${this.required}\"\n            value=\"${this._value}\"\n          />\n          \n          <slot name=\"suffix\" class=\"input-suffix\"></slot>\n        </div>\n        \n        ${hasError ? `\n          <div \n            id=\"${errorId}\" \n            class=\"input-error\" \n            role=\"alert\"\n            aria-live=\"polite\"\n            part=\"error\"\n          >\n            ${this.error}\n          </div>\n        ` : ''}\n      </div>\n    `;\n\n    // Update input value after render\n    this.updateInputValue();\n  }\n\n  // =============================================================================\n  // STYLE GENERATION\n  // =============================================================================\n\n  createStyles() {\n    return `\n      /* CSS Custom Properties */\n      :host {\n        ${Object.entries(cssVariables).map(([key, value]) => `${key}: ${value};`).join('\\n        ')}\n        \n        display: block;\n        font-family: var(--typography-fontFamily-sans);\n      }\n\n      /* Container */\n      .input-container {\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-2);\n      }\n\n      /* Label styles */\n      .input-label {\n        display: block;\n        font-size: var(--typography-fontSize-sm);\n        font-weight: var(--typography-fontWeight-medium);\n        color: var(--colors-secondary-700);\n        margin-bottom: var(--spacing-1);\n      }\n\n      .required-indicator {\n        color: var(--colors-error-main);\n        margin-left: var(--spacing-1);\n      }\n\n      /* Input wrapper */\n      .input-wrapper {\n        position: relative;\n        display: flex;\n        align-items: center;\n        width: 100%;\n        transition: all var(--animations-duration-fast)ms var(--animations-easing-easeInOut);\n      }\n\n      /* Input styles */\n      .input {\n        flex: 1;\n        min-height: var(--spacing-input-md);\n        padding: 0 var(--spacing-4);\n        font-size: var(--typography-fontSize-base);\n        font-family: inherit;\n        color: var(--colors-secondary-900);\n        background-color: white;\n        border: 2px solid var(--colors-secondary-300);\n        border-radius: var(--borders-radius-lg);\n        outline: none;\n        transition: all var(--animations-duration-fast)ms var(--animations-easing-easeInOut);\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      /* Prefix and suffix slots */\n      .input-prefix,\n      .input-suffix {\n        display: flex;\n        align-items: center;\n        color: var(--colors-secondary-500);\n      }\n\n      .input-prefix {\n        margin-right: var(--spacing-3);\n      }\n\n      .input-suffix {\n        margin-left: var(--spacing-3);\n      }\n\n      /* Focus styles - WCAG AAA compliant */\n      .input:focus {\n        border-color: var(--colors-primary-500);\n        box-shadow: 0 0 0 3px var(--colors-primary-100);\n      }\n\n      /* Hover styles */\n      .input:hover:not(:disabled):not(:focus) {\n        border-color: var(--colors-secondary-400);\n      }\n\n      /* Disabled styles */\n      .input:disabled {\n        background-color: var(--colors-secondary-100);\n        color: var(--colors-secondary-500);\n        cursor: not-allowed;\n        opacity: 0.6;\n      }\n\n      /* Readonly styles */\n      .input:read-only {\n        background-color: var(--colors-secondary-50);\n        cursor: default;\n      }\n\n      /* Error styles */\n      .input--error,\n      .input-wrapper--error .input {\n        border-color: var(--colors-error-main);\n      }\n\n      .input--error:focus,\n      .input-wrapper--error .input:focus {\n        border-color: var(--colors-error-main);\n        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\n      }\n\n      .input-error {\n        font-size: var(--typography-fontSize-sm);\n        color: var(--colors-error-main);\n        margin-top: var(--spacing-1);\n      }\n\n      /* Placeholder styles */\n      .input::placeholder {\n        color: var(--colors-secondary-400);\n        opacity: 1;\n      }\n\n      /* Type-specific styles */\n      .input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .input[type=\"number\"]::-webkit-outer-spin-button,\n      .input[type=\"number\"]::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .input[type=\"search\"]::-webkit-search-decoration,\n      .input[type=\"search\"]::-webkit-search-cancel-button {\n        -webkit-appearance: none;\n      }\n\n      /* High contrast mode support */\n      @media (prefers-contrast: high) {\n        .input {\n          border-width: 3px;\n        }\n        \n        .input:focus {\n          outline: 3px solid currentColor;\n          outline-offset: 2px;\n          box-shadow: none;\n        }\n      }\n\n      /* Reduced motion support */\n      @media (prefers-reduced-motion: reduce) {\n        .input,\n        .input-wrapper {\n          transition: none;\n        }\n      }\n\n      /* Dark mode support */\n      @media (prefers-color-scheme: dark) {\n        :host {\n          --input-bg: var(--colors-secondary-800);\n          --input-border: var(--colors-secondary-600);\n          --input-color: var(--colors-secondary-100);\n        }\n\n        .input {\n          background-color: var(--input-bg);\n          border-color: var(--input-border);\n          color: var(--input-color);\n        }\n\n        .input-label {\n          color: var(--colors-secondary-300);\n        }\n\n        .input::placeholder {\n          color: var(--colors-secondary-500);\n        }\n      }\n    `;\n  }\n\n  // =============================================================================\n  // EVENT HANDLING\n  // =============================================================================\n\n  setupEventListeners() {\n    const input = this.shadowRoot.querySelector('input');\n    if (input) {\n      input.addEventListener('input', this._onInput);\n      input.addEventListener('change', this._onChange);\n      input.addEventListener('focus', this._onFocus);\n      input.addEventListener('blur', this._onBlur);\n      input.addEventListener('keydown', this._onKeyDown);\n    }\n  }\n\n  removeEventListeners() {\n    const input = this.shadowRoot.querySelector('input');\n    if (input) {\n      input.removeEventListener('input', this._onInput);\n      input.removeEventListener('change', this._onChange);\n      input.removeEventListener('focus', this._onFocus);\n      input.removeEventListener('blur', this._onBlur);\n      input.removeEventListener('keydown', this._onKeyDown);\n    }\n  }\n\n  _onInput(event) {\n    this._value = event.target.value;\n    this.updateFormValue();\n    \n    // Dispatch custom input event\n    this.dispatchEvent(new CustomEvent('xaheen-input', {\n      detail: { value: this._value },\n      bubbles: true,\n      composed: true\n    }));\n\n    // Validate on input\n    this.updateValidity();\n  }\n\n  _onChange(event) {\n    this._value = event.target.value;\n    \n    // Dispatch custom change event\n    this.dispatchEvent(new CustomEvent('xaheen-change', {\n      detail: { value: this._value },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onFocus(event) {\n    // Dispatch custom focus event\n    this.dispatchEvent(new CustomEvent('xaheen-focus', {\n      detail: { value: this._value },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onBlur(event) {\n    // Dispatch custom blur event\n    this.dispatchEvent(new CustomEvent('xaheen-blur', {\n      detail: { value: this._value },\n      bubbles: true,\n      composed: true\n    }));\n\n    // Validate on blur\n    this.updateValidity();\n  }\n\n  _onKeyDown(event) {\n    // Handle enter key for form submission\n    if (event.key === 'Enter' && this.type !== 'textarea') {\n      const form = this.closest('form');\n      if (form) {\n        // Check if there are other inputs in the form\n        const inputs = form.querySelectorAll('input, textarea, select');\n        const currentIndex = Array.from(inputs).indexOf(this);\n        \n        if (currentIndex < inputs.length - 1) {\n          // Focus next input\n          event.preventDefault();\n          inputs[currentIndex + 1].focus();\n        }\n      }\n    }\n  }\n\n  // =============================================================================\n  // HELPER METHODS\n  // =============================================================================\n\n  updateInputValue() {\n    const input = this.shadowRoot.querySelector('input');\n    if (input && input.value !== this._value) {\n      input.value = this._value;\n    }\n  }\n\n  updateFormValue() {\n    if (this._internals) {\n      this._internals.setFormValue(this._value);\n    }\n  }\n\n  // =============================================================================\n  // ACCESSIBILITY\n  // =============================================================================\n\n  setupAccessibility() {\n    // Set default role if needed\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'textbox');\n    }\n\n    this.updateAccessibility();\n  }\n\n  updateAccessibility() {\n    const input = this.shadowRoot.querySelector('input');\n    if (!input) return;\n\n    // Update ARIA states\n    input.setAttribute('aria-invalid', this.error ? 'true' : 'false');\n    input.setAttribute('aria-required', this.required ? 'true' : 'false');\n    \n    if (this.disabled) {\n      input.setAttribute('aria-disabled', 'true');\n    } else {\n      input.removeAttribute('aria-disabled');\n    }\n  }\n\n  // =============================================================================\n  // FORM PARTICIPATION\n  // =============================================================================\n\n  static get formAssociated() {\n    return true;\n  }\n\n  get form() {\n    return this._internals?.form;\n  }\n\n  get validity() {\n    return this._internals?.validity;\n  }\n\n  get validationMessage() {\n    return this._internals?.validationMessage;\n  }\n\n  get willValidate() {\n    return this._internals?.willValidate;\n  }\n\n  checkValidity() {\n    return this._internals?.checkValidity() ?? true;\n  }\n\n  reportValidity() {\n    return this._internals?.reportValidity() ?? true;\n  }\n\n  setCustomValidity(message) {\n    if (this._internals) {\n      if (message) {\n        this._internals.setValidity({ customError: true }, message);\n      } else {\n        this._internals.setValidity({});\n      }\n    }\n  }\n\n  updateValidity() {\n    if (!this._internals) return;\n\n    const input = this.shadowRoot.querySelector('input');\n    if (!input) return;\n\n    // Check native validity\n    if (!input.checkValidity()) {\n      this._internals.setValidity(\n        { customError: true },\n        input.validationMessage\n      );\n    } else if (this.error) {\n      this._internals.setValidity(\n        { customError: true },\n        this.error\n      );\n    } else {\n      this._internals.setValidity({});\n    }\n  }\n}\n\n// =============================================================================\n// REGISTER CUSTOM ELEMENT\n// =============================================================================\n\nif (!customElements.get('xaheen-input')) {\n  customElements.define('xaheen-input', XaheenInput);\n}\n\nexport default XaheenInput;"
      }
    ],
    "headless-ui": [
      {
        "path": "platforms/headless-ui/input.tsx",
        "type": "registry:component",
        "content": "/**\n * Headless UI Input Implementation\n * Enhanced input component using Headless UI Combobox for accessibility\n * Generated from universal InputSpec\n */\n\nimport React, { forwardRef, useState, useCallback, Fragment } from 'react';\nimport { Combobox, Transition } from '@headlessui/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\nimport { UniversalTokens } from '../../core/universal-tokens';\n\n// =============================================================================\n// VARIANT DEFINITIONS\n// =============================================================================\n\nconst inputVariants = cva(\n  [\n    'flex w-full rounded-md text-sm transition-colors',\n    'focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50',\n    'data-[focus]:ring-2 data-[focus]:ring-offset-2',\n    'placeholder:text-muted-foreground',\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'border border-input bg-background',\n          'hover:border-muted-foreground/50',\n          'focus-visible:ring-primary data-[focus]:ring-primary'\n        ],\n        filled: [\n          'bg-muted border border-transparent',\n          'hover:bg-muted/80',\n          'focus-visible:ring-primary data-[focus]:ring-primary'\n        ],\n        ghost: [\n          'border-0 bg-transparent shadow-none',\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary data-[focus]:ring-primary'\n        ],\n        error: [\n          'border border-destructive bg-background',\n          'hover:border-destructive/80',\n          'focus-visible:ring-destructive data-[focus]:ring-destructive'\n        ]\n      },\n      size: {\n        sm: 'h-10 px-3 py-2',\n        md: 'h-14 px-4 py-3',\n        lg: 'h-16 px-5 py-4'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md'\n    }\n  }\n);\n\nconst inputWrapperVariants = cva(\n  'relative w-full',\n  {\n    variants: {\n      hasLabel: {\n        true: 'space-y-2',\n        false: ''\n      },\n      hasError: {\n        true: 'space-y-2',\n        false: ''\n      }\n    }\n  }\n);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface HeadlessInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'onChange' | 'value'>,\n    VariantProps<typeof inputVariants> {\n  /**\n   * Current value (controlled)\n   */\n  readonly value?: string;\n  \n  /**\n   * Change handler\n   */\n  readonly onChange?: (value: string) => void;\n  \n  /**\n   * Input label\n   */\n  readonly label?: string;\n  \n  /**\n   * Error message\n   */\n  readonly error?: string;\n  \n  /**\n   * Helper text\n   */\n  readonly helperText?: string;\n  \n  /**\n   * Show required indicator\n   */\n  readonly showRequired?: boolean;\n  \n  /**\n   * Icon to show before input\n   */\n  readonly startIcon?: React.ReactNode;\n  \n  /**\n   * Icon to show after input\n   */\n  readonly endIcon?: React.ReactNode;\n  \n  /**\n   * Auto-complete suggestions\n   */\n  readonly suggestions?: string[];\n  \n  /**\n   * Enable combobox mode\n   */\n  readonly enableCombobox?: boolean;\n  \n  /**\n   * Custom filter function for suggestions\n   */\n  readonly filterSuggestions?: (query: string, suggestions: string[]) => string[];\n}\n\n// =============================================================================\n// HELPER COMPONENTS\n// =============================================================================\n\nconst Label = ({ \n  htmlFor, \n  children, \n  required \n}: { \n  htmlFor?: string; \n  children: React.ReactNode; \n  required?: boolean;\n}) => (\n  <label \n    htmlFor={htmlFor}\n    className=\"block text-sm font-medium text-foreground\"\n  >\n    {children}\n    {required && <span className=\"ml-1 text-destructive\">*</span>}\n  </label>\n);\n\nconst ErrorMessage = ({ children }: { children: React.ReactNode }) => (\n  <p className=\"text-sm text-destructive\" role=\"alert\">\n    {children}\n  </p>\n);\n\nconst HelperText = ({ children }: { children: React.ReactNode }) => (\n  <p className=\"text-sm text-muted-foreground\">\n    {children}\n  </p>\n);\n\n// =============================================================================\n// BASIC INPUT COMPONENT\n// =============================================================================\n\nconst BasicInput = forwardRef<HTMLInputElement, HeadlessInputProps>(\n  ({ \n    className,\n    variant,\n    size,\n    label,\n    error,\n    helperText,\n    showRequired,\n    startIcon,\n    endIcon,\n    id,\n    disabled,\n    required,\n    'aria-describedby': ariaDescribedBy,\n    ...props \n  }, ref) => {\n    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n    const errorId = `${inputId}-error`;\n    const helperId = `${inputId}-helper`;\n    \n    const describedBy = [\n      ariaDescribedBy,\n      error && errorId,\n      helperText && helperId\n    ].filter(Boolean).join(' ') || undefined;\n\n    return (\n      <div className={inputWrapperVariants({ \n        hasLabel: !!label, \n        hasError: !!error \n      })}>\n        {label && (\n          <Label htmlFor={inputId} required={showRequired || required}>\n            {label}\n          </Label>\n        )}\n        \n        <div className=\"relative\">\n          {startIcon && (\n            <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n              <span className=\"text-muted-foreground\">{startIcon}</span>\n            </div>\n          )}\n          \n          <input\n            ref={ref}\n            id={inputId}\n            className={cn(\n              inputVariants({ \n                variant: error ? 'error' : variant, \n                size, \n                className \n              }),\n              startIcon && 'pl-10',\n              endIcon && 'pr-10'\n            )}\n            disabled={disabled}\n            required={required}\n            aria-invalid={!!error}\n            aria-describedby={describedBy}\n            {...props}\n          />\n          \n          {endIcon && (\n            <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3\">\n              <span className=\"text-muted-foreground\">{endIcon}</span>\n            </div>\n          )}\n        </div>\n        \n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        {!error && helperText && <HelperText>{helperText}</HelperText>}\n      </div>\n    );\n  }\n);\n\nBasicInput.displayName = 'BasicInput';\n\n// =============================================================================\n// COMBOBOX INPUT COMPONENT\n// =============================================================================\n\nconst ComboboxInput = forwardRef<HTMLInputElement, HeadlessInputProps>(\n  ({ \n    className,\n    variant,\n    size,\n    label,\n    error,\n    helperText,\n    showRequired,\n    startIcon,\n    endIcon,\n    suggestions = [],\n    filterSuggestions,\n    value = '',\n    onChange,\n    placeholder,\n    disabled,\n    required,\n    id,\n    'aria-describedby': ariaDescribedBy,\n    ...props \n  }, ref) => {\n    const [query, setQuery] = useState('');\n    const inputId = id || `combobox-${Math.random().toString(36).substr(2, 9)}`;\n    const errorId = `${inputId}-error`;\n    const helperId = `${inputId}-helper`;\n    \n    const describedBy = [\n      ariaDescribedBy,\n      error && errorId,\n      helperText && helperId\n    ].filter(Boolean).join(' ') || undefined;\n\n    const defaultFilter = useCallback((query: string, suggestions: string[]) => {\n      return query === ''\n        ? suggestions\n        : suggestions.filter((item) =>\n            item.toLowerCase().includes(query.toLowerCase())\n          );\n    }, []);\n\n    const filteredSuggestions = (filterSuggestions || defaultFilter)(query, suggestions);\n\n    return (\n      <div className={inputWrapperVariants({ \n        hasLabel: !!label, \n        hasError: !!error \n      })}>\n        {label && (\n          <Label htmlFor={inputId} required={showRequired || required}>\n            {label}\n          </Label>\n        )}\n        \n        <Combobox value={value} onChange={onChange} disabled={disabled}>\n          <div className=\"relative\">\n            {startIcon && (\n              <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n                <span className=\"text-muted-foreground\">{startIcon}</span>\n              </div>\n            )}\n            \n            <Combobox.Input\n              ref={ref}\n              id={inputId}\n              className={cn(\n                inputVariants({ \n                  variant: error ? 'error' : variant, \n                  size, \n                  className \n                }),\n                startIcon && 'pl-10',\n                endIcon && 'pr-10'\n              )}\n              placeholder={placeholder}\n              onChange={(event) => setQuery(event.target.value)}\n              displayValue={(item: string) => item}\n              aria-invalid={!!error}\n              aria-describedby={describedBy}\n              {...props}\n            />\n            \n            {endIcon && (\n              <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3\">\n                <span className=\"text-muted-foreground\">{endIcon}</span>\n              </div>\n            )}\n            \n            <Transition\n              as={Fragment}\n              leave=\"transition ease-in duration-100\"\n              leaveFrom=\"opacity-100\"\n              leaveTo=\"opacity-0\"\n              afterLeave={() => setQuery('')}\n            >\n              <Combobox.Options className=\"absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-popover py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\n                {filteredSuggestions.length === 0 && query !== '' ? (\n                  <div className=\"relative cursor-default select-none px-4 py-2 text-muted-foreground\">\n                    Nothing found.\n                  </div>\n                ) : (\n                  filteredSuggestions.map((suggestion, index) => (\n                    <Combobox.Option\n                      key={`${suggestion}-${index}`}\n                      value={suggestion}\n                      className={({ active, selected }) =>\n                        cn(\n                          'relative cursor-default select-none py-2 pl-10 pr-4',\n                          active ? 'bg-accent text-accent-foreground' : 'text-foreground',\n                          selected && 'font-medium'\n                        )\n                      }\n                    >\n                      {({ selected, active }) => (\n                        <>\n                          <span className={cn('block truncate', selected && 'font-medium')}>\n                            {suggestion}\n                          </span>\n                          {selected && (\n                            <span\n                              className={cn(\n                                'absolute inset-y-0 left-0 flex items-center pl-3',\n                                active ? 'text-accent-foreground' : 'text-primary'\n                              )}\n                            >\n                              <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                            </span>\n                          )}\n                        </>\n                      )}\n                    </Combobox.Option>\n                  ))\n                )}\n              </Combobox.Options>\n            </Transition>\n          </div>\n        </Combobox>\n        \n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        {!error && helperText && <HelperText>{helperText}</HelperText>}\n      </div>\n    );\n  }\n);\n\nComboboxInput.displayName = 'ComboboxInput';\n\n// =============================================================================\n// ICON COMPONENTS\n// =============================================================================\n\nconst CheckIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\n// =============================================================================\n// MAIN EXPORT COMPONENT\n// =============================================================================\n\nexport const Input = forwardRef<HTMLInputElement, HeadlessInputProps>(\n  ({ enableCombobox = false, suggestions = [], ...props }, ref) => {\n    if (enableCombobox && suggestions.length > 0) {\n      return <ComboboxInput ref={ref} suggestions={suggestions} {...props} />;\n    }\n    \n    return <BasicInput ref={ref} {...props} />;\n  }\n);\n\nInput.displayName = 'HeadlessInput';\n\n// =============================================================================\n// SPECIALIZED INPUT VARIANTS\n// =============================================================================\n\n/**\n * Search Input with built-in icon and behavior\n */\nexport const SearchInput = forwardRef<HTMLInputElement, Omit<HeadlessInputProps, 'type' | 'startIcon'>>(\n  (props, ref) => {\n    return (\n      <Input\n        ref={ref}\n        type=\"search\"\n        startIcon={\n          <svg\n            className=\"h-5 w-5\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        }\n        {...props}\n      />\n    );\n  }\n);\n\nSearchInput.displayName = 'SearchInput';\n\n/**\n * Password Input with show/hide toggle\n */\nexport const PasswordInput = forwardRef<HTMLInputElement, Omit<HeadlessInputProps, 'type'>>(\n  (props, ref) => {\n    const [showPassword, setShowPassword] = useState(false);\n    \n    return (\n      <Input\n        ref={ref}\n        type={showPassword ? 'text' : 'password'}\n        endIcon={\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword(!showPassword)}\n            className=\"text-muted-foreground hover:text-foreground focus:outline-none\"\n            aria-label={showPassword ? 'Hide password' : 'Show password'}\n          >\n            {showPassword ? (\n              <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\" />\n                <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\" />\n              </svg>\n            ) : (\n              <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z\" clipRule=\"evenodd\" />\n                <path d=\"M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z\" />\n              </svg>\n            )}\n          </button>\n        }\n        {...props}\n      />\n    );\n  }\n);\n\nPasswordInput.displayName = 'PasswordInput';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const HeadlessInputMeta = {\n  id: 'headless-input',\n  name: 'HeadlessInput',\n  platform: 'headless-ui',\n  category: 'atom',\n  description: 'Enhanced input component with Headless UI Combobox for accessibility',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Full keyboard navigation with arrow keys',\n      'Screen reader announcements for suggestions',\n      'Proper ARIA attributes and roles',\n      'Focus management and trapping',\n      'Automatic labeling and descriptions'\n    ]\n  },\n  \n  bundle: {\n    size: '5.8kb',\n    dependencies: ['@headlessui/react', 'class-variance-authority'],\n    treeshakable: true\n  },\n  \n  features: {\n    combobox: 'Built-in combobox with filtering',\n    suggestions: 'Auto-complete with custom filtering',\n    variants: 'Multiple visual variants',\n    icons: 'Start and end icon support',\n    specialized: 'Password and search variants'\n  },\n  \n  usage: {\n    basic: '<Input label=\"Email\" type=\"email\" placeholder=\"Enter your email\" />',\n    combobox: `\n      <Input \n        label=\"Country\"\n        enableCombobox\n        suggestions={['United States', 'Canada', 'Mexico']}\n        value={country}\n        onChange={setCountry}\n      />\n    `,\n    withError: '<Input label=\"Username\" error=\"Username is required\" required />',\n    password: '<PasswordInput label=\"Password\" placeholder=\"Enter password\" />',\n    search: '<SearchInput placeholder=\"Search...\" />'\n  }\n} as const;\n\nexport default Input;"
      }
    ],
    "radix": [
      {
        "path": "platforms/radix/input.tsx",
        "type": "registry:component",
        "content": "/**\n * Radix Platform Input Component\n * Enhanced with Radix UI patterns and accessibility\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst inputVariants = cva(\n  [\n    'flex w-full',\n    'font-medium text-foreground placeholder:text-muted-foreground',\n    'bg-background',\n    'border-2 border-input',\n    'transition-all duration-200 ease-in-out',\n    'disabled:cursor-not-allowed disabled:opacity-50',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/20',\n    'focus:border-primary',\n    'file:border-0 file:bg-transparent file:text-sm file:font-medium',\n    'autofill:bg-background',\n    'contrast-more:border-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: '',\n        error: 'border-destructive focus:ring-destructive/20 focus:border-destructive',\n        success: 'border-green-600 focus:ring-green-600/20 focus:border-green-600',\n        warning: 'border-yellow-600 focus:ring-yellow-600/20 focus:border-yellow-600',\n      },\n      size: {\n        md: 'h-12 px-4 py-3 text-base rounded-lg',\n        lg: 'h-14 px-5 py-4 text-lg rounded-lg',\n        xl: 'h-16 px-6 py-5 text-xl rounded-xl',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: 'w-auto'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'lg',\n      fullWidth: true\n    }\n  }\n);\n\nexport interface RadixInputProps extends \n  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n  VariantProps<typeof inputVariants> {\n  readonly error?: boolean;\n  readonly success?: boolean;\n  readonly warning?: boolean;\n  readonly helperText?: string;\n  readonly leadingIcon?: React.ReactNode;\n  readonly trailingIcon?: React.ReactNode;\n}\n\nexport const Input = React.forwardRef<HTMLInputElement, RadixInputProps>(\n  ({ \n    className, \n    type = 'text',\n    variant,\n    size,\n    fullWidth,\n    error,\n    success,\n    warning,\n    helperText,\n    leadingIcon,\n    trailingIcon,\n    disabled,\n    'aria-describedby': ariaDescribedBy,\n    ...props \n  }, ref) => {\n    const stateVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;\n    \n    const helperId = React.useId();\n    const helperTextId = helperText ? `${helperId}-helper` : undefined;\n    const combinedAriaDescribedBy = [ariaDescribedBy, helperTextId].filter(Boolean).join(' ') || undefined;\n    \n    const inputElement = (\n      <input\n        type={type}\n        className={cn(\n          inputVariants({ variant: stateVariant, size, fullWidth }),\n          leadingIcon && 'pl-12',\n          trailingIcon && 'pr-12',\n          className\n        )}\n        ref={ref}\n        disabled={disabled}\n        aria-invalid={error ? 'true' : undefined}\n        aria-describedby={combinedAriaDescribedBy}\n        data-radix-input=\"\"\n        {...props}\n      />\n    );\n    \n    if (!leadingIcon && !trailingIcon && !helperText) {\n      return inputElement;\n    }\n    \n    return (\n      <div className={cn('relative', fullWidth && 'w-full')} data-radix-input-wrapper=\"\">\n        {leadingIcon && (\n          <div className=\"absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" aria-hidden=\"true\">\n            {leadingIcon}\n          </div>\n        )}\n        \n        {inputElement}\n        \n        {trailingIcon && (\n          <div className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\" aria-hidden=\"true\">\n            {trailingIcon}\n          </div>\n        )}\n        \n        {helperText && (\n          <p \n            id={helperTextId}\n            className={cn(\n              'mt-2 text-sm',\n              error && 'text-destructive',\n              success && 'text-green-600',\n              warning && 'text-yellow-600',\n              !error && !success && !warning && 'text-muted-foreground'\n            )}\n            data-radix-input-helper=\"\"\n          >\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'RadixInput';\n\nexport { inputVariants };"
      }
    ]
  },
  "platform": "vue"
}