{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "card",
  "type": "registry:component",
  "title": "Card",
  "description": "Card component with NSM security classification support",
  "category": "components",
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA"
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "platforms/vue/Card.vue",
      "type": "registry:component",
      "content": "<template>\n  <div\n    :class=\"cn(cardVariants({ variant, padding, rounded }), className)\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { cva } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst cardVariants = cva(\n  [\n    'bg-card text-card-foreground',\n    'border border-border',\n    'transition-all duration-200'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'shadow-md hover:shadow-lg',\n        elevated: 'shadow-lg hover:shadow-xl',\n        outline: 'shadow-sm hover:shadow-md',\n        ghost: 'shadow-none hover:shadow-sm',\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      },\n      rounded: {\n        none: 'rounded-none',\n        sm: 'rounded-md',\n        md: 'rounded-lg',\n        lg: 'rounded-xl',\n        xl: 'rounded-2xl',\n        full: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      rounded: 'lg'\n    }\n  }\n);\n\ninterface Props {\n  variant?: 'default' | 'elevated' | 'outline' | 'ghost';\n  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  className?: string;\n}\n\nwithDefaults(defineProps<Props>(), {\n  variant: 'default',\n  padding: 'md',\n  rounded: 'lg',\n});\n</script>"
    }
  ],
  "platformFiles": {
    "react": [
      {
        "path": "platforms/react/card.tsx",
        "type": "registry:component",
        "content": "/**\n * React Platform Card Component\n * Container with professional elevation and spacing standards\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst cardVariants = cva(\n  [\n    'bg-card text-card-foreground',\n    'border border-border',\n    'transition-all duration-200'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'shadow-md hover:shadow-lg',\n        elevated: 'shadow-lg hover:shadow-xl',\n        outline: 'shadow-sm hover:shadow-md',\n        ghost: 'shadow-none hover:shadow-sm',\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      },\n      rounded: {\n        none: 'rounded-none',\n        sm: 'rounded-md',\n        md: 'rounded-lg',\n        lg: 'rounded-xl',\n        xl: 'rounded-2xl',\n        full: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      rounded: 'lg'\n    }\n  }\n);\n\nconst cardHeaderVariants = cva(\n  'flex flex-col space-y-1.5',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\nconst cardContentVariants = cva(\n  [],\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\nconst cardFooterVariants = cva(\n  'flex items-center',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\n// Card Root Component\nexport interface ReactCardProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardVariants> {}\n\nexport const Card = React.forwardRef<HTMLDivElement, ReactCardProps>(\n  ({ className, variant, padding, rounded, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardVariants({ variant, padding, rounded }), className)}\n      {...props}\n    />\n  )\n);\n\nCard.displayName = 'ReactCard';\n\n// Card Header Component\nexport interface CardHeaderProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardHeaderVariants> {}\n\nexport const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardHeaderVariants({ padding }), className)}\n      {...props}\n    />\n  )\n);\n\nCardHeader.displayName = 'CardHeader';\n\n// Card Title Component\nexport interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  readonly as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(\n  ({ className, as: Component = 'h3', ...props }, ref) => (\n    <Component\n      ref={ref}\n      className={cn(\n        'text-2xl font-semibold leading-none tracking-tight',\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nCardTitle.displayName = 'CardTitle';\n\n// Card Description Component\nexport interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>(\n  ({ className, ...props }, ref) => (\n    <p\n      ref={ref}\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  )\n);\n\nCardDescription.displayName = 'CardDescription';\n\n// Card Content Component\nexport interface CardContentProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardContentVariants> {}\n\nexport const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardContentVariants({ padding }), className)}\n      {...props}\n    />\n  )\n);\n\nCardContent.displayName = 'CardContent';\n\n// Card Footer Component\nexport interface CardFooterProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardFooterVariants> {}\n\nexport const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardFooterVariants({ padding }), className)}\n      {...props}\n    />\n  )\n);\n\nCardFooter.displayName = 'CardFooter';\n\nexport { cardVariants };"
      }
    ],
    "vue": [
      {
        "path": "platforms/vue/Card.vue",
        "type": "registry:component",
        "content": "<template>\n  <div\n    :class=\"cn(cardVariants({ variant, padding, rounded }), className)\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { cva } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst cardVariants = cva(\n  [\n    'bg-card text-card-foreground',\n    'border border-border',\n    'transition-all duration-200'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'shadow-md hover:shadow-lg',\n        elevated: 'shadow-lg hover:shadow-xl',\n        outline: 'shadow-sm hover:shadow-md',\n        ghost: 'shadow-none hover:shadow-sm',\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      },\n      rounded: {\n        none: 'rounded-none',\n        sm: 'rounded-md',\n        md: 'rounded-lg',\n        lg: 'rounded-xl',\n        xl: 'rounded-2xl',\n        full: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      rounded: 'lg'\n    }\n  }\n);\n\ninterface Props {\n  variant?: 'default' | 'elevated' | 'outline' | 'ghost';\n  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  className?: string;\n}\n\nwithDefaults(defineProps<Props>(), {\n  variant: 'default',\n  padding: 'md',\n  rounded: 'lg',\n});\n</script>"
      }
    ],
    "angular": [
      {
        "path": "platforms/angular/card.component.ts",
        "type": "registry:component",
        "content": "/**\n * Angular Card Component\n * Container with professional elevation and spacing standards\n */\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'xaheen-card',\n  template: `\n    <div [class]=\"cardClasses\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class CardComponent {\n  @Input() variant: 'default' | 'elevated' | 'outline' | 'ghost' = 'default';\n  @Input() padding: 'none' | 'sm' | 'md' | 'lg' | 'xl' = 'md';\n  @Input() rounded: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full' = 'lg';\n  @Input() className?: string;\n\n  get cardClasses(): string {\n    const baseClasses = [\n      'bg-card text-card-foreground',\n      'border border-border',\n      'transition-all duration-200'\n    ];\n\n    // Variant classes\n    const variantClasses = {\n      default: 'shadow-md hover:shadow-lg',\n      elevated: 'shadow-lg hover:shadow-xl',\n      outline: 'shadow-sm hover:shadow-md',\n      ghost: 'shadow-none hover:shadow-sm',\n    };\n\n    // Padding classes\n    const paddingClasses = {\n      none: 'p-0',\n      sm: 'p-4',\n      md: 'p-6',\n      lg: 'p-8',\n      xl: 'p-10'\n    };\n\n    // Rounded classes\n    const roundedClasses = {\n      none: 'rounded-none',\n      sm: 'rounded-md',\n      md: 'rounded-lg',\n      lg: 'rounded-xl',\n      xl: 'rounded-2xl',\n      full: 'rounded-full'\n    };\n\n    const classes = [\n      ...baseClasses,\n      variantClasses[this.variant],\n      paddingClasses[this.padding],\n      roundedClasses[this.rounded]\n    ];\n\n    if (this.className) classes.push(this.className);\n\n    return classes.join(' ');\n  }\n}\n\n@Component({\n  selector: 'xaheen-card-header',\n  template: `\n    <div [class]=\"headerClasses\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class CardHeaderComponent {\n  @Input() padding: 'none' | 'sm' | 'md' | 'lg' = 'md';\n  @Input() className?: string;\n\n  get headerClasses(): string {\n    const baseClasses = ['flex flex-col space-y-1.5'];\n\n    const paddingClasses = {\n      none: '',\n      sm: 'p-4',\n      md: 'p-6',\n      lg: 'p-8'\n    };\n\n    const classes = [\n      ...baseClasses,\n      paddingClasses[this.padding]\n    ];\n\n    if (this.className) classes.push(this.className);\n\n    return classes.join(' ');\n  }\n}\n\n@Component({\n  selector: 'xaheen-card-title',\n  template: `\n    <ng-container [ngSwitch]=\"as\">\n      <h1 *ngSwitchCase=\"'h1'\" [class]=\"titleClasses\"><ng-content></ng-content></h1>\n      <h2 *ngSwitchCase=\"'h2'\" [class]=\"titleClasses\"><ng-content></ng-content></h2>\n      <h3 *ngSwitchDefault [class]=\"titleClasses\"><ng-content></ng-content></h3>\n      <h4 *ngSwitchCase=\"'h4'\" [class]=\"titleClasses\"><ng-content></ng-content></h4>\n      <h5 *ngSwitchCase=\"'h5'\" [class]=\"titleClasses\"><ng-content></ng-content></h5>\n      <h6 *ngSwitchCase=\"'h6'\" [class]=\"titleClasses\"><ng-content></ng-content></h6>\n    </ng-container>\n  `\n})\nexport class CardTitleComponent {\n  @Input() as: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' = 'h3';\n  @Input() className?: string;\n\n  get titleClasses(): string {\n    const classes = [\n      'text-2xl font-semibold leading-none tracking-tight'\n    ];\n\n    if (this.className) classes.push(this.className);\n\n    return classes.join(' ');\n  }\n}\n\n@Component({\n  selector: 'xaheen-card-content',\n  template: `\n    <div [class]=\"contentClasses\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class CardContentComponent {\n  @Input() padding: 'none' | 'sm' | 'md' | 'lg' = 'md';\n  @Input() className?: string;\n\n  get contentClasses(): string {\n    const paddingClasses = {\n      none: '',\n      sm: 'p-4 pt-0',\n      md: 'p-6 pt-0',\n      lg: 'p-8 pt-0'\n    };\n\n    const classes = [paddingClasses[this.padding]];\n\n    if (this.className) classes.push(this.className);\n\n    return classes.join(' ');\n  }\n}\n\n@Component({\n  selector: 'xaheen-card-footer',\n  template: `\n    <div [class]=\"footerClasses\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class CardFooterComponent {\n  @Input() padding: 'none' | 'sm' | 'md' | 'lg' = 'md';\n  @Input() className?: string;\n\n  get footerClasses(): string {\n    const baseClasses = ['flex items-center'];\n\n    const paddingClasses = {\n      none: '',\n      sm: 'p-4 pt-0',\n      md: 'p-6 pt-0',\n      lg: 'p-8 pt-0'\n    };\n\n    const classes = [\n      ...baseClasses,\n      paddingClasses[this.padding]\n    ];\n\n    if (this.className) classes.push(this.className);\n\n    return classes.join(' ');\n  }\n}"
      }
    ],
    "svelte": [
      {
        "path": "platforms/svelte/Card.svelte",
        "type": "registry:component",
        "content": "<script lang=\"ts\">\n  import { cn } from '../../lib/utils';\n  \n  export let variant: 'default' | 'elevated' | 'outline' | 'ghost' = 'default';\n  export let padding: 'none' | 'sm' | 'md' | 'lg' | 'xl' = 'md';\n  export let rounded: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full' = 'lg';\n  export let className: string = '';\n  \n  const cardVariants = {\n    variant: {\n      default: 'shadow-md hover:shadow-lg',\n      elevated: 'shadow-lg hover:shadow-xl',\n      outline: 'shadow-sm hover:shadow-md',\n      ghost: 'shadow-none hover:shadow-sm',\n    },\n    padding: {\n      none: 'p-0',\n      sm: 'p-4',\n      md: 'p-6',\n      lg: 'p-8',\n      xl: 'p-10'\n    },\n    rounded: {\n      none: 'rounded-none',\n      sm: 'rounded-md',\n      md: 'rounded-lg',\n      lg: 'rounded-xl',\n      xl: 'rounded-2xl',\n      full: 'rounded-full'\n    }\n  };\n  \n  $: cardClasses = cn(\n    'bg-card text-card-foreground border border-border transition-all duration-200',\n    cardVariants.variant[variant],\n    cardVariants.padding[padding],\n    cardVariants.rounded[rounded],\n    className\n  );\n</script>\n\n<div class={cardClasses} {...$$restProps}>\n  <slot />\n</div>"
      }
    ],
    "react-native": [
      {
        "path": "platforms/react-native/Card.tsx",
        "type": "registry:component",
        "content": "/**\n * React Native Card Component\n * Mobile-optimized container with elevation and spacing\n */\n\nimport React from 'react';\nimport { View, ViewProps, StyleSheet } from 'react-native';\n\nconst cardStyles = StyleSheet.create({\n  card: {\n    backgroundColor: '#ffffff',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  // Variants\n  default: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  elevated: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n    elevation: 6,\n  },\n  outline: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  ghost: {\n    shadowColor: 'transparent',\n    elevation: 0,\n    borderColor: 'transparent',\n  },\n  // Padding\n  paddingNone: {\n    padding: 0,\n  },\n  paddingSm: {\n    padding: 12,\n  },\n  paddingMd: {\n    padding: 16,\n  },\n  paddingLg: {\n    padding: 24,\n  },\n  paddingXl: {\n    padding: 32,\n  },\n  // Rounded corners\n  roundedNone: {\n    borderRadius: 0,\n  },\n  roundedSm: {\n    borderRadius: 4,\n  },\n  roundedMd: {\n    borderRadius: 6,\n  },\n  roundedLg: {\n    borderRadius: 8,\n  },\n  roundedXl: {\n    borderRadius: 12,\n  },\n  rounded2xl: {\n    borderRadius: 16,\n  },\n});\n\nexport interface ReactNativeCardProps extends ViewProps {\n  readonly variant?: 'default' | 'elevated' | 'outline' | 'ghost';\n  readonly padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  readonly rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n}\n\nexport const Card = React.forwardRef<View, ReactNativeCardProps>(\n  ({ \n    variant = 'default',\n    padding = 'md',\n    rounded = 'lg',\n    style,\n    children,\n    ...props \n  }, ref) => {\n    const cardStyle = [\n      cardStyles.card,\n      cardStyles[variant as keyof typeof cardStyles],\n      cardStyles[`padding${padding.charAt(0).toUpperCase() + padding.slice(1)}` as keyof typeof cardStyles],\n      cardStyles[`rounded${rounded === '2xl' ? '2xl' : rounded.charAt(0).toUpperCase() + rounded.slice(1)}` as keyof typeof cardStyles],\n      style,\n    ];\n    \n    return (\n      <View\n        ref={ref}\n        style={cardStyle}\n        accessible={true}\n        accessibilityRole=\"group\"\n        {...props}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nCard.displayName = 'ReactNativeCard';\n\n// Header Component\nexport interface CardHeaderProps extends ViewProps {\n  readonly padding?: 'none' | 'sm' | 'md' | 'lg';\n}\n\nexport const CardHeader = React.forwardRef<View, CardHeaderProps>(\n  ({ padding = 'md', style, children, ...props }, ref) => {\n    const headerStyle = [\n      {\n        paddingBottom: 8,\n      },\n      cardStyles[`padding${padding.charAt(0).toUpperCase() + padding.slice(1)}` as keyof typeof cardStyles],\n      style,\n    ];\n    \n    return (\n      <View\n        ref={ref}\n        style={headerStyle}\n        accessible={true}\n        accessibilityRole=\"header\"\n        {...props}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nCardHeader.displayName = 'CardHeader';\n\n// Content Component\nexport interface CardContentProps extends ViewProps {\n  readonly padding?: 'none' | 'sm' | 'md' | 'lg';\n}\n\nexport const CardContent = React.forwardRef<View, CardContentProps>(\n  ({ padding = 'md', style, children, ...props }, ref) => {\n    const contentStyle = [\n      cardStyles[`padding${padding.charAt(0).toUpperCase() + padding.slice(1)}` as keyof typeof cardStyles],\n      { paddingTop: 0 },\n      style,\n    ];\n    \n    return (\n      <View\n        ref={ref}\n        style={contentStyle}\n        accessible={true}\n        {...props}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nCardContent.displayName = 'CardContent';\n\n// Footer Component\nexport interface CardFooterProps extends ViewProps {\n  readonly padding?: 'none' | 'sm' | 'md' | 'lg';\n}\n\nexport const CardFooter = React.forwardRef<View, CardFooterProps>(\n  ({ padding = 'md', style, children, ...props }, ref) => {\n    const footerStyle = [\n      {\n        flexDirection: 'row' as const,\n        alignItems: 'center' as const,\n        paddingTop: 0,\n      },\n      cardStyles[`padding${padding.charAt(0).toUpperCase() + padding.slice(1)}` as keyof typeof cardStyles],\n      style,\n    ];\n    \n    return (\n      <View\n        ref={ref}\n        style={footerStyle}\n        accessible={true}\n        {...props}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nCardFooter.displayName = 'CardFooter';"
      }
    ],
    "electron": [
      {
        "path": "platforms/electron/card.tsx",
        "type": "registry:component",
        "content": "/**\n * Electron Card Implementation\n * Enhanced React card with Electron-specific features\n */\n\nimport React, { forwardRef, useCallback, useEffect, useState } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// ELECTRON API TYPES\n// =============================================================================\n\ninterface ElectronAPI {\n  readonly showContextMenu: (options: ContextMenuOptions) => void;\n  readonly getCurrentWindow: () => {\n    readonly isMaximized: () => boolean;\n    readonly minimize: () => void;\n    readonly maximize: () => void;\n    readonly close: () => void;\n  };\n  readonly getPlatform: () => 'darwin' | 'win32' | 'linux';\n  readonly setWindowOpacity: (opacity: number) => void;\n  readonly dragWindow: () => void;\n}\n\ninterface ContextMenuOptions {\n  readonly items: Array<{\n    readonly label: string;\n    readonly click?: () => void;\n    readonly type?: 'normal' | 'separator';\n    readonly enabled?: boolean;\n  }>;\n}\n\ndeclare global {\n  interface Window {\n    readonly electronAPI?: ElectronAPI;\n  }\n}\n\n// =============================================================================\n// VARIANT DEFINITIONS\n// =============================================================================\n\nconst cardVariants = cva(\n  [\n    'rounded-xl bg-card text-card-foreground transition-all duration-200',\n    'relative overflow-hidden'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'border border-border',\n          'shadow-md hover:shadow-lg'\n        ],\n        outlined: [\n          'border-2 border-border',\n          'shadow-none hover:shadow-md'\n        ],\n        filled: [\n          'border-0 bg-muted',\n          'shadow-none'\n        ],\n        elevated: [\n          'border-0',\n          'shadow-lg hover:shadow-xl'\n        ],\n        glass: [\n          'border border-white/20',\n          'bg-white/10 backdrop-blur-md',\n          'shadow-xl'\n        ]\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      },\n      hoverable: {\n        true: [\n          'cursor-pointer',\n          'hover:scale-[1.02]',\n          'active:scale-[0.98]'\n        ]\n      },\n      draggable: {\n        true: 'cursor-move'\n      },\n      platform: {\n        darwin: 'backdrop-saturate-150',\n        win32: '',\n        linux: ''\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface ElectronCardProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof cardVariants> {\n  /**\n   * Card header content\n   */\n  readonly header?: React.ReactNode;\n  \n  /**\n   * Card footer content\n   */\n  readonly footer?: React.ReactNode;\n  \n  /**\n   * Enable window dragging when clicking on card\n   */\n  readonly windowDraggable?: boolean;\n  \n  /**\n   * Enable native context menu\n   */\n  readonly nativeContextMenu?: boolean;\n  \n  /**\n   * Context menu items\n   */\n  readonly contextMenuItems?: Array<{\n    readonly label: string;\n    readonly onClick?: () => void;\n  }>;\n  \n  /**\n   * Enable glassmorphism effect (requires transparent window)\n   */\n  readonly glassmorphism?: boolean;\n  \n  /**\n   * Loading state\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Platform-specific styling override\n   */\n  readonly platformOverride?: 'darwin' | 'win32' | 'linux' | 'auto';\n}\n\n// =============================================================================\n// LOADING SKELETON\n// =============================================================================\n\nconst CardSkeleton: React.FC<{ className?: string }> = ({ className }) => (\n  <div className={cn('animate-pulse', className)}>\n    <div className=\"h-4 bg-muted rounded w-3/4 mb-4\" />\n    <div className=\"space-y-2\">\n      <div className=\"h-3 bg-muted rounded\" />\n      <div className=\"h-3 bg-muted rounded w-5/6\" />\n    </div>\n  </div>\n);\n\n// =============================================================================\n// MAIN ELECTRON CARD COMPONENT\n// =============================================================================\n\nexport const ElectronCard = forwardRef<HTMLDivElement, ElectronCardProps>(\n  (\n    {\n      className,\n      variant,\n      padding,\n      hoverable,\n      draggable,\n      header,\n      footer,\n      children,\n      windowDraggable = false,\n      nativeContextMenu = false,\n      contextMenuItems = [],\n      glassmorphism = false,\n      loading = false,\n      platformOverride = 'auto',\n      onClick,\n      onContextMenu,\n      onMouseDown,\n      ...props\n    },\n    ref\n  ) => {\n    const [isDragging, setIsDragging] = useState(false);\n    \n    // Detect platform\n    const platform = platformOverride === 'auto' \n      ? (window.electronAPI?.getPlatform() || 'darwin')\n      : platformOverride;\n    \n    // Determine variant\n    const effectiveVariant = glassmorphism ? 'glass' : variant;\n    const effectiveDraggable = windowDraggable ? true : draggable;\n\n    // Handle window dragging\n    const handleMouseDown = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n      if (windowDraggable && window.electronAPI) {\n        e.preventDefault();\n        setIsDragging(true);\n        window.electronAPI.dragWindow();\n      }\n      onMouseDown?.(e);\n    }, [windowDraggable, onMouseDown]);\n\n    // Handle context menu\n    const handleContextMenu = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n      if (nativeContextMenu && window.electronAPI && contextMenuItems.length > 0) {\n        e.preventDefault();\n        window.electronAPI.showContextMenu({\n          items: contextMenuItems.map(item => ({\n            label: item.label,\n            click: item.onClick,\n            type: 'normal' as const\n          }))\n        });\n      }\n      onContextMenu?.(e);\n    }, [nativeContextMenu, contextMenuItems, onContextMenu]);\n\n    // Release dragging state\n    useEffect(() => {\n      if (isDragging) {\n        const handleMouseUp = () => setIsDragging(false);\n        window.addEventListener('mouseup', handleMouseUp);\n        return () => window.removeEventListener('mouseup', handleMouseUp);\n      }\n    }, [isDragging]);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          cardVariants({\n            variant: effectiveVariant,\n            padding: header || footer ? 'none' : padding,\n            hoverable,\n            draggable: effectiveDraggable,\n            platform\n          }),\n          isDragging && 'opacity-80',\n          className\n        )}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        onMouseDown={handleMouseDown}\n        role={hoverable || onClick ? 'button' : undefined}\n        tabIndex={hoverable || onClick ? 0 : undefined}\n        {...props}\n      >\n        {/* Header */}\n        {header && (\n          <div \n            className={cn(\n              'border-b border-border',\n              padding === 'sm' && 'px-4 py-3',\n              padding === 'md' && 'px-6 py-4',\n              padding === 'lg' && 'px-8 py-5',\n              padding === 'xl' && 'px-10 py-6',\n              (!padding || padding === 'none') && 'px-6 py-4'\n            )}\n          >\n            {loading ? <CardSkeleton className=\"h-6\" /> : header}\n          </div>\n        )}\n\n        {/* Body */}\n        <div \n          className={cn(\n            header || footer ? (\n              padding === 'sm' && 'px-4 py-3',\n              padding === 'md' && 'px-6 py-4',\n              padding === 'lg' && 'px-8 py-5',\n              padding === 'xl' && 'px-10 py-6',\n              (!padding || padding === 'none') && 'px-6 py-4'\n            ) : undefined\n          )}\n        >\n          {loading ? <CardSkeleton /> : children}\n        </div>\n\n        {/* Footer */}\n        {footer && (\n          <div \n            className={cn(\n              'border-t border-border',\n              padding === 'sm' && 'px-4 py-3',\n              padding === 'md' && 'px-6 py-4',\n              padding === 'lg' && 'px-8 py-5',\n              padding === 'xl' && 'px-10 py-6',\n              (!padding || padding === 'none') && 'px-6 py-4'\n            )}\n          >\n            {loading ? <CardSkeleton className=\"h-5\" /> : footer}\n          </div>\n        )}\n\n        {/* Glassmorphism overlay effect */}\n        {glassmorphism && platform === 'darwin' && (\n          <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-white/10 pointer-events-none\" />\n        )}\n      </div>\n    );\n  }\n);\n\nElectronCard.displayName = 'ElectronCard';\n\n// =============================================================================\n// CARD SUBCOMPONENTS\n// =============================================================================\n\nexport const CardHeader: React.FC<{ className?: string; children: React.ReactNode }> = ({\n  className,\n  children\n}) => (\n  <div className={cn('text-lg font-semibold', className)}>\n    {children}\n  </div>\n);\n\nexport const CardTitle: React.FC<{ className?: string; children: React.ReactNode }> = ({\n  className,\n  children\n}) => (\n  <h3 className={cn('text-xl font-bold tracking-tight', className)}>\n    {children}\n  </h3>\n);\n\nexport const CardDescription: React.FC<{ className?: string; children: React.ReactNode }> = ({\n  className,\n  children\n}) => (\n  <p className={cn('text-sm text-muted-foreground', className)}>\n    {children}\n  </p>\n);\n\nexport const CardContent: React.FC<{ className?: string; children: React.ReactNode }> = ({\n  className,\n  children\n}) => (\n  <div className={cn('', className)}>\n    {children}\n  </div>\n);\n\nexport const CardFooter: React.FC<{ className?: string; children: React.ReactNode }> = ({\n  className,\n  children\n}) => (\n  <div className={cn('flex items-center gap-4', className)}>\n    {children}\n  </div>\n);\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const ElectronCardMeta = {\n  id: 'electron-card',\n  name: 'ElectronCard',\n  platform: 'electron',\n  baseComponent: 'card',\n  category: 'molecule',\n  description: 'Enhanced card with Electron-specific features like window dragging and glassmorphism',\n  \n  // Electron-specific features\n  electronFeatures: [\n    'Window dragging support',\n    'Native context menus',\n    'Glassmorphism effect',\n    'Platform-specific styling',\n    'Loading skeletons'\n  ],\n  \n  // Accessibility features\n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Semantic HTML structure',\n      'Keyboard navigation',\n      'Screen reader support',\n      'Focus management',\n      'ARIA attributes'\n    ]\n  },\n  \n  // Usage examples\n  examples: {\n    basic: `\n<ElectronCard>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card description goes here</CardDescription>\n  </CardHeader>\n  <CardContent>\n    Your content here\n  </CardContent>\n</ElectronCard>`,\n    windowDraggable: `\n<ElectronCard windowDraggable variant=\"glass\">\n  <CardTitle>Draggable Window Area</CardTitle>\n  <CardDescription>Click and drag to move the window</CardDescription>\n</ElectronCard>`,\n    withContextMenu: `\n<ElectronCard \n  nativeContextMenu\n  contextMenuItems={[\n    { label: 'Edit', onClick: handleEdit },\n    { label: 'Delete', onClick: handleDelete }\n  ]}\n>\n  Right-click for options\n</ElectronCard>`,\n    glassmorphism: `\n<ElectronCard glassmorphism>\n  <CardTitle>Glassmorphic Card</CardTitle>\n  <CardDescription>Beautiful frosted glass effect</CardDescription>\n</ElectronCard>`\n  }\n} as const;\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type ElectronCardVariant = VariantProps<typeof cardVariants>['variant'];\nexport type ElectronCardPadding = VariantProps<typeof cardVariants>['padding'];\n\n// Default export for compatibility\nexport default ElectronCard;"
      }
    ],
    "ionic": [
      {
        "path": "platforms/ionic/card.tsx",
        "type": "registry:component",
        "content": "/**\n * Ionic Card Implementation\n * Enhanced card component with Ionic framework integration\n * Generated from universal CardSpec\n */\n\nimport React, { forwardRef, useCallback } from 'react';\nimport { \n  IonCard, \n  IonCardHeader, \n  IonCardTitle, \n  IonCardSubtitle,\n  IonCardContent,\n  IonRippleEffect,\n  IonIcon,\n  IonButton,\n  IonBadge,\n  IonChip,\n  IonAvatar,\n  IonImg\n} from '@ionic/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// IONIC VARIANT DEFINITIONS\n// =============================================================================\n\nconst ionicCardVariants = cva(\n  // Base classes for Ionic integration\n  [\n    'ion-card-wrapper',\n    'position-relative',\n    'overflow-hidden'\n  ],\n  {\n    variants: {\n      variant: {\n        default: ['ion-card-default'],\n        outlined: ['ion-card-outlined'],\n        filled: ['ion-card-filled'],\n        elevated: ['ion-card-elevated'],\n        flat: ['ion-card-flat']\n      },\n      padding: {\n        none: ['ion-no-padding'],\n        sm: ['ion-padding-small'],\n        md: ['ion-padding'],\n        lg: ['ion-padding-large'],\n        xl: ['ion-padding-extra']\n      },\n      color: {\n        default: [],\n        primary: ['ion-color-primary'],\n        secondary: ['ion-color-secondary'],\n        tertiary: ['ion-color-tertiary'],\n        success: ['ion-color-success'],\n        warning: ['ion-color-warning'],\n        danger: ['ion-color-danger'],\n        dark: ['ion-color-dark'],\n        medium: ['ion-color-medium'],\n        light: ['ion-color-light']\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      color: 'default'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface IonicCardProps\n  extends Omit<React.ComponentProps<typeof IonCard>, 'color'>,\n    VariantProps<typeof ionicCardVariants> {\n  /**\n   * Card header content\n   */\n  readonly header?: {\n    title?: string;\n    subtitle?: string;\n    avatar?: string | React.ReactNode;\n    action?: React.ReactNode;\n  };\n  \n  /**\n   * Card footer content\n   */\n  readonly footer?: React.ReactNode;\n  \n  /**\n   * Whether the card is interactive/clickable\n   */\n  readonly clickable?: boolean;\n  \n  /**\n   * Whether to show ripple effect on click\n   */\n  readonly ripple?: boolean;\n  \n  /**\n   * Click handler\n   */\n  readonly onClick?: (event: React.MouseEvent) => void;\n  \n  /**\n   * Whether the card should have hover effects\n   */\n  readonly hoverable?: boolean;\n  \n  /**\n   * Media content (image/video)\n   */\n  readonly media?: {\n    src: string;\n    alt?: string;\n    position?: 'top' | 'bottom' | 'start' | 'end';\n    height?: string;\n  };\n  \n  /**\n   * Badge content\n   */\n  readonly badge?: {\n    text: string | number;\n    color?: string;\n    position?: 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end';\n  };\n  \n  /**\n   * Swipe actions\n   */\n  readonly swipeActions?: {\n    start?: React.ReactNode;\n    end?: React.ReactNode;\n  };\n  \n  /**\n   * Haptic feedback on interaction\n   */\n  readonly haptic?: 'light' | 'medium' | 'heavy';\n  \n  /**\n   * Custom CSS classes\n   */\n  readonly className?: string;\n  \n  /**\n   * Children content\n   */\n  readonly children?: React.ReactNode;\n}\n\n// =============================================================================\n// HAPTIC FEEDBACK UTILITY\n// =============================================================================\n\nconst triggerHapticFeedback = (type: IonicCardProps['haptic']) => {\n  if (typeof window !== 'undefined' && 'Haptics' in window) {\n    try {\n      switch (type) {\n        case 'light':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'light' });\n          break;\n        case 'medium':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'medium' });\n          break;\n        case 'heavy':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'heavy' });\n          break;\n      }\n    } catch (error) {\n      console.warn('Haptic feedback not available:', error);\n    }\n  }\n};\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport const Card = forwardRef<HTMLIonCardElement, IonicCardProps>(\n  ({ \n    className,\n    variant = 'default',\n    padding = 'md',\n    color = 'default',\n    header,\n    footer,\n    clickable = false,\n    ripple = true,\n    onClick,\n    hoverable = false,\n    media,\n    badge,\n    swipeActions,\n    haptic,\n    disabled = false,\n    children,\n    ...props \n  }, ref) => {\n    const isInteractive = clickable || !!onClick;\n    \n    const handleClick = useCallback((event: React.MouseEvent) => {\n      if (disabled || !isInteractive) return;\n      \n      if (haptic) {\n        triggerHapticFeedback(haptic);\n      }\n      \n      onClick?.(event);\n    }, [disabled, isInteractive, onClick, haptic]);\n    \n    const renderMedia = () => {\n      if (!media) return null;\n      \n      const mediaElement = (\n        <IonImg \n          src={media.src} \n          alt={media.alt} \n          style={{ height: media.height || '200px', objectFit: 'cover' }}\n        />\n      );\n      \n      if (media.position === 'top' || !media.position) {\n        return <div className=\"ion-card-media ion-card-media-top\">{mediaElement}</div>;\n      }\n      \n      return null; // Handle other positions in card body\n    };\n    \n    const renderHeader = () => {\n      if (!header) return null;\n      \n      return (\n        <IonCardHeader>\n          <div className=\"ion-card-header-content\">\n            {header.avatar && (\n              <div className=\"ion-card-avatar\">\n                {typeof header.avatar === 'string' ? (\n                  <IonAvatar>\n                    <img src={header.avatar} alt=\"Avatar\" />\n                  </IonAvatar>\n                ) : (\n                  header.avatar\n                )}\n              </div>\n            )}\n            \n            <div className=\"ion-card-header-text\">\n              {header.subtitle && (\n                <IonCardSubtitle color={color !== 'default' ? color : undefined}>\n                  {header.subtitle}\n                </IonCardSubtitle>\n              )}\n              {header.title && (\n                <IonCardTitle color={color !== 'default' ? color : undefined}>\n                  {header.title}\n                </IonCardTitle>\n              )}\n            </div>\n            \n            {header.action && (\n              <div className=\"ion-card-header-action\">\n                {header.action}\n              </div>\n            )}\n          </div>\n        </IonCardHeader>\n      );\n    };\n    \n    const renderBadge = () => {\n      if (!badge) return null;\n      \n      return (\n        <div className={cn('ion-card-badge', `ion-card-badge-${badge.position || 'top-end'}`)}>\n          <IonBadge color={badge.color}>\n            {badge.text}\n          </IonBadge>\n        </div>\n      );\n    };\n    \n    const cardContent = (\n      <>\n        {renderBadge()}\n        {renderMedia()}\n        {renderHeader()}\n        \n        {children && (\n          <IonCardContent className={padding === 'none' ? 'ion-no-padding' : undefined}>\n            {media?.position === 'start' && (\n              <div className=\"ion-card-media ion-card-media-start\">\n                <IonImg \n                  src={media.src} \n                  alt={media.alt} \n                  style={{ width: '120px', height: '100%', objectFit: 'cover' }}\n                />\n              </div>\n            )}\n            \n            <div className=\"ion-card-body\">\n              {children}\n            </div>\n            \n            {media?.position === 'end' && (\n              <div className=\"ion-card-media ion-card-media-end\">\n                <IonImg \n                  src={media.src} \n                  alt={media.alt} \n                  style={{ width: '120px', height: '100%', objectFit: 'cover' }}\n                />\n              </div>\n            )}\n          </IonCardContent>\n        )}\n        \n        {footer && (\n          <div className=\"ion-card-footer ion-padding\">\n            {footer}\n          </div>\n        )}\n        \n        {media?.position === 'bottom' && (\n          <div className=\"ion-card-media ion-card-media-bottom\">\n            <IonImg \n              src={media.src} \n              alt={media.alt} \n              style={{ height: media.height || '200px', objectFit: 'cover' }}\n            />\n          </div>\n        )}\n      </>\n    );\n    \n    return (\n      <IonCard\n        ref={ref}\n        className={cn(\n          ionicCardVariants({ variant, padding, color }),\n          isInteractive && 'ion-activatable',\n          hoverable && 'ion-card-hoverable',\n          disabled && 'ion-card-disabled',\n          className\n        )}\n        onClick={handleClick}\n        button={isInteractive}\n        disabled={disabled}\n        {...props}\n      >\n        {isInteractive && ripple && (\n          <IonRippleEffect />\n        )}\n        \n        {cardContent}\n      </IonCard>\n    );\n  }\n);\n\nCard.displayName = 'IonicCard';\n\n// =============================================================================\n// SPECIALIZED CARD VARIANTS\n// =============================================================================\n\n/**\n * Product Card for e-commerce\n */\nexport const ProductCard = forwardRef<HTMLIonCardElement, IonicCardProps & {\n  product: {\n    name: string;\n    price: string;\n    image: string;\n    rating?: number;\n    discount?: string;\n  };\n  onAddToCart?: () => void;\n}>(({ product, onAddToCart, ...props }, ref) => {\n  return (\n    <Card\n      ref={ref}\n      media={{ src: product.image, alt: product.name }}\n      badge={product.discount ? { text: product.discount, color: 'danger' } : undefined}\n      clickable\n      hoverable\n      {...props}\n    >\n      <div className=\"ion-product-card\">\n        <h3 className=\"ion-product-name\">{product.name}</h3>\n        \n        {product.rating && (\n          <div className=\"ion-product-rating\">\n            {/* Rating stars implementation */}\n            <span>{product.rating}/5</span>\n          </div>\n        )}\n        \n        <div className=\"ion-product-footer\">\n          <span className=\"ion-product-price\">{product.price}</span>\n          {onAddToCart && (\n            <IonButton \n              size=\"small\" \n              onClick={(e) => {\n                e.stopPropagation();\n                onAddToCart();\n              }}\n            >\n              Add to Cart\n            </IonButton>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n});\n\nProductCard.displayName = 'IonicProductCard';\n\n/**\n * Profile Card for user profiles\n */\nexport const ProfileCard = forwardRef<HTMLIonCardElement, IonicCardProps & {\n  profile: {\n    name: string;\n    title?: string;\n    avatar: string;\n    bio?: string;\n    stats?: Array<{ label: string; value: string | number }>;\n  };\n  actions?: React.ReactNode;\n}>(({ profile, actions, ...props }, ref) => {\n  return (\n    <Card\n      ref={ref}\n      header={{\n        title: profile.name,\n        subtitle: profile.title,\n        avatar: profile.avatar\n      }}\n      {...props}\n    >\n      {profile.bio && (\n        <p className=\"ion-profile-bio\">{profile.bio}</p>\n      )}\n      \n      {profile.stats && (\n        <div className=\"ion-profile-stats\">\n          {profile.stats.map((stat, index) => (\n            <div key={index} className=\"ion-profile-stat\">\n              <span className=\"ion-profile-stat-value\">{stat.value}</span>\n              <span className=\"ion-profile-stat-label\">{stat.label}</span>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {actions && (\n        <div className=\"ion-profile-actions ion-margin-top\">\n          {actions}\n        </div>\n      )}\n    </Card>\n  );\n});\n\nProfileCard.displayName = 'IonicProfileCard';\n\n/**\n * Media Card for rich content\n */\nexport const MediaCard = forwardRef<HTMLIonCardElement, IonicCardProps & {\n  title: string;\n  description?: string;\n  media: {\n    type: 'image' | 'video';\n    src: string;\n    thumbnail?: string;\n  };\n  chips?: string[];\n  onPlay?: () => void;\n}>(({ title, description, media, chips, onPlay, ...props }, ref) => {\n  return (\n    <Card\n      ref={ref}\n      media={{ \n        src: media.type === 'video' && media.thumbnail ? media.thumbnail : media.src,\n        alt: title\n      }}\n      clickable\n      {...props}\n    >\n      <div className=\"ion-media-card\">\n        <h3 className=\"ion-media-title\">{title}</h3>\n        \n        {description && (\n          <p className=\"ion-media-description\">{description}</p>\n        )}\n        \n        {chips && (\n          <div className=\"ion-media-chips\">\n            {chips.map((chip, index) => (\n              <IonChip key={index} outline>\n                {chip}\n              </IonChip>\n            ))}\n          </div>\n        )}\n        \n        {media.type === 'video' && onPlay && (\n          <IonButton \n            expand=\"block\" \n            onClick={(e) => {\n              e.stopPropagation();\n              onPlay();\n            }}\n          >\n            Play Video\n          </IonButton>\n        )}\n      </div>\n    </Card>\n  );\n});\n\nMediaCard.displayName = 'IonicMediaCard';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const IonicCardMeta = {\n  id: 'ionic-card',\n  name: 'IonicCard',\n  platform: 'ionic',\n  category: 'molecule',\n  description: 'Enhanced card component built with Ionic framework for mobile-first experiences',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Semantic HTML structure',\n      'Proper heading hierarchy',\n      'Interactive states clearly indicated',\n      'Touch-friendly tap targets',\n      'Swipe gesture support',\n      'Screen reader optimized'\n    ]\n  },\n  \n  bundle: {\n    size: '9.2kb',\n    dependencies: ['@ionic/react', '@ionic/core', 'react'],\n    treeshakable: true\n  },\n  \n  features: {\n    rippleEffect: 'Material Design ripple on interaction',\n    swipeActions: 'Native swipe gestures for actions',\n    mediaSupport: 'Flexible media positioning',\n    hapticFeedback: 'Subtle haptic feedback',\n    nativeAnimations: 'Platform-specific transitions',\n    badgeSupport: 'Built-in badge positioning',\n    colorThemes: 'Ionic color system integration'\n  },\n  \n  usage: {\n    basic: '<Card header={{ title: \"Card Title\" }}>Content</Card>',\n    withMedia: '<Card media={{ src: \"image.jpg\" }}>Content</Card>',\n    interactive: '<Card clickable onClick={handleClick}>Clickable Card</Card>',\n    product: '<ProductCard product={productData} onAddToCart={handleAdd} />',\n    profile: '<ProfileCard profile={userData} actions={<Button>Follow</Button>} />',\n    media: '<MediaCard title=\"Video Title\" media={{ type: \"video\", src: \"video.mp4\" }} />'\n  }\n} as const;\n\nexport default Card;"
      }
    ],
    "vanilla": [
      {
        "path": "platforms/vanilla/card.js",
        "type": "registry:component",
        "content": "/**\n * Card Component - Vanilla JS/Web Components Implementation\n * Generated from universal card specification\n * WCAG AAA compliant with semantic HTML structure\n */\n\nimport { UniversalTokens } from '../../core/universal-tokens.js';\nimport { CardSpec } from '../../core/component-specs.js';\n\n// =============================================================================\n// CSS CUSTOM PROPERTIES FROM TOKENS\n// =============================================================================\n\nconst cssVariables = UniversalTokens.converters.toCSSVariables({\n  colors: UniversalTokens.colors,\n  spacing: UniversalTokens.spacing,\n  typography: UniversalTokens.typography,\n  shadows: UniversalTokens.shadows,\n  borders: UniversalTokens.borders,\n  animations: UniversalTokens.animations\n});\n\n// =============================================================================\n// CARD WEB COMPONENT\n// =============================================================================\n\nclass XaheenCard extends HTMLElement {\n  static get observedAttributes() {\n    return ['variant', 'padding', 'hoverable', 'clickable', 'aria-label', 'role'];\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this._onClick = this._onClick.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onMouseEnter = this._onMouseEnter.bind(this);\n    this._onMouseLeave = this._onMouseLeave.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n  }\n\n  // =============================================================================\n  // LIFECYCLE METHODS\n  // =============================================================================\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n    this.setupAccessibility();\n  }\n\n  disconnectedCallback() {\n    this.removeEventListeners();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      this.render();\n      if (name === 'clickable' || name === 'role') {\n        this.setupAccessibility();\n      }\n    }\n  }\n\n  // =============================================================================\n  // GETTERS & SETTERS\n  // =============================================================================\n\n  get variant() {\n    return this.getAttribute('variant') || 'default';\n  }\n\n  set variant(value) {\n    this.setAttribute('variant', value);\n  }\n\n  get padding() {\n    return this.getAttribute('padding') || 'md';\n  }\n\n  set padding(value) {\n    this.setAttribute('padding', value);\n  }\n\n  get hoverable() {\n    return this.hasAttribute('hoverable');\n  }\n\n  set hoverable(value) {\n    if (value) {\n      this.setAttribute('hoverable', '');\n    } else {\n      this.removeAttribute('hoverable');\n    }\n  }\n\n  get clickable() {\n    return this.hasAttribute('clickable');\n  }\n\n  set clickable(value) {\n    if (value) {\n      this.setAttribute('clickable', '');\n    } else {\n      this.removeAttribute('clickable');\n    }\n  }\n\n  // =============================================================================\n  // RENDER METHOD\n  // =============================================================================\n\n  render() {\n    const styles = this.createStyles();\n    const variantClass = `card--${this.variant}`;\n    const paddingClass = `card--padding-${this.padding}`;\n    const stateClasses = this.getStateClasses();\n    \n    const cardClass = [\n      'card',\n      variantClass,\n      paddingClass,\n      ...stateClasses\n    ].filter(Boolean).join(' ');\n\n    const hasHeader = this.querySelector('[slot=\"header\"]');\n    const hasFooter = this.querySelector('[slot=\"footer\"]');\n\n    this.shadowRoot.innerHTML = `\n      <style>${styles}</style>\n      <article \n        class=\"${cardClass}\"\n        part=\"card\"\n        ${this.clickable ? 'tabindex=\"0\"' : ''}\n        ${this.getAttribute('aria-label') ? `aria-label=\"${this.getAttribute('aria-label')}\"` : ''}\n        ${this.getAttribute('aria-describedby') ? `aria-describedby=\"${this.getAttribute('aria-describedby')}\"` : ''}\n      >\n        ${hasHeader ? `\n          <header class=\"card__header\" part=\"header\">\n            <slot name=\"header\"></slot>\n          </header>\n        ` : ''}\n        \n        <div class=\"card__content\" part=\"content\">\n          <slot></slot>\n        </div>\n        \n        ${hasFooter ? `\n          <footer class=\"card__footer\" part=\"footer\">\n            <slot name=\"footer\"></slot>\n          </footer>\n        ` : ''}\n      </article>\n    `;\n  }\n\n  // =============================================================================\n  // STYLE GENERATION\n  // =============================================================================\n\n  createStyles() {\n    return `\n      /* CSS Custom Properties */\n      :host {\n        ${Object.entries(cssVariables).map(([key, value]) => `${key}: ${value};`).join('\\n        ')}\n        \n        display: block;\n        font-family: var(--typography-fontFamily-sans);\n      }\n\n      /* Base card styles */\n      .card {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        border-radius: var(--borders-radius-lg);\n        transition: all var(--animations-duration-normal)ms var(--animations-easing-easeInOut);\n        box-sizing: border-box;\n        overflow: hidden;\n      }\n\n      /* Variant styles */\n      .card--default {\n        background-color: white;\n        border: 1px solid var(--colors-secondary-200);\n        box-shadow: var(--shadows-card-default);\n      }\n\n      .card--outlined {\n        background-color: white;\n        border: 2px solid var(--colors-secondary-300);\n        box-shadow: none;\n      }\n\n      .card--filled {\n        background-color: var(--colors-secondary-100);\n        border: none;\n        box-shadow: none;\n      }\n\n      .card--elevated {\n        background-color: white;\n        border: none;\n        box-shadow: var(--shadows-elevation-4);\n      }\n\n      /* Padding variants */\n      .card--padding-none {\n        padding: 0;\n      }\n\n      .card--padding-sm {\n        padding: var(--spacing-4);\n      }\n\n      .card--padding-md {\n        padding: var(--spacing-6);\n      }\n\n      .card--padding-lg {\n        padding: var(--spacing-8);\n      }\n\n      .card--padding-xl {\n        padding: var(--spacing-10);\n      }\n\n      /* Header and footer styles */\n      .card__header,\n      .card__footer {\n        margin: calc(var(--spacing-6) * -1);\n        padding: var(--spacing-4) var(--spacing-6);\n      }\n\n      .card__header {\n        margin-bottom: var(--spacing-6);\n        border-bottom: 1px solid var(--colors-secondary-200);\n        font-weight: var(--typography-fontWeight-semibold);\n      }\n\n      .card__footer {\n        margin-top: var(--spacing-6);\n        margin-bottom: calc(var(--spacing-6) * -1);\n        border-top: 1px solid var(--colors-secondary-200);\n      }\n\n      /* Content area */\n      .card__content {\n        flex: 1;\n        min-height: 0;\n      }\n\n      /* Padding adjustments for header/footer */\n      .card--padding-none .card__header,\n      .card--padding-none .card__footer {\n        margin: 0;\n        padding: var(--spacing-4);\n      }\n\n      .card--padding-sm .card__header,\n      .card--padding-sm .card__footer {\n        margin: calc(var(--spacing-4) * -1);\n        margin-bottom: var(--spacing-4);\n        padding: var(--spacing-3) var(--spacing-4);\n      }\n\n      .card--padding-sm .card__footer {\n        margin-top: var(--spacing-4);\n        margin-bottom: calc(var(--spacing-4) * -1);\n      }\n\n      /* State styles */\n      .card--hoverable {\n        cursor: default;\n      }\n\n      .card--hoverable:hover {\n        transform: translateY(-2px);\n        box-shadow: var(--shadows-card-hover);\n      }\n\n      .card--clickable {\n        cursor: pointer;\n        user-select: none;\n      }\n\n      .card--clickable:hover {\n        transform: translateY(-2px);\n        box-shadow: var(--shadows-card-hover);\n      }\n\n      .card--clickable:active {\n        transform: translateY(0);\n        box-shadow: var(--shadows-card-default);\n      }\n\n      /* Focus styles - WCAG AAA compliant */\n      .card--clickable:focus {\n        outline: 3px solid var(--colors-primary-500);\n        outline-offset: 2px;\n      }\n\n      .card--clickable:focus:not(:focus-visible) {\n        outline: none;\n      }\n\n      /* High contrast mode support */\n      @media (prefers-contrast: high) {\n        .card {\n          border: 2px solid currentColor;\n        }\n        \n        .card--clickable:focus {\n          outline-width: 4px;\n        }\n      }\n\n      /* Reduced motion support */\n      @media (prefers-reduced-motion: reduce) {\n        .card {\n          transition: none;\n        }\n        \n        .card--hoverable:hover,\n        .card--clickable:hover,\n        .card--clickable:active {\n          transform: none;\n        }\n      }\n\n      /* Dark mode support */\n      @media (prefers-color-scheme: dark) {\n        .card--default,\n        .card--outlined,\n        .card--elevated {\n          background-color: var(--colors-secondary-800);\n          border-color: var(--colors-secondary-700);\n          color: var(--colors-secondary-100);\n        }\n\n        .card--filled {\n          background-color: var(--colors-secondary-900);\n          color: var(--colors-secondary-100);\n        }\n\n        .card__header,\n        .card__footer {\n          border-color: var(--colors-secondary-700);\n        }\n      }\n\n      /* Print styles */\n      @media print {\n        .card {\n          box-shadow: none !important;\n          border: 1px solid #000 !important;\n          break-inside: avoid;\n        }\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 640px) {\n        .card--padding-lg {\n          padding: var(--spacing-6);\n        }\n\n        .card--padding-xl {\n          padding: var(--spacing-8);\n        }\n      }\n    `;\n  }\n\n  // =============================================================================\n  // HELPER METHODS\n  // =============================================================================\n\n  getStateClasses() {\n    const classes = [];\n    if (this.hoverable) classes.push('card--hoverable');\n    if (this.clickable) classes.push('card--clickable');\n    return classes;\n  }\n\n  // =============================================================================\n  // EVENT HANDLING\n  // =============================================================================\n\n  setupEventListeners() {\n    const card = this.shadowRoot.querySelector('.card');\n    if (!card) return;\n\n    if (this.clickable) {\n      card.addEventListener('click', this._onClick);\n      card.addEventListener('keydown', this._onKeyDown);\n    }\n\n    if (this.hoverable || this.clickable) {\n      card.addEventListener('mouseenter', this._onMouseEnter);\n      card.addEventListener('mouseleave', this._onMouseLeave);\n      card.addEventListener('focus', this._onFocus);\n      card.addEventListener('blur', this._onBlur);\n    }\n  }\n\n  removeEventListeners() {\n    const card = this.shadowRoot.querySelector('.card');\n    if (!card) return;\n\n    card.removeEventListener('click', this._onClick);\n    card.removeEventListener('keydown', this._onKeyDown);\n    card.removeEventListener('mouseenter', this._onMouseEnter);\n    card.removeEventListener('mouseleave', this._onMouseLeave);\n    card.removeEventListener('focus', this._onFocus);\n    card.removeEventListener('blur', this._onBlur);\n  }\n\n  _onClick(event) {\n    if (!this.clickable) return;\n\n    // Dispatch custom click event\n    this.dispatchEvent(new CustomEvent('xaheen-card-click', {\n      detail: { originalEvent: event },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onKeyDown(event) {\n    if (!this.clickable) return;\n\n    // Handle enter and space for activation\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this._onClick(event);\n    }\n  }\n\n  _onMouseEnter(event) {\n    // Dispatch custom mouse enter event\n    this.dispatchEvent(new CustomEvent('xaheen-card-mouseenter', {\n      detail: { originalEvent: event },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onMouseLeave(event) {\n    // Dispatch custom mouse leave event\n    this.dispatchEvent(new CustomEvent('xaheen-card-mouseleave', {\n      detail: { originalEvent: event },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onFocus(event) {\n    // Dispatch custom focus event\n    this.dispatchEvent(new CustomEvent('xaheen-card-focus', {\n      detail: { originalEvent: event },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onBlur(event) {\n    // Dispatch custom blur event\n    this.dispatchEvent(new CustomEvent('xaheen-card-blur', {\n      detail: { originalEvent: event },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  // =============================================================================\n  // ACCESSIBILITY\n  // =============================================================================\n\n  setupAccessibility() {\n    const card = this.shadowRoot.querySelector('.card');\n    if (!card) return;\n\n    // Set appropriate role based on usage\n    if (!this.hasAttribute('role')) {\n      if (this.clickable) {\n        this.setAttribute('role', 'button');\n        card.setAttribute('role', 'button');\n      } else {\n        this.setAttribute('role', 'article');\n        card.setAttribute('role', 'article');\n      }\n    }\n\n    // Ensure proper keyboard navigation for clickable cards\n    if (this.clickable) {\n      if (!card.hasAttribute('tabindex')) {\n        card.setAttribute('tabindex', '0');\n      }\n      card.setAttribute('aria-pressed', 'false');\n    }\n\n    // Add live region for dynamic content\n    const content = this.shadowRoot.querySelector('.card__content');\n    if (content && this.hasAttribute('data-live-region')) {\n      content.setAttribute('aria-live', 'polite');\n      content.setAttribute('aria-atomic', 'true');\n    }\n  }\n}\n\n// =============================================================================\n// REGISTER CUSTOM ELEMENT\n// =============================================================================\n\nif (!customElements.get('xaheen-card')) {\n  customElements.define('xaheen-card', XaheenCard);\n}\n\nexport default XaheenCard;"
      }
    ],
    "headless-ui": [
      {
        "path": "platforms/headless-ui/card.tsx",
        "type": "registry:component",
        "content": "/**\n * Headless UI Card Implementation\n * Enhanced card component using Headless UI Disclosure for expandable content\n * Generated from universal CardSpec\n */\n\nimport React, { forwardRef, Fragment } from 'react';\nimport { Disclosure, Transition } from '@headlessui/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\nimport { UniversalTokens } from '../../core/universal-tokens';\n\n// =============================================================================\n// VARIANT DEFINITIONS\n// =============================================================================\n\nconst cardVariants = cva(\n  [\n    'rounded-lg text-card-foreground transition-all',\n    'data-[hover]:shadow-lg data-[hover]:scale-[1.02]',\n    'data-[focus]:outline-none data-[focus]:ring-2 data-[focus]:ring-primary data-[focus]:ring-offset-2'\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'border bg-card shadow-sm',\n          'hover:shadow-md'\n        ],\n        outlined: [\n          'border-2 bg-card shadow-none',\n          'hover:border-primary/50'\n        ],\n        filled: [\n          'border-0 bg-muted shadow-none',\n          'hover:bg-muted/80'\n        ],\n        elevated: [\n          'border-0 bg-card shadow-lg',\n          'hover:shadow-xl'\n        ]\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md'\n    }\n  }\n);\n\nconst cardHeaderVariants = cva(\n  'flex items-center justify-between',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pb-0',\n        md: 'p-6 pb-0',\n        lg: 'p-8 pb-0',\n        xl: 'p-10 pb-0'\n      }\n    }\n  }\n);\n\nconst cardContentVariants = cva(\n  '',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      }\n    }\n  }\n);\n\nconst cardFooterVariants = cva(\n  'flex items-center',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0',\n        xl: 'p-10 pt-0'\n      }\n    }\n  }\n);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface HeadlessCardProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onClick'>,\n    VariantProps<typeof cardVariants> {\n  /**\n   * Whether the card should have hover effects\n   */\n  readonly hoverable?: boolean;\n  \n  /**\n   * Whether the card is interactive/clickable\n   */\n  readonly clickable?: boolean;\n  \n  /**\n   * Click handler for clickable cards\n   */\n  readonly onClick?: () => void;\n  \n  /**\n   * Whether the card is collapsible (uses Disclosure)\n   */\n  readonly collapsible?: boolean;\n  \n  /**\n   * Default open state for collapsible cards\n   */\n  readonly defaultOpen?: boolean;\n  \n  /**\n   * Controlled open state\n   */\n  readonly open?: boolean;\n  \n  /**\n   * Callback when open state changes\n   */\n  readonly onOpenChange?: (open: boolean) => void;\n  \n  /**\n   * Custom render prop for card container\n   */\n  readonly as?: React.ElementType;\n}\n\nexport interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Title content\n   */\n  readonly title?: React.ReactNode;\n  \n  /**\n   * Subtitle content\n   */\n  readonly subtitle?: React.ReactNode;\n  \n  /**\n   * Action buttons or elements\n   */\n  readonly actions?: React.ReactNode;\n  \n  /**\n   * Whether this header is for a collapsible card\n   */\n  readonly collapsible?: boolean;\n}\n\nexport interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Padding override\n   */\n  readonly padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Padding override\n   */\n  readonly padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  \n  /**\n   * Alignment of footer content\n   */\n  readonly align?: 'start' | 'center' | 'end' | 'between';\n}\n\n// =============================================================================\n// BASIC CARD COMPONENT\n// =============================================================================\n\nconst BasicCard = forwardRef<HTMLDivElement, HeadlessCardProps>(\n  ({ \n    className,\n    variant,\n    padding,\n    hoverable = false,\n    clickable = false,\n    onClick,\n    as: Component = 'div',\n    children,\n    ...props \n  }, ref) => {\n    const isInteractive = clickable || hoverable;\n    \n    return (\n      <Component\n        ref={ref}\n        className={cn(\n          cardVariants({ variant, padding, className }),\n          isInteractive && 'cursor-pointer',\n          hoverable && 'transition-transform hover:scale-[1.02]'\n        )}\n        onClick={clickable ? onClick : undefined}\n        role={clickable ? 'button' : undefined}\n        tabIndex={clickable ? 0 : undefined}\n        onKeyDown={clickable ? (e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            onClick?.();\n          }\n        } : undefined}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n\nBasicCard.displayName = 'BasicCard';\n\n// =============================================================================\n// COLLAPSIBLE CARD COMPONENT\n// =============================================================================\n\nconst CollapsibleCard = forwardRef<HTMLDivElement, HeadlessCardProps>(\n  ({ \n    className,\n    variant,\n    padding,\n    defaultOpen = false,\n    open: controlledOpen,\n    onOpenChange,\n    children,\n    ...props \n  }, ref) => {\n    const isControlled = controlledOpen !== undefined;\n    \n    if (isControlled) {\n      return (\n        <Disclosure as=\"div\" ref={ref}>\n          <div\n            className={cn(cardVariants({ variant, padding, className }))}\n            {...props}\n          >\n            {children}\n          </div>\n        </Disclosure>\n      );\n    }\n    \n    return (\n      <Disclosure as=\"div\" defaultOpen={defaultOpen} ref={ref}>\n        {({ open }) => (\n          <>\n            {onOpenChange && onOpenChange(open)}\n            <div\n              className={cn(cardVariants({ variant, padding, className }))}\n              {...props}\n            >\n              {children}\n            </div>\n          </>\n        )}\n      </Disclosure>\n    );\n  }\n);\n\nCollapsibleCard.displayName = 'CollapsibleCard';\n\n// =============================================================================\n// CARD HEADER COMPONENT\n// =============================================================================\n\nexport const CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>(\n  ({ \n    className,\n    title,\n    subtitle,\n    actions,\n    collapsible = false,\n    children,\n    ...props \n  }, ref) => {\n    const content = (\n      <>\n        <div className=\"space-y-1.5\">\n          {title && (\n            <h3 className=\"text-2xl font-semibold leading-none tracking-tight\">\n              {title}\n            </h3>\n          )}\n          {subtitle && (\n            <p className=\"text-sm text-muted-foreground\">\n              {subtitle}\n            </p>\n          )}\n          {children}\n        </div>\n        {(actions || collapsible) && (\n          <div className=\"flex items-center gap-2\">\n            {actions}\n            {collapsible && (\n              <ChevronIcon className=\"h-5 w-5 transition-transform ui-open:rotate-180\" />\n            )}\n          </div>\n        )}\n      </>\n    );\n    \n    if (collapsible) {\n      return (\n        <Disclosure.Button\n          ref={ref}\n          className={cn(\n            cardHeaderVariants({ padding: 'md' }),\n            'w-full cursor-pointer select-none focus:outline-none',\n            className\n          )}\n          {...props}\n        >\n          {content}\n        </Disclosure.Button>\n      );\n    }\n    \n    return (\n      <div\n        ref={ref}\n        className={cn(cardHeaderVariants({ padding: 'md' }), className)}\n        {...props}\n      >\n        {content}\n      </div>\n    );\n  }\n);\n\nCardHeader.displayName = 'CardHeader';\n\n// =============================================================================\n// CARD CONTENT COMPONENT\n// =============================================================================\n\nexport const CardContent = forwardRef<HTMLDivElement, CardContentProps>(\n  ({ className, padding = 'md', children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(cardContentVariants({ padding }), className)}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nCardContent.displayName = 'CardContent';\n\n// =============================================================================\n// COLLAPSIBLE CARD CONTENT\n// =============================================================================\n\nexport const CollapsibleCardContent = forwardRef<HTMLDivElement, CardContentProps>(\n  ({ className, padding = 'md', children, ...props }, ref) => {\n    return (\n      <Transition\n        as={Fragment}\n        enter=\"transition ease-out duration-200\"\n        enterFrom=\"transform opacity-0 scale-95\"\n        enterTo=\"transform opacity-100 scale-100\"\n        leave=\"transition ease-in duration-150\"\n        leaveFrom=\"transform opacity-100 scale-100\"\n        leaveTo=\"transform opacity-0 scale-95\"\n      >\n        <Disclosure.Panel\n          ref={ref}\n          className={cn(cardContentVariants({ padding }), className)}\n          {...props}\n        >\n          {children}\n        </Disclosure.Panel>\n      </Transition>\n    );\n  }\n);\n\nCollapsibleCardContent.displayName = 'CollapsibleCardContent';\n\n// =============================================================================\n// CARD FOOTER COMPONENT\n// =============================================================================\n\nexport const CardFooter = forwardRef<HTMLDivElement, CardFooterProps>(\n  ({ \n    className, \n    padding = 'md', \n    align = 'end',\n    children, \n    ...props \n  }, ref) => {\n    const alignmentClasses = {\n      start: 'justify-start',\n      center: 'justify-center',\n      end: 'justify-end',\n      between: 'justify-between'\n    };\n    \n    return (\n      <div\n        ref={ref}\n        className={cn(\n          cardFooterVariants({ padding }),\n          alignmentClasses[align],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nCardFooter.displayName = 'CardFooter';\n\n// =============================================================================\n// MAIN CARD EXPORT\n// =============================================================================\n\nexport const Card = forwardRef<HTMLDivElement, HeadlessCardProps>(\n  ({ collapsible = false, ...props }, ref) => {\n    if (collapsible) {\n      return <CollapsibleCard ref={ref} {...props} />;\n    }\n    \n    return <BasicCard ref={ref} {...props} />;\n  }\n);\n\nCard.displayName = 'HeadlessCard';\n\n// =============================================================================\n// SPECIALIZED CARD VARIANTS\n// =============================================================================\n\n/**\n * Interactive Card with built-in hover and click states\n */\nexport const InteractiveCard = forwardRef<HTMLDivElement, HeadlessCardProps>(\n  (props, ref) => {\n    return (\n      <Card\n        ref={ref}\n        hoverable\n        clickable\n        className=\"transition-all hover:shadow-lg active:scale-[0.98]\"\n        {...props}\n      />\n    );\n  }\n);\n\nInteractiveCard.displayName = 'InteractiveCard';\n\n/**\n * Feature Card for showcasing features\n */\nexport const FeatureCard = forwardRef<HTMLDivElement, HeadlessCardProps & {\n  icon?: React.ReactNode;\n  title: string;\n  description: string;\n}>(\n  ({ icon, title, description, children, ...props }, ref) => {\n    return (\n      <Card ref={ref} {...props}>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {icon && (\n              <div className=\"inline-flex h-12 w-12 items-center justify-center rounded-lg bg-primary/10 text-primary\">\n                {icon}\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold\">{title}</h3>\n              <p className=\"text-muted-foreground\">{description}</p>\n            </div>\n            {children}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n);\n\nFeatureCard.displayName = 'FeatureCard';\n\n/**\n * Stat Card for displaying metrics\n */\nexport const StatCard = forwardRef<HTMLDivElement, HeadlessCardProps & {\n  label: string;\n  value: string | number;\n  trend?: 'up' | 'down' | 'neutral';\n  trendValue?: string;\n}>(\n  ({ label, value, trend, trendValue, ...props }, ref) => {\n    return (\n      <Card ref={ref} {...props}>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">{label}</p>\n            <div className=\"flex items-baseline justify-between\">\n              <p className=\"text-3xl font-bold\">{value}</p>\n              {trend && (\n                <div className={cn(\n                  'flex items-center gap-1 text-sm font-medium',\n                  trend === 'up' && 'text-green-600',\n                  trend === 'down' && 'text-red-600',\n                  trend === 'neutral' && 'text-muted-foreground'\n                )}>\n                  {trend === 'up' && <TrendUpIcon className=\"h-4 w-4\" />}\n                  {trend === 'down' && <TrendDownIcon className=\"h-4 w-4\" />}\n                  {trendValue && <span>{trendValue}</span>}\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n);\n\nStatCard.displayName = 'StatCard';\n\n// =============================================================================\n// ICON COMPONENTS\n// =============================================================================\n\nconst ChevronIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst TrendUpIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst TrendDownIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1V9a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const HeadlessCardMeta = {\n  id: 'headless-card',\n  name: 'HeadlessCard',\n  platform: 'headless-ui',\n  category: 'molecule',\n  description: 'Enhanced card component with Headless UI Disclosure for collapsible content',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Keyboard navigation for interactive cards',\n      'Proper ARIA roles and states',\n      'Focus management for collapsible content',\n      'Screen reader announcements',\n      'Semantic HTML structure'\n    ]\n  },\n  \n  bundle: {\n    size: '4.5kb',\n    dependencies: ['@headlessui/react', 'class-variance-authority'],\n    treeshakable: true\n  },\n  \n  features: {\n    variants: 'Multiple visual variants (default, outlined, filled, elevated)',\n    collapsible: 'Built-in collapsible functionality with Disclosure',\n    interactive: 'Clickable and hoverable states',\n    composition: 'Composable with header, content, and footer',\n    specialized: 'Feature, Stat, and Interactive card variants'\n  },\n  \n  usage: {\n    basic: `\n      <Card>\n        <CardHeader title=\"Card Title\" subtitle=\"Optional subtitle\" />\n        <CardContent>\n          <p>Card content goes here</p>\n        </CardContent>\n        <CardFooter>\n          <button>Action</button>\n        </CardFooter>\n      </Card>\n    `,\n    collapsible: `\n      <Card collapsible defaultOpen>\n        <CardHeader title=\"Collapsible Card\" collapsible />\n        <CollapsibleCardContent>\n          <p>This content can be toggled</p>\n        </CollapsibleCardContent>\n      </Card>\n    `,\n    interactive: `\n      <InteractiveCard onClick={() => console.log('clicked')}>\n        <CardContent>\n          <p>Click me!</p>\n        </CardContent>\n      </InteractiveCard>\n    `,\n    feature: `\n      <FeatureCard\n        icon={<Icon />}\n        title=\"Amazing Feature\"\n        description=\"This feature will blow your mind\"\n      />\n    `,\n    stat: `\n      <StatCard\n        label=\"Total Revenue\"\n        value=\"$45,231\"\n        trend=\"up\"\n        trendValue=\"+12.5%\"\n      />\n    `\n  }\n} as const;\n\nexport default Card;"
      }
    ],
    "radix": [
      {
        "path": "platforms/radix/card.tsx",
        "type": "registry:component",
        "content": "/**\n * Radix Platform Card Component\n * Enhanced with Radix UI data attributes and patterns\n */\n\nimport React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\nconst cardVariants = cva(\n  [\n    'bg-card text-card-foreground',\n    'border border-border',\n    'transition-all duration-200'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'shadow-md hover:shadow-lg',\n        elevated: 'shadow-lg hover:shadow-xl',\n        outline: 'shadow-sm hover:shadow-md',\n        ghost: 'shadow-none hover:shadow-sm',\n      },\n      padding: {\n        none: 'p-0',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8',\n        xl: 'p-10'\n      },\n      rounded: {\n        none: 'rounded-none',\n        sm: 'rounded-md',\n        md: 'rounded-lg',\n        lg: 'rounded-xl',\n        xl: 'rounded-2xl',\n        full: 'rounded-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      rounded: 'lg'\n    }\n  }\n);\n\nconst cardHeaderVariants = cva(\n  'flex flex-col space-y-1.5',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4',\n        md: 'p-6',\n        lg: 'p-8'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\nconst cardContentVariants = cva(\n  [],\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\nconst cardFooterVariants = cva(\n  'flex items-center',\n  {\n    variants: {\n      padding: {\n        none: '',\n        sm: 'p-4 pt-0',\n        md: 'p-6 pt-0',\n        lg: 'p-8 pt-0'\n      }\n    },\n    defaultVariants: {\n      padding: 'md'\n    }\n  }\n);\n\n// Card Root Component\nexport interface RadixCardProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardVariants> {}\n\nexport const Card = React.forwardRef<HTMLDivElement, RadixCardProps>(\n  ({ className, variant, padding, rounded, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardVariants({ variant, padding, rounded }), className)}\n      data-radix-card=\"\"\n      {...props}\n    />\n  )\n);\n\nCard.displayName = 'RadixCard';\n\n// Card Header Component\nexport interface CardHeaderProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardHeaderVariants> {}\n\nexport const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardHeaderVariants({ padding }), className)}\n      data-radix-card-header=\"\"\n      {...props}\n    />\n  )\n);\n\nCardHeader.displayName = 'CardHeader';\n\n// Card Title Component\nexport interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  readonly as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(\n  ({ className, as: Component = 'h3', ...props }, ref) => (\n    <Component\n      ref={ref}\n      className={cn(\n        'text-2xl font-semibold leading-none tracking-tight',\n        className\n      )}\n      data-radix-card-title=\"\"\n      {...props}\n    />\n  )\n);\n\nCardTitle.displayName = 'CardTitle';\n\n// Card Description Component\nexport interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>(\n  ({ className, ...props }, ref) => (\n    <p\n      ref={ref}\n      className={cn('text-sm text-muted-foreground', className)}\n      data-radix-card-description=\"\"\n      {...props}\n    />\n  )\n);\n\nCardDescription.displayName = 'CardDescription';\n\n// Card Content Component\nexport interface CardContentProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardContentVariants> {}\n\nexport const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardContentVariants({ padding }), className)}\n      data-radix-card-content=\"\"\n      {...props}\n    />\n  )\n);\n\nCardContent.displayName = 'CardContent';\n\n// Card Footer Component\nexport interface CardFooterProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof cardFooterVariants> {}\n\nexport const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(\n  ({ className, padding, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(cardFooterVariants({ padding }), className)}\n      data-radix-card-footer=\"\"\n      {...props}\n    />\n  )\n);\n\nCardFooter.displayName = 'CardFooter';\n\nexport { cardVariants };"
      }
    ]
  },
  "platform": "vue"
}