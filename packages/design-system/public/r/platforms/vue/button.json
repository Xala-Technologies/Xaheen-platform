{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "Professional button component with NSM classification support",
  "author": "Xaheen Technologies",
  "category": "components",
  "categories": [
    "components",
    "form",
    "action"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "platforms/vue/Button.vue",
      "type": "registry:component",
      "content": "<!--\nVue 3 Button Implementation\nGenerated from universal ButtonSpec\n-->\n\n<template>\n  <button\n    :class=\"buttonClasses\"\n    :disabled=\"isDisabled\"\n    :aria-label=\"ariaLabel\"\n    :aria-disabled=\"isDisabled\"\n    :type=\"type\"\n    @click=\"handleClick\"\n    v-bind=\"$attrs\"\n  >\n    <!-- Loading spinner -->\n    <LoadingSpinner \n      v-if=\"loading\" \n      :size=\"spinnerSize\" \n      :class=\"'mr-2'\"\n    />\n    \n    <!-- Prefix icon -->\n    <span \n      v-if=\"!loading && $slots.icon\" \n      :class=\"'shrink-0 mr-2'\"\n    >\n      <slot name=\"icon\" />\n    </span>\n\n    <!-- Button content -->\n    <span \n      v-if=\"$slots.default\"\n      :class=\"[loading && 'opacity-70']\"\n    >\n      <slot />\n    </span>\n\n    <!-- Suffix icon -->\n    <span \n      v-if=\"!loading && $slots.suffixIcon\" \n      :class=\"'shrink-0 ml-2'\"\n    >\n      <slot name=\"suffixIcon\" />\n    </span>\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, useAttrs } from 'vue';\n\n// =============================================================================\n// COMPONENT PROPS\n// =============================================================================\n\nexport interface ButtonProps {\n  /**\n   * Visual style variant\n   */\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  \n  /**\n   * Size of the button\n   */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  \n  /**\n   * Whether button is disabled\n   */\n  disabled?: boolean;\n  \n  /**\n   * Whether button is in loading state\n   */\n  loading?: boolean;\n  \n  /**\n   * Whether button should take full width\n   */\n  fullWidth?: boolean;\n  \n  /**\n   * Button type attribute\n   */\n  type?: 'button' | 'submit' | 'reset';\n  \n  /**\n   * Accessibility label\n   */\n  ariaLabel?: string;\n}\n\nconst props = withDefaults(defineProps<ButtonProps>(), {\n  variant: 'primary',\n  size: 'md',\n  disabled: false,\n  loading: false,\n  fullWidth: false,\n  type: 'button'\n});\n\n// =============================================================================\n// EMITS\n// =============================================================================\n\nconst emit = defineEmits<{\n  click: [event: MouseEvent];\n}>();\n\n// =============================================================================\n// COMPUTED PROPERTIES\n// =============================================================================\n\nconst isDisabled = computed(() => props.disabled || props.loading);\n\nconst spinnerSize = computed(() => {\n  if (props.size === 'xs') return 'sm';\n  if (props.size === 'xl') return 'lg';\n  return 'md';\n});\n\nconst buttonClasses = computed(() => {\n  const baseClasses = [\n    'inline-flex items-center justify-center gap-2',\n    'rounded-md text-sm font-medium transition-colors',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'select-none'\n  ];\n\n  // Variant classes\n  const variantClasses = {\n    primary: [\n      'bg-primary text-primary-foreground',\n      'hover:bg-primary/90',\n      'focus-visible:ring-primary'\n    ],\n    secondary: [\n      'bg-secondary text-secondary-foreground',\n      'hover:bg-secondary/80',\n      'focus-visible:ring-secondary'\n    ],\n    outline: [\n      'border border-input bg-background',\n      'hover:bg-accent hover:text-accent-foreground',\n      'focus-visible:ring-primary'\n    ],\n    ghost: [\n      'hover:bg-accent hover:text-accent-foreground',\n      'focus-visible:ring-primary'\n    ],\n    destructive: [\n      'bg-destructive text-destructive-foreground',\n      'hover:bg-destructive/90',\n      'focus-visible:ring-destructive'\n    ]\n  };\n\n  // Size classes\n  const sizeClasses = {\n    xs: 'h-8 px-3 text-xs',\n    sm: 'h-10 px-4 text-sm',\n    md: 'h-12 px-6 text-base',\n    lg: 'h-14 px-8 text-lg',\n    xl: 'h-16 px-10 text-xl'\n  };\n\n  return [\n    ...baseClasses,\n    ...variantClasses[props.variant],\n    sizeClasses[props.size],\n    props.fullWidth && 'w-full'\n  ].filter(Boolean);\n});\n\n// =============================================================================\n// EVENT HANDLERS\n// =============================================================================\n\nconst handleClick = (event: MouseEvent) => {\n  if (!isDisabled.value) {\n    emit('click', event);\n  }\n};\n\n// =============================================================================\n// ATTRS INHERITANCE\n// =============================================================================\n\nconst attrs = useAttrs();\n\n// Exclude Vue-specific attrs from being passed to the button element\ndefineOptions({\n  inheritAttrs: false\n});\n</script>\n\n<script lang=\"ts\">\n/**\n * Loading Spinner Component\n */\nimport { defineComponent, h } from 'vue';\n\nconst LoadingSpinner = defineComponent({\n  name: 'LoadingSpinner',\n  props: {\n    size: {\n      type: String as () => 'sm' | 'md' | 'lg',\n      default: 'md'\n    }\n  },\n  setup(props) {\n    const sizeClasses = {\n      sm: 'h-3 w-3',\n      md: 'h-4 w-4',\n      lg: 'h-5 w-5'\n    };\n\n    return () =>\n      h('svg', {\n        class: `animate-spin ${sizeClasses[props.size]}`,\n        xmlns: 'http://www.w3.org/2000/svg',\n        fill: 'none',\n        viewBox: '0 0 24 24'\n      }, [\n        h('circle', {\n          class: 'opacity-25',\n          cx: '12',\n          cy: '12',\n          r: '10',\n          stroke: 'currentColor',\n          'stroke-width': '4'\n        }),\n        h('path', {\n          class: 'opacity-75',\n          fill: 'currentColor',\n          d: 'm4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'\n        })\n      ]);\n  }\n});\n\nexport default LoadingSpinner;\n</script>\n\n<style scoped>\n/* Component-specific styles if needed */\n</style>"
    }
  ],
  "docs": "Remember to import the LoadingSpinner component if you plan to use the loading state.",
  "meta": {
    "designTokens": [
      "spacing",
      "colors",
      "shadows"
    ],
    "minimumHeight": "48px",
    "touchTarget": "44px"
  },
  "platformFiles": {
    "react": [
      {
        "path": "platforms/react/button.tsx",
        "type": "registry:component",
        "content": "/**\n * React Button Implementation\n * Generated from universal ButtonSpec\n */\n\nimport React, { forwardRef } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// VARIANT DEFINITIONS (Generated from ButtonSpec)\n// =============================================================================\n\nconst buttonVariants = cva(\n  // Base classes\n  [\n    'inline-flex items-center justify-center gap-2',\n    'rounded-md text-sm font-medium transition-colors',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'select-none'\n  ],\n  {\n    variants: {\n      variant: {\n        primary: [\n          'bg-primary text-primary-foreground',\n          'hover:bg-primary/90',\n          'focus-visible:ring-primary'\n        ],\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80',\n          'focus-visible:ring-secondary'\n        ],\n        outline: [\n          'border border-input bg-background',\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary'\n        ],\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary'\n        ],\n        destructive: [\n          'bg-destructive text-destructive-foreground',\n          'hover:bg-destructive/90',\n          'focus-visible:ring-destructive'\n        ]\n      },\n      size: {\n        xs: 'h-8 px-3 text-xs',\n        sm: 'h-10 px-4 text-sm',\n        md: 'h-12 px-6 text-base',\n        lg: 'h-14 px-8 text-lg',\n        xl: 'h-16 px-10 text-xl'\n      },\n      fullWidth: {\n        true: 'w-full'\n      }\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE (Generated from ButtonSpec)\n// =============================================================================\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  /**\n   * Whether the button is in loading state\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Icon to display before the button text\n   */\n  readonly icon?: React.ReactNode;\n  \n  /**\n   * Icon to display after the button text\n   */\n  readonly suffixIcon?: React.ReactNode;\n}\n\n// =============================================================================\n// LOADING SPINNER COMPONENT\n// =============================================================================\n\nconst LoadingSpinner: React.FC<{ size?: 'sm' | 'md' | 'lg' }> = ({ size = 'md' }) => {\n  const sizeClasses = {\n    sm: 'h-3 w-3',\n    md: 'h-4 w-4',\n    lg: 'h-5 w-5'\n  };\n\n  return (\n    <svg\n      className={cn('animate-spin', sizeClasses[size])}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n\n// =============================================================================\n// MAIN BUTTON COMPONENT\n// =============================================================================\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      fullWidth,\n      loading = false,\n      disabled,\n      icon,\n      suffixIcon,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isDisabled = disabled || loading;\n    const spinnerSize = size === 'xs' ? 'sm' : size === 'xl' ? 'lg' : 'md';\n\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, fullWidth }), className)}\n        ref={ref}\n        disabled={isDisabled}\n        {...props}\n      >\n        {/* Loading state */}\n        {loading && <LoadingSpinner size={spinnerSize} />}\n        \n        {/* Prefix icon */}\n        {!loading && icon && <span className=\"shrink-0\">{icon}</span>}\n        \n        {/* Button content */}\n        {children && (\n          <span className={cn(loading && 'opacity-70')}>{children}</span>\n        )}\n        \n        {/* Suffix icon */}\n        {!loading && suffixIcon && <span className=\"shrink-0\">{suffixIcon}</span>}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\n// =============================================================================\n// COMPONENT METADATA (for registry)\n// =============================================================================\n\nexport const ButtonMeta = {\n  id: 'button',\n  name: 'Button',\n  platform: 'react',\n  category: 'atom',\n  description: 'Interactive button element with multiple variants and sizes',\n  \n  // Accessibility features\n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Keyboard navigation',\n      'Screen reader support', \n      'Focus management',\n      'High contrast support',\n      'Loading state announcements'\n    ]\n  },\n  \n  // Bundle information\n  bundle: {\n    size: '2.1kb',\n    dependencies: ['cva', 'class-variance-authority'],\n    treeshakable: true\n  },\n  \n  // Usage examples\n  examples: {\n    basic: '<Button>Click me</Button>',\n    loading: '<Button loading>Processing...</Button>',\n    withIcon: '<Button icon={<PlusIcon />}>Add Item</Button>',\n    variants: '<Button variant=\"outline\" size=\"lg\">Large Outline</Button>'\n  }\n} as const;\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type { VariantProps };\nexport type ButtonVariant = VariantProps<typeof buttonVariants>['variant'];\nexport type ButtonSize = VariantProps<typeof buttonVariants>['size'];\n\n// Default export for compatibility\nexport default Button;"
      }
    ],
    "vue": [
      {
        "path": "platforms/vue/Button.vue",
        "type": "registry:component",
        "content": "<!--\nVue 3 Button Implementation\nGenerated from universal ButtonSpec\n-->\n\n<template>\n  <button\n    :class=\"buttonClasses\"\n    :disabled=\"isDisabled\"\n    :aria-label=\"ariaLabel\"\n    :aria-disabled=\"isDisabled\"\n    :type=\"type\"\n    @click=\"handleClick\"\n    v-bind=\"$attrs\"\n  >\n    <!-- Loading spinner -->\n    <LoadingSpinner \n      v-if=\"loading\" \n      :size=\"spinnerSize\" \n      :class=\"'mr-2'\"\n    />\n    \n    <!-- Prefix icon -->\n    <span \n      v-if=\"!loading && $slots.icon\" \n      :class=\"'shrink-0 mr-2'\"\n    >\n      <slot name=\"icon\" />\n    </span>\n\n    <!-- Button content -->\n    <span \n      v-if=\"$slots.default\"\n      :class=\"[loading && 'opacity-70']\"\n    >\n      <slot />\n    </span>\n\n    <!-- Suffix icon -->\n    <span \n      v-if=\"!loading && $slots.suffixIcon\" \n      :class=\"'shrink-0 ml-2'\"\n    >\n      <slot name=\"suffixIcon\" />\n    </span>\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, useAttrs } from 'vue';\n\n// =============================================================================\n// COMPONENT PROPS\n// =============================================================================\n\nexport interface ButtonProps {\n  /**\n   * Visual style variant\n   */\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  \n  /**\n   * Size of the button\n   */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  \n  /**\n   * Whether button is disabled\n   */\n  disabled?: boolean;\n  \n  /**\n   * Whether button is in loading state\n   */\n  loading?: boolean;\n  \n  /**\n   * Whether button should take full width\n   */\n  fullWidth?: boolean;\n  \n  /**\n   * Button type attribute\n   */\n  type?: 'button' | 'submit' | 'reset';\n  \n  /**\n   * Accessibility label\n   */\n  ariaLabel?: string;\n}\n\nconst props = withDefaults(defineProps<ButtonProps>(), {\n  variant: 'primary',\n  size: 'md',\n  disabled: false,\n  loading: false,\n  fullWidth: false,\n  type: 'button'\n});\n\n// =============================================================================\n// EMITS\n// =============================================================================\n\nconst emit = defineEmits<{\n  click: [event: MouseEvent];\n}>();\n\n// =============================================================================\n// COMPUTED PROPERTIES\n// =============================================================================\n\nconst isDisabled = computed(() => props.disabled || props.loading);\n\nconst spinnerSize = computed(() => {\n  if (props.size === 'xs') return 'sm';\n  if (props.size === 'xl') return 'lg';\n  return 'md';\n});\n\nconst buttonClasses = computed(() => {\n  const baseClasses = [\n    'inline-flex items-center justify-center gap-2',\n    'rounded-md text-sm font-medium transition-colors',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'select-none'\n  ];\n\n  // Variant classes\n  const variantClasses = {\n    primary: [\n      'bg-primary text-primary-foreground',\n      'hover:bg-primary/90',\n      'focus-visible:ring-primary'\n    ],\n    secondary: [\n      'bg-secondary text-secondary-foreground',\n      'hover:bg-secondary/80',\n      'focus-visible:ring-secondary'\n    ],\n    outline: [\n      'border border-input bg-background',\n      'hover:bg-accent hover:text-accent-foreground',\n      'focus-visible:ring-primary'\n    ],\n    ghost: [\n      'hover:bg-accent hover:text-accent-foreground',\n      'focus-visible:ring-primary'\n    ],\n    destructive: [\n      'bg-destructive text-destructive-foreground',\n      'hover:bg-destructive/90',\n      'focus-visible:ring-destructive'\n    ]\n  };\n\n  // Size classes\n  const sizeClasses = {\n    xs: 'h-8 px-3 text-xs',\n    sm: 'h-10 px-4 text-sm',\n    md: 'h-12 px-6 text-base',\n    lg: 'h-14 px-8 text-lg',\n    xl: 'h-16 px-10 text-xl'\n  };\n\n  return [\n    ...baseClasses,\n    ...variantClasses[props.variant],\n    sizeClasses[props.size],\n    props.fullWidth && 'w-full'\n  ].filter(Boolean);\n});\n\n// =============================================================================\n// EVENT HANDLERS\n// =============================================================================\n\nconst handleClick = (event: MouseEvent) => {\n  if (!isDisabled.value) {\n    emit('click', event);\n  }\n};\n\n// =============================================================================\n// ATTRS INHERITANCE\n// =============================================================================\n\nconst attrs = useAttrs();\n\n// Exclude Vue-specific attrs from being passed to the button element\ndefineOptions({\n  inheritAttrs: false\n});\n</script>\n\n<script lang=\"ts\">\n/**\n * Loading Spinner Component\n */\nimport { defineComponent, h } from 'vue';\n\nconst LoadingSpinner = defineComponent({\n  name: 'LoadingSpinner',\n  props: {\n    size: {\n      type: String as () => 'sm' | 'md' | 'lg',\n      default: 'md'\n    }\n  },\n  setup(props) {\n    const sizeClasses = {\n      sm: 'h-3 w-3',\n      md: 'h-4 w-4',\n      lg: 'h-5 w-5'\n    };\n\n    return () =>\n      h('svg', {\n        class: `animate-spin ${sizeClasses[props.size]}`,\n        xmlns: 'http://www.w3.org/2000/svg',\n        fill: 'none',\n        viewBox: '0 0 24 24'\n      }, [\n        h('circle', {\n          class: 'opacity-25',\n          cx: '12',\n          cy: '12',\n          r: '10',\n          stroke: 'currentColor',\n          'stroke-width': '4'\n        }),\n        h('path', {\n          class: 'opacity-75',\n          fill: 'currentColor',\n          d: 'm4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'\n        })\n      ]);\n  }\n});\n\nexport default LoadingSpinner;\n</script>\n\n<style scoped>\n/* Component-specific styles if needed */\n</style>"
      }
    ],
    "angular": [
      {
        "path": "platforms/angular/button.component.ts",
        "type": "registry:component",
        "content": "/**\n * Angular Button Implementation\n * Generated from universal ButtonSpec\n */\n\nimport { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  HostBinding, \n  OnInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\nexport type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n@Component({\n  selector: 'xaheen-button',\n  standalone: true,\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <button\n      [class]=\"buttonClasses\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-disabled]=\"isDisabled\"\n      [type]=\"type\"\n      (click)=\"handleClick($event)\"\n    >\n      <!-- Loading spinner -->\n      <svg\n        *ngIf=\"loading\"\n        [class]=\"'animate-spin ' + spinnerSizeClass + ' mr-2'\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <circle\n          class=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          stroke-width=\"4\"\n        />\n        <path\n          class=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n\n      <!-- Prefix icon -->\n      <span \n        *ngIf=\"!loading && hasIconSlot\" \n        class=\"shrink-0 mr-2\"\n      >\n        <ng-content select=\"[slot=icon]\"></ng-content>\n      </span>\n\n      <!-- Button content -->\n      <span \n        *ngIf=\"hasDefaultContent\"\n        [class]=\"loading ? 'opacity-70' : ''\"\n      >\n        <ng-content></ng-content>\n      </span>\n\n      <!-- Suffix icon -->\n      <span \n        *ngIf=\"!loading && hasSuffixIconSlot\" \n        class=\"shrink-0 ml-2\"\n      >\n        <ng-content select=\"[slot=suffix-icon]\"></ng-content>\n      </span>\n    </button>\n  `,\n  styles: [`\n    :host {\n      display: inline-block;\n    }\n    \n    :host([fullWidth]) {\n      display: block;\n      width: 100%;\n    }\n    \n    button {\n      font-family: inherit;\n    }\n  `]\n})\nexport class ButtonComponent implements OnInit {\n  // =============================================================================\n  // INPUT PROPERTIES\n  // =============================================================================\n\n  @Input() variant: ButtonVariant = 'primary';\n  @Input() size: ButtonSize = 'md';\n  @Input() disabled: boolean = false;\n  @Input() loading: boolean = false;\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\n  @Input() ariaLabel?: string;\n  @Input() customClass?: string;\n\n  @HostBinding('attr.fullWidth')\n  @Input() fullWidth: boolean = false;\n\n  // =============================================================================\n  // OUTPUT EVENTS\n  // =============================================================================\n\n  @Output() buttonClick = new EventEmitter<MouseEvent>();\n\n  // =============================================================================\n  // COMPUTED PROPERTIES\n  // =============================================================================\n\n  get isDisabled(): boolean {\n    return this.disabled || this.loading;\n  }\n\n  get spinnerSizeClass(): string {\n    const sizeMap = {\n      xs: 'h-3 w-3',\n      sm: 'h-3 w-3',\n      md: 'h-4 w-4',\n      lg: 'h-4 w-4',\n      xl: 'h-5 w-5'\n    };\n    return sizeMap[this.size];\n  }\n\n  get buttonClasses(): string {\n    const baseClasses = [\n      'inline-flex items-center justify-center gap-2',\n      'rounded-md text-sm font-medium transition-colors',\n      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n      'disabled:pointer-events-none disabled:opacity-50',\n      'select-none'\n    ];\n\n    // Variant classes\n    const variantClasses: Record<ButtonVariant, string[]> = {\n      primary: [\n        'bg-primary text-primary-foreground',\n        'hover:bg-primary/90',\n        'focus-visible:ring-primary'\n      ],\n      secondary: [\n        'bg-secondary text-secondary-foreground',\n        'hover:bg-secondary/80',\n        'focus-visible:ring-secondary'\n      ],\n      outline: [\n        'border border-input bg-background',\n        'hover:bg-accent hover:text-accent-foreground',\n        'focus-visible:ring-primary'\n      ],\n      ghost: [\n        'hover:bg-accent hover:text-accent-foreground',\n        'focus-visible:ring-primary'\n      ],\n      destructive: [\n        'bg-destructive text-destructive-foreground',\n        'hover:bg-destructive/90',\n        'focus-visible:ring-destructive'\n      ]\n    };\n\n    // Size classes\n    const sizeClasses: Record<ButtonSize, string> = {\n      xs: 'h-8 px-3 text-xs',\n      sm: 'h-10 px-4 text-sm',\n      md: 'h-12 px-6 text-base',\n      lg: 'h-14 px-8 text-lg',\n      xl: 'h-16 px-10 text-xl'\n    };\n\n    return [\n      ...baseClasses,\n      ...variantClasses[this.variant],\n      sizeClasses[this.size],\n      this.fullWidth ? 'w-full' : '',\n      this.customClass || ''\n    ].filter(Boolean).join(' ');\n  }\n\n  // Content projection detection (simplified for demo)\n  get hasIconSlot(): boolean {\n    // In a real implementation, you'd check for projected content\n    return true;\n  }\n\n  get hasDefaultContent(): boolean {\n    return true;\n  }\n\n  get hasSuffixIconSlot(): boolean {\n    return true;\n  }\n\n  // =============================================================================\n  // LIFECYCLE\n  // =============================================================================\n\n  ngOnInit(): void {\n    // Component initialization logic\n  }\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  handleClick(event: MouseEvent): void {\n    if (!this.isDisabled) {\n      this.buttonClick.emit(event);\n    }\n  }\n}\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const ButtonMeta = {\n  id: 'button',\n  name: 'Button',\n  platform: 'angular',\n  category: 'atom',\n  description: 'Interactive button element built with Angular',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Keyboard navigation',\n      'Screen reader support',\n      'ARIA attributes',\n      'Focus management',\n      'Loading state announcements'\n    ]\n  },\n  \n  bundle: {\n    size: '4.1kb',\n    dependencies: ['@angular/core', '@angular/common'],\n    treeshakable: true\n  },\n  \n  usage: {\n    selector: 'xaheen-button',\n    inputs: ['variant', 'size', 'disabled', 'loading', 'fullWidth'],\n    outputs: ['buttonClick'],\n    slots: ['default', 'icon', 'suffix-icon']\n  },\n  \n  examples: {\n    basic: '<xaheen-button>Click me</xaheen-button>',\n    loading: '<xaheen-button [loading]=\"true\">Processing...</xaheen-button>',\n    withIcon: `\n      <xaheen-button>\n        <svg slot=\"icon\" class=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"/>\n        </svg>\n        Add Item\n      </xaheen-button>\n    `\n  }\n} as const;"
      }
    ],
    "svelte": [
      {
        "path": "platforms/svelte/Button.svelte",
        "type": "registry:component",
        "content": "<script lang=\"ts\">\n  import { cn } from '../../lib/utils';\n  \n  export let variant: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link' = 'default';\n  export let size: 'sm' | 'md' | 'lg' | 'xl' = 'md';\n  export let disabled: boolean = false;\n  export let loading: boolean = false;\n  export let className: string = '';\n  export let type: 'button' | 'submit' | 'reset' = 'button';\n\n  const buttonVariants = {\n    variant: {\n      default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n      destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n      outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n      secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n      ghost: 'hover:bg-accent hover:text-accent-foreground',\n      link: 'text-primary underline-offset-4 hover:underline'\n    },\n    size: {\n      sm: 'h-10 px-4 py-2 text-sm',\n      md: 'h-12 px-6 py-3 text-base',\n      lg: 'h-14 px-8 py-4 text-lg',\n      xl: 'h-16 px-10 py-5 text-xl'\n    }\n  };\n\n  $: buttonClasses = cn(\n    'inline-flex items-center justify-center whitespace-nowrap rounded-lg font-medium',\n    'ring-offset-background transition-all duration-200 ease-in-out',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'shadow-sm hover:shadow-md',\n    buttonVariants.variant[variant],\n    buttonVariants.size[size],\n    className\n  );\n</script>\n\n<button \n  {type}\n  class={buttonClasses}\n  {disabled}\n  on:click\n  {...$$restProps}\n>\n  {#if loading}\n    <svg class=\"animate-spin -ml-1 mr-3 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n      <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n      <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n    </svg>\n  {/if}\n  <slot />\n</button>"
      }
    ],
    "react-native": [
      {
        "path": "platforms/react-native/Button.tsx",
        "type": "registry:component",
        "content": "/**\n * React Native Button Implementation\n * Generated from universal ButtonSpec\n */\n\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  Text,\n  View,\n  ActivityIndicator,\n  StyleSheet,\n  ViewStyle,\n  TextStyle,\n  AccessibilityRole\n} from 'react-native';\nimport { UniversalTokens } from '../../core/universal-tokens';\n\n// =============================================================================\n// CONVERT TOKENS TO REACT NATIVE\n// =============================================================================\n\nconst tokens = UniversalTokens.converters.toReactNative(UniversalTokens.spacing);\nconst colors = UniversalTokens.colors;\n\n// =============================================================================\n// STYLE DEFINITIONS\n// =============================================================================\n\nconst createButtonStyles = () => {\n  const baseButton: ViewStyle = {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 8,\n    paddingHorizontal: tokens[6], // 24dp\n    paddingVertical: tokens[3],   // 12dp\n    minHeight: tokens[12],        // 48dp - WCAG compliant\n  };\n\n  const baseText: TextStyle = {\n    fontSize: 16,\n    fontWeight: '500',\n    textAlign: 'center',\n  };\n\n  return StyleSheet.create({\n    // Base styles\n    baseButton,\n    baseText,\n    \n    // Size variants\n    sizeXS: {\n      minHeight: tokens[8],        // 32dp\n      paddingHorizontal: tokens[3], // 12dp\n      paddingVertical: tokens[2],   // 8dp\n    },\n    sizeSM: {\n      minHeight: tokens[10],       // 40dp\n      paddingHorizontal: tokens[4], // 16dp\n      paddingVertical: tokens[2],   // 8dp\n    },\n    sizeMD: {\n      minHeight: tokens[12],       // 48dp\n      paddingHorizontal: tokens[6], // 24dp\n      paddingVertical: tokens[3],   // 12dp\n    },\n    sizeLG: {\n      minHeight: tokens[14],       // 56dp\n      paddingHorizontal: tokens[8], // 32dp\n      paddingVertical: tokens[4],   // 16dp\n    },\n    sizeXL: {\n      minHeight: tokens[16],       // 64dp\n      paddingHorizontal: tokens[10], // 40dp\n      paddingVertical: tokens[5],    // 20dp\n    },\n\n    // Text sizes\n    textXS: { fontSize: 12 },\n    textSM: { fontSize: 14 },\n    textMD: { fontSize: 16 },\n    textLG: { fontSize: 18 },\n    textXL: { fontSize: 20 },\n\n    // Variant styles\n    primary: {\n      backgroundColor: colors.primary[500],\n    },\n    primaryText: {\n      color: '#ffffff',\n    },\n    \n    secondary: {\n      backgroundColor: colors.secondary[200],\n    },\n    secondaryText: {\n      color: colors.secondary[800],\n    },\n    \n    outline: {\n      backgroundColor: 'transparent',\n      borderWidth: 1,\n      borderColor: colors.secondary[300],\n    },\n    outlineText: {\n      color: colors.secondary[700],\n    },\n    \n    ghost: {\n      backgroundColor: 'transparent',\n    },\n    ghostText: {\n      color: colors.primary[600],\n    },\n    \n    destructive: {\n      backgroundColor: colors.error.main,\n    },\n    destructiveText: {\n      color: '#ffffff',\n    },\n\n    // States\n    disabled: {\n      opacity: 0.5,\n    },\n    \n    pressed: {\n      opacity: 0.8,\n    },\n\n    fullWidth: {\n      width: '100%',\n    },\n\n    // Loading and icon containers\n    iconContainer: {\n      marginRight: tokens[2], // 8dp\n    },\n    suffixIconContainer: {\n      marginLeft: tokens[2], // 8dp\n    },\n    loadingContainer: {\n      marginRight: tokens[2], // 8dp\n    },\n  });\n};\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface ButtonProps {\n  /**\n   * Button content\n   */\n  readonly children?: React.ReactNode;\n  \n  /**\n   * Visual style variant\n   */\n  readonly variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  \n  /**\n   * Size of the button\n   */\n  readonly size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  \n  /**\n   * Whether button is disabled\n   */\n  readonly disabled?: boolean;\n  \n  /**\n   * Whether button is in loading state\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Whether button should take full width\n   */\n  readonly fullWidth?: boolean;\n  \n  /**\n   * Icon to display before text\n   */\n  readonly icon?: React.ReactNode;\n  \n  /**\n   * Icon to display after text\n   */\n  readonly suffixIcon?: React.ReactNode;\n  \n  /**\n   * Press event handler\n   */\n  readonly onPress?: () => void;\n  \n  /**\n   * Accessibility label\n   */\n  readonly accessibilityLabel?: string;\n  \n  /**\n   * Custom style override\n   */\n  readonly style?: ViewStyle;\n  \n  /**\n   * Custom text style override\n   */\n  readonly textStyle?: TextStyle;\n  \n  /**\n   * Test ID for testing\n   */\n  readonly testID?: string;\n}\n\n// =============================================================================\n// MAIN BUTTON COMPONENT\n// =============================================================================\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  loading = false,\n  fullWidth = false,\n  icon,\n  suffixIcon,\n  onPress,\n  accessibilityLabel,\n  style,\n  textStyle,\n  testID,\n}) => {\n  const styles = createButtonStyles();\n  const isDisabled = disabled || loading;\n\n  // Get variant styles\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'primary':\n        return { container: styles.primary, text: styles.primaryText };\n      case 'secondary':\n        return { container: styles.secondary, text: styles.secondaryText };\n      case 'outline':\n        return { container: styles.outline, text: styles.outlineText };\n      case 'ghost':\n        return { container: styles.ghost, text: styles.ghostText };\n      case 'destructive':\n        return { container: styles.destructive, text: styles.destructiveText };\n      default:\n        return { container: styles.primary, text: styles.primaryText };\n    }\n  };\n\n  // Get size styles\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'xs':\n        return { container: styles.sizeXS, text: styles.textXS };\n      case 'sm':\n        return { container: styles.sizeSM, text: styles.textSM };\n      case 'md':\n        return { container: styles.sizeMD, text: styles.textMD };\n      case 'lg':\n        return { container: styles.sizeLG, text: styles.textLG };\n      case 'xl':\n        return { container: styles.sizeXL, text: styles.textXL };\n      default:\n        return { container: styles.sizeMD, text: styles.textMD };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n  const sizeStyles = getSizeStyles();\n\n  // Get loading indicator color based on variant\n  const getLoadingColor = () => {\n    switch (variant) {\n      case 'outline':\n      case 'ghost':\n        return colors.primary[500];\n      case 'secondary':\n        return colors.secondary[600];\n      default:\n        return '#ffffff';\n    }\n  };\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.baseButton,\n        variantStyles.container,\n        sizeStyles.container,\n        fullWidth && styles.fullWidth,\n        isDisabled && styles.disabled,\n        style,\n      ]}\n      onPress={onPress}\n      disabled={isDisabled}\n      activeOpacity={0.8}\n      accessibilityRole={'button' as AccessibilityRole}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityState={{\n        disabled: isDisabled,\n        busy: loading,\n      }}\n      testID={testID}\n    >\n      {/* Loading indicator */}\n      {loading && (\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator\n            size=\"small\"\n            color={getLoadingColor()}\n          />\n        </View>\n      )}\n\n      {/* Prefix icon */}\n      {!loading && icon && (\n        <View style={styles.iconContainer}>\n          {icon}\n        </View>\n      )}\n\n      {/* Button text */}\n      {children && (\n        <Text\n          style={[\n            styles.baseText,\n            variantStyles.text,\n            sizeStyles.text,\n            loading && { opacity: 0.7 },\n            textStyle,\n          ]}\n        >\n          {children}\n        </Text>\n      )}\n\n      {/* Suffix icon */}\n      {!loading && suffixIcon && (\n        <View style={styles.suffixIconContainer}>\n          {suffixIcon}\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n};\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const ButtonMeta = {\n  id: 'button',\n  name: 'Button',\n  platform: 'react-native',\n  category: 'atom',\n  description: 'Interactive button element optimized for mobile devices',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Touch target 48dp minimum',\n      'Screen reader support',\n      'Loading state announcements',\n      'High contrast support',\n      'Accessibility state management'\n    ]\n  },\n  \n  bundle: {\n    size: '3.2kb',\n    dependencies: ['react-native'],\n    platformSpecific: true\n  },\n  \n  examples: {\n    basic: '<Button>Touch me</Button>',\n    loading: '<Button loading>Processing...</Button>',\n    withIcon: '<Button icon={<Icon />}>Add Item</Button>',\n  }\n} as const;\n\nexport default Button;"
      }
    ],
    "electron": [
      {
        "path": "platforms/electron/button.tsx",
        "type": "registry:component",
        "content": "/**\n * Electron Button Implementation\n * Enhanced React button with Electron-specific features\n */\n\nimport React, { forwardRef, useCallback, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// ELECTRON API TYPES\n// =============================================================================\n\ninterface ElectronAPI {\n  readonly showContextMenu: (options: ContextMenuOptions) => void;\n  readonly registerShortcut: (shortcut: string, callback: () => void) => void;\n  readonly unregisterShortcut: (shortcut: string) => void;\n  readonly getPlatform: () => 'darwin' | 'win32' | 'linux';\n  readonly playSound: (type: 'click' | 'error' | 'success') => void;\n}\n\ninterface ContextMenuOptions {\n  readonly items: Array<{\n    readonly label: string;\n    readonly click?: () => void;\n    readonly type?: 'normal' | 'separator' | 'checkbox';\n    readonly checked?: boolean;\n    readonly enabled?: boolean;\n    readonly accelerator?: string;\n  }>;\n}\n\ndeclare global {\n  interface Window {\n    readonly electronAPI?: ElectronAPI;\n  }\n}\n\n// =============================================================================\n// VARIANT DEFINITIONS (Enhanced from ButtonSpec)\n// =============================================================================\n\nconst buttonVariants = cva(\n  [\n    'inline-flex items-center justify-center gap-2',\n    'rounded-lg text-sm font-medium transition-all duration-200',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'select-none',\n    // Electron-specific enhancements\n    'active:scale-[0.98] active:transition-none',\n    'shadow-md hover:shadow-lg'\n  ],\n  {\n    variants: {\n      variant: {\n        primary: [\n          'bg-primary text-primary-foreground',\n          'hover:bg-primary/90',\n          'focus-visible:ring-primary',\n          'shadow-primary/20'\n        ],\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80',\n          'focus-visible:ring-secondary',\n          'shadow-secondary/20'\n        ],\n        outline: [\n          'border-2 border-input bg-background',\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary',\n          'shadow-sm'\n        ],\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary',\n          'shadow-none hover:shadow-md'\n        ],\n        destructive: [\n          'bg-destructive text-destructive-foreground',\n          'hover:bg-destructive/90',\n          'focus-visible:ring-destructive',\n          'shadow-destructive/20'\n        ]\n      },\n      size: {\n        xs: 'h-8 px-3 text-xs rounded-md',\n        sm: 'h-10 px-4 text-sm',\n        md: 'h-12 px-6 text-base',\n        lg: 'h-14 px-8 text-lg',\n        xl: 'h-16 px-10 text-xl rounded-xl'\n      },\n      fullWidth: {\n        true: 'w-full'\n      },\n      platform: {\n        darwin: 'font-medium',\n        win32: 'font-semibold uppercase tracking-wider',\n        linux: 'font-medium'\n      }\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE (Enhanced with Electron features)\n// =============================================================================\n\nexport interface ElectronButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  /**\n   * Whether the button is in loading state\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Icon to display before the button text\n   */\n  readonly icon?: React.ReactNode;\n  \n  /**\n   * Icon to display after the button text\n   */\n  readonly suffixIcon?: React.ReactNode;\n  \n  /**\n   * Enable native context menu on right-click\n   */\n  readonly nativeContextMenu?: boolean;\n  \n  /**\n   * Context menu items\n   */\n  readonly contextMenuItems?: Array<{\n    readonly label: string;\n    readonly onClick?: () => void;\n    readonly shortcut?: string;\n  }>;\n  \n  /**\n   * Keyboard shortcut for this button\n   */\n  readonly shortcut?: string;\n  \n  /**\n   * Enable native sound feedback\n   */\n  readonly soundFeedback?: boolean;\n  \n  /**\n   * Platform-specific styling override\n   */\n  readonly platformOverride?: 'darwin' | 'win32' | 'linux' | 'auto';\n}\n\n// =============================================================================\n// LOADING SPINNER COMPONENT\n// =============================================================================\n\nconst LoadingSpinner: React.FC<{ size?: 'sm' | 'md' | 'lg' }> = ({ size = 'md' }) => {\n  const sizeClasses = {\n    sm: 'h-3 w-3',\n    md: 'h-4 w-4',\n    lg: 'h-5 w-5'\n  };\n\n  return (\n    <svg\n      className={cn('animate-spin', sizeClasses[size])}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n\n// =============================================================================\n// MAIN ELECTRON BUTTON COMPONENT\n// =============================================================================\n\nexport const ElectronButton = forwardRef<HTMLButtonElement, ElectronButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      fullWidth,\n      loading = false,\n      disabled,\n      icon,\n      suffixIcon,\n      children,\n      nativeContextMenu = false,\n      contextMenuItems = [],\n      shortcut,\n      soundFeedback = true,\n      platformOverride = 'auto',\n      onClick,\n      onContextMenu,\n      ...props\n    },\n    ref\n  ) => {\n    const isDisabled = disabled || loading;\n    const spinnerSize = size === 'xs' ? 'sm' : size === 'xl' ? 'lg' : 'md';\n    \n    // Detect platform\n    const platform = platformOverride === 'auto' \n      ? (window.electronAPI?.getPlatform() || 'darwin')\n      : platformOverride;\n\n    // Handle native context menu\n    const handleContextMenu = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (nativeContextMenu && window.electronAPI && contextMenuItems.length > 0) {\n        e.preventDefault();\n        window.electronAPI.showContextMenu({\n          items: contextMenuItems.map(item => ({\n            label: item.label,\n            click: item.onClick,\n            accelerator: item.shortcut,\n            type: 'normal' as const,\n            enabled: !isDisabled\n          }))\n        });\n      }\n      onContextMenu?.(e);\n    }, [nativeContextMenu, contextMenuItems, isDisabled, onContextMenu]);\n\n    // Handle click with sound feedback\n    const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (!isDisabled) {\n        if (soundFeedback && window.electronAPI) {\n          window.electronAPI.playSound('click');\n        }\n        onClick?.(e);\n      }\n    }, [isDisabled, soundFeedback, onClick]);\n\n    // Register keyboard shortcut\n    useEffect(() => {\n      if (shortcut && window.electronAPI && !isDisabled) {\n        const handleShortcut = () => {\n          const button = ref as React.MutableRefObject<HTMLButtonElement>;\n          button.current?.click();\n        };\n        \n        window.electronAPI.registerShortcut(shortcut, handleShortcut);\n        \n        return () => {\n          window.electronAPI?.unregisterShortcut(shortcut);\n        };\n      }\n    }, [shortcut, isDisabled, ref]);\n\n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size, fullWidth, platform }),\n          className\n        )}\n        ref={ref}\n        disabled={isDisabled}\n        onClick={handleClick}\n        onContextMenu={handleContextMenu}\n        aria-label={props['aria-label'] || (typeof children === 'string' ? children : undefined)}\n        aria-disabled={isDisabled}\n        data-shortcut={shortcut}\n        {...props}\n      >\n        {/* Loading state */}\n        {loading && <LoadingSpinner size={spinnerSize} />}\n        \n        {/* Prefix icon */}\n        {!loading && icon && <span className=\"shrink-0\">{icon}</span>}\n        \n        {/* Button content */}\n        {children && (\n          <span className={cn(loading && 'opacity-70')}>\n            {children}\n            {shortcut && !loading && (\n              <span className=\"ml-2 text-xs opacity-60\">\n                {platform === 'darwin' ? shortcut.replace('Ctrl', '⌘') : shortcut}\n              </span>\n            )}\n          </span>\n        )}\n        \n        {/* Suffix icon */}\n        {!loading && suffixIcon && <span className=\"shrink-0\">{suffixIcon}</span>}\n      </button>\n    );\n  }\n);\n\nElectronButton.displayName = 'ElectronButton';\n\n// =============================================================================\n// COMPONENT METADATA (for registry)\n// =============================================================================\n\nexport const ElectronButtonMeta = {\n  id: 'electron-button',\n  name: 'ElectronButton',\n  platform: 'electron',\n  baseComponent: 'button',\n  category: 'atom',\n  description: 'Enhanced button with Electron-specific features like native context menus and keyboard shortcuts',\n  \n  // Electron-specific features\n  electronFeatures: [\n    'Native context menus',\n    'Global keyboard shortcuts',\n    'Platform-specific styling',\n    'Native sound feedback',\n    'Window control integration'\n  ],\n  \n  // Accessibility features\n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Keyboard navigation',\n      'Screen reader support',\n      'Focus management',\n      'High contrast support',\n      'Loading state announcements',\n      'Native OS accessibility APIs'\n    ]\n  },\n  \n  // Bundle information\n  bundle: {\n    size: '3.2kb',\n    dependencies: ['cva', 'class-variance-authority', 'electron'],\n    treeshakable: true\n  },\n  \n  // Usage examples\n  examples: {\n    basic: '<ElectronButton>Click me</ElectronButton>',\n    withShortcut: '<ElectronButton shortcut=\"Ctrl+S\">Save</ElectronButton>',\n    withContextMenu: `\n<ElectronButton \n  nativeContextMenu\n  contextMenuItems={[\n    { label: 'Copy', onClick: handleCopy, shortcut: 'Ctrl+C' },\n    { label: 'Paste', onClick: handlePaste, shortcut: 'Ctrl+V' }\n  ]}\n>\n  Right-click me\n</ElectronButton>`,\n    platformSpecific: '<ElectronButton platformOverride=\"darwin\">macOS Style</ElectronButton>'\n  }\n} as const;\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type { VariantProps };\nexport type ElectronButtonVariant = VariantProps<typeof buttonVariants>['variant'];\nexport type ElectronButtonSize = VariantProps<typeof buttonVariants>['size'];\n\n// Default export for compatibility\nexport default ElectronButton;"
      }
    ],
    "ionic": [
      {
        "path": "platforms/ionic/button.tsx",
        "type": "registry:component",
        "content": "/**\n * Ionic Button Implementation\n * Enhanced React/Angular implementation with Ionic framework integration\n * Generated from universal ButtonSpec\n */\n\nimport React, { forwardRef } from 'react';\nimport { IonButton, IonSpinner, IonIcon } from '@ionic/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// IONIC VARIANT DEFINITIONS\n// =============================================================================\n\nconst ionicButtonVariants = cva(\n  // Base classes for Ionic integration\n  [\n    'ion-activatable',\n    'ion-focusable'\n  ],\n  {\n    variants: {\n      variant: {\n        primary: ['ion-color-primary'],\n        secondary: ['ion-color-secondary'],\n        outline: ['ion-color-primary'],\n        ghost: ['ion-color-medium'],\n        destructive: ['ion-color-danger']\n      },\n      size: {\n        xs: ['ion-button-small'],\n        sm: ['ion-button-small'],\n        md: ['ion-button-default'],\n        lg: ['ion-button-large'],\n        xl: ['ion-button-large']\n      },\n      fill: {\n        solid: ['ion-fill-solid'],\n        outline: ['ion-fill-outline'],\n        clear: ['ion-fill-clear']\n      },\n      shape: {\n        default: [],\n        round: ['ion-button-round']\n      }\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n      fill: 'solid',\n      shape: 'default'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface IonicButtonProps\n  extends Omit<React.ComponentProps<typeof IonButton>, 'size' | 'fill' | 'shape'>,\n    VariantProps<typeof ionicButtonVariants> {\n  /**\n   * Visual style variant of the button\n   */\n  readonly variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  \n  /**\n   * Size of the button\n   */\n  readonly size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  \n  /**\n   * Fill style for Ionic button\n   */\n  readonly fill?: 'solid' | 'outline' | 'clear';\n  \n  /**\n   * Shape of the button\n   */\n  readonly shape?: 'default' | 'round';\n  \n  /**\n   * Show loading state with spinner\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Disable the button\n   */\n  readonly disabled?: boolean;\n  \n  /**\n   * Make button full width\n   */\n  readonly fullWidth?: boolean;\n  \n  /**\n   * Prefix icon (Ionic icon name or React element)\n   */\n  readonly startIcon?: string | React.ReactNode;\n  \n  /**\n   * Suffix icon (Ionic icon name or React element)\n   */\n  readonly endIcon?: string | React.ReactNode;\n  \n  /**\n   * Custom CSS classes\n   */\n  readonly className?: string;\n  \n  /**\n   * Haptic feedback type (iOS/Android)\n   */\n  readonly haptic?: 'light' | 'medium' | 'heavy' | 'selection' | 'impact';\n}\n\n// =============================================================================\n// HAPTIC FEEDBACK UTILITY\n// =============================================================================\n\nconst triggerHapticFeedback = (type: IonicButtonProps['haptic']) => {\n  if (typeof window !== 'undefined' && 'Haptics' in window) {\n    try {\n      switch (type) {\n        case 'light':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'light' });\n          break;\n        case 'medium':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'medium' });\n          break;\n        case 'heavy':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.impact({ style: 'heavy' });\n          break;\n        case 'selection':\n          // @ts-ignore - Ionic Haptics\n          window.Haptics?.selectionStart();\n          break;\n      }\n    } catch (error) {\n      console.warn('Haptic feedback not available:', error);\n    }\n  }\n};\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport const Button = forwardRef<HTMLIonButtonElement, IonicButtonProps>(\n  ({ \n    className,\n    variant = 'primary',\n    size = 'md',\n    fill = 'solid',\n    shape = 'default',\n    loading = false,\n    disabled = false,\n    fullWidth = false,\n    startIcon,\n    endIcon,\n    haptic,\n    onClick,\n    children,\n    ...props \n  }, ref) => {\n    // Map variants to Ionic colors\n    const ionicColor = variant === 'destructive' ? 'danger' \n                     : variant === 'ghost' ? 'medium' \n                     : variant;\n\n    // Map fill variants\n    const ionicFill = variant === 'outline' ? 'outline'\n                    : variant === 'ghost' ? 'clear'\n                    : fill;\n\n    // Map sizes to Ionic sizes\n    const ionicSize = size === 'xs' || size === 'sm' ? 'small'\n                    : size === 'lg' || size === 'xl' ? 'large'\n                    : 'default';\n\n    const handleClick = (e: React.MouseEvent<HTMLIonButtonElement>) => {\n      if (!disabled && !loading) {\n        // Trigger haptic feedback if specified\n        if (haptic) {\n          triggerHapticFeedback(haptic);\n        }\n        \n        onClick?.(e);\n      }\n    };\n\n    const renderIcon = (icon: string | React.ReactNode, slot: 'start' | 'end') => {\n      if (!icon) return null;\n      \n      if (typeof icon === 'string') {\n        return <IonIcon icon={icon} slot={slot} />;\n      }\n      \n      return <span slot={slot}>{icon}</span>;\n    };\n\n    return (\n      <IonButton\n        ref={ref}\n        color={ionicColor}\n        fill={ionicFill}\n        size={ionicSize}\n        shape={shape === 'round' ? 'round' : undefined}\n        expand={fullWidth ? 'block' : undefined}\n        disabled={disabled || loading}\n        className={cn(ionicButtonVariants({ variant, size, fill, shape }), className)}\n        onClick={handleClick}\n        {...props}\n      >\n        {loading && <IonSpinner slot=\"start\" />}\n        {!loading && startIcon && renderIcon(startIcon, 'start')}\n        \n        {children}\n        \n        {!loading && endIcon && renderIcon(endIcon, 'end')}\n      </IonButton>\n    );\n  }\n);\n\nButton.displayName = 'IonicButton';\n\n// =============================================================================\n// ENHANCED IONIC VARIANTS\n// =============================================================================\n\n/**\n * Floating Action Button (FAB) using Ionic components\n */\nexport const FAB = forwardRef<HTMLIonButtonElement, IonicButtonProps & {\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'center';\n}>(({ position = 'bottom-right', size = 'md', ...props }, ref) => {\n  return (\n    <div className={`fab-container fab-${position}`}>\n      <Button\n        ref={ref}\n        size={size}\n        shape=\"round\"\n        {...props}\n      />\n    </div>\n  );\n});\n\nFAB.displayName = 'IonicFAB';\n\n/**\n * Segment Button for Ionic segments\n */\nexport const SegmentButton = forwardRef<HTMLIonButtonElement, IonicButtonProps & {\n  selected?: boolean;\n}>(({ selected, variant = 'ghost', fill = 'clear', ...props }, ref) => {\n  return (\n    <Button\n      ref={ref}\n      variant={selected ? 'primary' : variant}\n      fill={selected ? 'solid' : fill}\n      className={cn('segment-button', selected && 'segment-button-selected')}\n      {...props}\n    />\n  );\n});\n\nSegmentButton.displayName = 'IonicSegmentButton';\n\n/**\n * Tab Button for Ionic tabs\n */\nexport const TabButton = forwardRef<HTMLIonButtonElement, IonicButtonProps & {\n  active?: boolean;\n  badge?: string | number;\n}>(({ active, badge, startIcon, variant = 'ghost', fill = 'clear', children, ...props }, ref) => {\n  return (\n    <div className=\"tab-button-wrapper\">\n      <Button\n        ref={ref}\n        variant={active ? 'primary' : variant}\n        fill={fill}\n        startIcon={startIcon}\n        className={cn('tab-button', active && 'tab-button-active')}\n        {...props}\n      >\n        <div className=\"tab-content\">\n          {children}\n          {badge && (\n            <span className=\"tab-badge\">\n              {badge}\n            </span>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n});\n\nTabButton.displayName = 'IonicTabButton';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const IonicButtonMeta = {\n  id: 'ionic-button',\n  name: 'IonicButton',\n  platform: 'ionic',\n  category: 'atom',\n  description: 'Enhanced button component built with Ionic framework for mobile-first experiences',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Native mobile accessibility',\n      'Haptic feedback support',\n      'Screen reader optimized',\n      'Touch target compliance',\n      'Platform-specific interactions'\n    ]\n  },\n  \n  bundle: {\n    size: '5.2kb',\n    dependencies: ['@ionic/react', '@ionic/core', 'react'],\n    treeshakable: true\n  },\n  \n  features: {\n    hapticFeedback: 'Native iOS/Android haptic feedback',\n    ionicColors: 'Uses Ionic CSS variables and theming',\n    mobileFriendly: 'Optimized for touch interactions',\n    nativeFeels: 'Platform-specific styling and behavior'\n  },\n  \n  usage: {\n    basic: '<Button>Click me</Button>',\n    withHaptic: '<Button haptic=\"medium\">Feel the tap</Button>',\n    withIcons: '<Button startIcon=\"home\" endIcon=\"arrow-forward\">Navigate</Button>',\n    fab: '<FAB position=\"bottom-right\" startIcon=\"add\">Add</FAB>',\n    segment: '<SegmentButton selected>Active</SegmentButton>',\n    tab: '<TabButton active badge=\"3\" startIcon=\"notifications\">Alerts</TabButton>'\n  }\n} as const;\n\nexport default Button;"
      }
    ],
    "vanilla": [
      {
        "path": "platforms/vanilla/button.js",
        "type": "registry:component",
        "content": "/**\n * Button Component - Vanilla JS/Web Components Implementation\n * Generated from universal button specification\n * WCAG AAA compliant with full keyboard and screen reader support\n */\n\nimport { UniversalTokens } from '../../core/universal-tokens.js';\nimport { ButtonSpec } from '../../core/component-specs.js';\n\n// =============================================================================\n// CSS CUSTOM PROPERTIES FROM TOKENS\n// =============================================================================\n\nconst cssVariables = UniversalTokens.converters.toCSSVariables({\n  colors: UniversalTokens.colors,\n  spacing: UniversalTokens.spacing,\n  typography: UniversalTokens.typography,\n  shadows: UniversalTokens.shadows,\n  borders: UniversalTokens.borders,\n  animations: UniversalTokens.animations\n});\n\n// =============================================================================\n// BUTTON WEB COMPONENT\n// =============================================================================\n\nclass XaheenButton extends HTMLElement {\n  static get observedAttributes() {\n    return ['variant', 'size', 'disabled', 'loading', 'fullwidth', 'aria-label', 'type'];\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this._internals = this.attachInternals ? this.attachInternals() : null;\n    this._onClick = this._onClick.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onKeyUp = this._onKeyUp.bind(this);\n  }\n\n  // =============================================================================\n  // LIFECYCLE METHODS\n  // =============================================================================\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n    this.setupAccessibility();\n  }\n\n  disconnectedCallback() {\n    this.removeEventListeners();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      this.render();\n      if (name === 'disabled' || name === 'loading') {\n        this.updateAccessibility();\n      }\n    }\n  }\n\n  // =============================================================================\n  // GETTERS & SETTERS\n  // =============================================================================\n\n  get variant() {\n    return this.getAttribute('variant') || 'primary';\n  }\n\n  set variant(value) {\n    this.setAttribute('variant', value);\n  }\n\n  get size() {\n    return this.getAttribute('size') || 'md';\n  }\n\n  set size(value) {\n    this.setAttribute('size', value);\n  }\n\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get loading() {\n    return this.hasAttribute('loading');\n  }\n\n  set loading(value) {\n    if (value) {\n      this.setAttribute('loading', '');\n    } else {\n      this.removeAttribute('loading');\n    }\n  }\n\n  get fullwidth() {\n    return this.hasAttribute('fullwidth');\n  }\n\n  set fullwidth(value) {\n    if (value) {\n      this.setAttribute('fullwidth', '');\n    } else {\n      this.removeAttribute('fullwidth');\n    }\n  }\n\n  get type() {\n    return this.getAttribute('type') || 'button';\n  }\n\n  set type(value) {\n    this.setAttribute('type', value);\n  }\n\n  // =============================================================================\n  // RENDER METHOD\n  // =============================================================================\n\n  render() {\n    const styles = this.createStyles();\n    const variantClasses = this.getVariantClasses();\n    const sizeClasses = this.getSizeClasses();\n    const stateClasses = this.getStateClasses();\n    \n    const buttonClass = [\n      'button',\n      `button--${this.variant}`,\n      `button--${this.size}`,\n      ...stateClasses\n    ].filter(Boolean).join(' ');\n\n    this.shadowRoot.innerHTML = `\n      <style>${styles}</style>\n      <button\n        part=\"button\"\n        class=\"${buttonClass}\"\n        type=\"${this.type}\"\n        ${this.disabled || this.loading ? 'disabled' : ''}\n        aria-label=\"${this.getAttribute('aria-label') || ''}\"\n        aria-busy=\"${this.loading}\"\n        aria-disabled=\"${this.disabled || this.loading}\"\n        tabindex=\"${this.disabled || this.loading ? '-1' : '0'}\"\n      >\n        ${this.loading ? this.renderLoadingSpinner() : ''}\n        <slot></slot>\n      </button>\n    `;\n  }\n\n  // =============================================================================\n  // STYLE GENERATION\n  // =============================================================================\n\n  createStyles() {\n    return `\n      /* CSS Custom Properties */\n      :host {\n        ${Object.entries(cssVariables).map(([key, value]) => `${key}: ${value};`).join('\\n        ')}\n        \n        display: inline-block;\n        font-family: var(--typography-fontFamily-sans);\n      }\n\n      /* Base button styles */\n      .button {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        gap: var(--spacing-2);\n        border: none;\n        cursor: pointer;\n        font-family: inherit;\n        font-weight: var(--typography-fontWeight-medium);\n        text-decoration: none;\n        white-space: nowrap;\n        user-select: none;\n        position: relative;\n        transition: all var(--animations-duration-fast)ms var(--animations-easing-easeInOut);\n        outline: none;\n        box-sizing: border-box;\n      }\n\n      /* Focus styles - WCAG AAA compliant */\n      .button:focus-visible {\n        outline: 2px solid var(--colors-primary-500);\n        outline-offset: 2px;\n      }\n\n      /* Size variants */\n      .button--xs {\n        min-height: var(--spacing-button-xs);\n        padding: 0 var(--spacing-3);\n        font-size: var(--typography-fontSize-xs);\n        border-radius: var(--borders-radius-md);\n      }\n\n      .button--sm {\n        min-height: var(--spacing-button-sm);\n        padding: 0 var(--spacing-4);\n        font-size: var(--typography-fontSize-sm);\n        border-radius: var(--borders-radius-md);\n      }\n\n      .button--md {\n        min-height: var(--spacing-button-md);\n        padding: 0 var(--spacing-6);\n        font-size: var(--typography-fontSize-base);\n        border-radius: var(--borders-radius-lg);\n      }\n\n      .button--lg {\n        min-height: var(--spacing-button-lg);\n        padding: 0 var(--spacing-8);\n        font-size: var(--typography-fontSize-lg);\n        border-radius: var(--borders-radius-lg);\n      }\n\n      .button--xl {\n        min-height: var(--spacing-button-xl);\n        padding: 0 var(--spacing-10);\n        font-size: var(--typography-fontSize-xl);\n        border-radius: var(--borders-radius-xl);\n      }\n\n      /* Variant styles */\n      .button--primary {\n        background-color: var(--colors-primary-500);\n        color: white;\n        box-shadow: var(--shadows-button-idle);\n      }\n\n      .button--primary:hover:not(:disabled) {\n        background-color: var(--colors-primary-600);\n        box-shadow: var(--shadows-button-hover);\n      }\n\n      .button--primary:active:not(:disabled) {\n        background-color: var(--colors-primary-700);\n        box-shadow: var(--shadows-button-active);\n      }\n\n      .button--secondary {\n        background-color: var(--colors-secondary-100);\n        color: var(--colors-secondary-800);\n        box-shadow: var(--shadows-button-idle);\n      }\n\n      .button--secondary:hover:not(:disabled) {\n        background-color: var(--colors-secondary-200);\n        box-shadow: var(--shadows-button-hover);\n      }\n\n      .button--secondary:active:not(:disabled) {\n        background-color: var(--colors-secondary-300);\n        box-shadow: var(--shadows-button-active);\n      }\n\n      .button--outline {\n        background-color: transparent;\n        color: var(--colors-primary-600);\n        border: 2px solid var(--colors-primary-200);\n        box-shadow: none;\n      }\n\n      .button--outline:hover:not(:disabled) {\n        background-color: var(--colors-primary-50);\n        border-color: var(--colors-primary-300);\n      }\n\n      .button--outline:active:not(:disabled) {\n        background-color: var(--colors-primary-100);\n        border-color: var(--colors-primary-400);\n      }\n\n      .button--ghost {\n        background-color: transparent;\n        color: var(--colors-primary-600);\n        box-shadow: none;\n      }\n\n      .button--ghost:hover:not(:disabled) {\n        background-color: var(--colors-primary-50);\n      }\n\n      .button--ghost:active:not(:disabled) {\n        background-color: var(--colors-primary-100);\n      }\n\n      .button--destructive {\n        background-color: var(--colors-error-main);\n        color: white;\n        box-shadow: var(--shadows-button-idle);\n      }\n\n      .button--destructive:hover:not(:disabled) {\n        background-color: var(--colors-error-dark);\n        box-shadow: var(--shadows-button-hover);\n      }\n\n      .button--destructive:active:not(:disabled) {\n        background-color: var(--colors-error-dark);\n        box-shadow: var(--shadows-button-active);\n      }\n\n      /* State styles */\n      .button--disabled,\n      .button:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n        pointer-events: none;\n      }\n\n      .button--loading {\n        color: transparent;\n      }\n\n      .button--fullwidth {\n        width: 100%;\n      }\n\n      /* Loading spinner */\n      .spinner {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 1.2em;\n        height: 1.2em;\n      }\n\n      .spinner::after {\n        content: '';\n        display: block;\n        width: 100%;\n        height: 100%;\n        border: 2px solid currentColor;\n        border-radius: 50%;\n        border-top-color: transparent;\n        border-right-color: transparent;\n        animation: spin 0.6s linear infinite;\n      }\n\n      @keyframes spin {\n        to {\n          transform: rotate(360deg);\n        }\n      }\n\n      /* High contrast mode support */\n      @media (prefers-contrast: high) {\n        .button {\n          border: 2px solid currentColor;\n        }\n        \n        .button:focus-visible {\n          outline-width: 3px;\n        }\n      }\n\n      /* Reduced motion support */\n      @media (prefers-reduced-motion: reduce) {\n        .button {\n          transition: none;\n        }\n        \n        .spinner::after {\n          animation: none;\n          border-color: currentColor;\n          border-top-color: transparent;\n        }\n      }\n    `;\n  }\n\n  // =============================================================================\n  // HELPER METHODS\n  // =============================================================================\n\n  getVariantClasses() {\n    const variantMap = {\n      primary: 'button--primary',\n      secondary: 'button--secondary',\n      outline: 'button--outline',\n      ghost: 'button--ghost',\n      destructive: 'button--destructive'\n    };\n    return variantMap[this.variant] || 'button--primary';\n  }\n\n  getSizeClasses() {\n    const sizeMap = {\n      xs: 'button--xs',\n      sm: 'button--sm',\n      md: 'button--md',\n      lg: 'button--lg',\n      xl: 'button--xl'\n    };\n    return sizeMap[this.size] || 'button--md';\n  }\n\n  getStateClasses() {\n    const classes = [];\n    if (this.disabled) classes.push('button--disabled');\n    if (this.loading) classes.push('button--loading');\n    if (this.fullwidth) classes.push('button--fullwidth');\n    return classes;\n  }\n\n  renderLoadingSpinner() {\n    return '<span class=\"spinner\" aria-hidden=\"true\"></span>';\n  }\n\n  // =============================================================================\n  // EVENT HANDLING\n  // =============================================================================\n\n  setupEventListeners() {\n    const button = this.shadowRoot.querySelector('button');\n    if (button) {\n      button.addEventListener('click', this._onClick);\n      button.addEventListener('keydown', this._onKeyDown);\n      button.addEventListener('keyup', this._onKeyUp);\n    }\n  }\n\n  removeEventListeners() {\n    const button = this.shadowRoot.querySelector('button');\n    if (button) {\n      button.removeEventListener('click', this._onClick);\n      button.removeEventListener('keydown', this._onKeyDown);\n      button.removeEventListener('keyup', this._onKeyUp);\n    }\n  }\n\n  _onClick(event) {\n    if (this.disabled || this.loading) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    // Dispatch custom event\n    this.dispatchEvent(new CustomEvent('xaheen-click', {\n      detail: { originalEvent: event },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  _onKeyDown(event) {\n    // Handle space and enter keys for button activation\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      const button = event.target;\n      button.classList.add('button--active');\n    }\n  }\n\n  _onKeyUp(event) {\n    // Handle space and enter keys for button activation\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      const button = event.target;\n      button.classList.remove('button--active');\n      button.click();\n    }\n  }\n\n  // =============================================================================\n  // ACCESSIBILITY\n  // =============================================================================\n\n  setupAccessibility() {\n    // Set default role if not present\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'button');\n    }\n\n    // Update ARIA states\n    this.updateAccessibility();\n  }\n\n  updateAccessibility() {\n    const button = this.shadowRoot.querySelector('button');\n    if (!button) return;\n\n    // Update ARIA states based on component state\n    if (this.disabled || this.loading) {\n      button.setAttribute('aria-disabled', 'true');\n      button.setAttribute('tabindex', '-1');\n    } else {\n      button.setAttribute('aria-disabled', 'false');\n      button.setAttribute('tabindex', '0');\n    }\n\n    if (this.loading) {\n      button.setAttribute('aria-busy', 'true');\n    } else {\n      button.setAttribute('aria-busy', 'false');\n    }\n  }\n\n  // =============================================================================\n  // FORM PARTICIPATION\n  // =============================================================================\n\n  static get formAssociated() {\n    return true;\n  }\n\n  get form() {\n    return this._internals?.form;\n  }\n\n  get validity() {\n    return this._internals?.validity;\n  }\n\n  get validationMessage() {\n    return this._internals?.validationMessage;\n  }\n\n  get willValidate() {\n    return this._internals?.willValidate;\n  }\n\n  checkValidity() {\n    return this._internals?.checkValidity();\n  }\n\n  reportValidity() {\n    return this._internals?.reportValidity();\n  }\n\n  setCustomValidity(message) {\n    this._internals?.setValidity({}, message);\n  }\n}\n\n// =============================================================================\n// REGISTER CUSTOM ELEMENT\n// =============================================================================\n\nif (!customElements.get('xaheen-button')) {\n  customElements.define('xaheen-button', XaheenButton);\n}\n\nexport default XaheenButton;"
      }
    ],
    "headless-ui": [
      {
        "path": "platforms/headless-ui/button.tsx",
        "type": "registry:component",
        "content": "/**\n * Headless UI Button Implementation\n * Enhanced React implementation using Headless UI patterns\n * Generated from universal ButtonSpec\n */\n\nimport React, { forwardRef } from 'react';\nimport { Button as HeadlessButton } from '@headlessui/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\nimport { UniversalTokens } from '../../core/universal-tokens';\n\n// =============================================================================\n// VARIANT DEFINITIONS\n// =============================================================================\n\nconst buttonVariants = cva(\n  [\n    'inline-flex items-center justify-center gap-2',\n    'rounded-md text-sm font-medium transition-colors',\n    'focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50 data-[disabled]:opacity-50',\n    'data-[focus]:ring-2 data-[focus]:ring-offset-2',\n    'select-none'\n  ],\n  {\n    variants: {\n      variant: {\n        primary: [\n          'bg-primary text-primary-foreground',\n          'hover:bg-primary/90 data-[hover]:bg-primary/90',\n          'focus-visible:ring-primary data-[focus]:ring-primary'\n        ],\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80 data-[hover]:bg-secondary/80',\n          'focus-visible:ring-secondary data-[focus]:ring-secondary'\n        ],\n        outline: [\n          'border border-input bg-background',\n          'hover:bg-accent hover:text-accent-foreground',\n          'data-[hover]:bg-accent data-[hover]:text-accent-foreground',\n          'focus-visible:ring-primary data-[focus]:ring-primary'\n        ],\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'data-[hover]:bg-accent data-[hover]:text-accent-foreground',\n          'focus-visible:ring-primary data-[focus]:ring-primary'\n        ],\n        destructive: [\n          'bg-destructive text-destructive-foreground',\n          'hover:bg-destructive/90 data-[hover]:bg-destructive/90',\n          'focus-visible:ring-destructive data-[focus]:ring-destructive'\n        ]\n      },\n      size: {\n        xs: 'h-8 px-3 text-xs',\n        sm: 'h-10 px-4 text-sm',\n        md: 'h-12 px-6 text-base',\n        lg: 'h-14 px-8 text-lg',\n        xl: 'h-16 px-10 text-xl'\n      }\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface HeadlessButtonProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'disabled'>,\n    VariantProps<typeof buttonVariants> {\n  /**\n   * Disabled state (uses Headless UI data attributes)\n   */\n  readonly disabled?: boolean;\n  \n  /**\n   * Show loading state with spinner\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Make button full width\n   */\n  readonly fullWidth?: boolean;\n  \n  /**\n   * Prefix icon element\n   */\n  readonly icon?: React.ReactNode;\n  \n  /**\n   * Suffix icon element\n   */\n  readonly suffixIcon?: React.ReactNode;\n  \n  /**\n   * Custom render function for advanced use cases\n   */\n  readonly render?: React.ComponentProps<typeof HeadlessButton>['as'];\n}\n\n// =============================================================================\n// LOADING SPINNER COMPONENT\n// =============================================================================\n\nconst LoadingSpinner = ({ size = 'md' }: { size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' }) => {\n  const sizeClasses = {\n    xs: 'h-3 w-3',\n    sm: 'h-3 w-3',\n    md: 'h-4 w-4',\n    lg: 'h-4 w-4',\n    xl: 'h-5 w-5'\n  };\n\n  return (\n    <svg\n      className={cn('animate-spin', sizeClasses[size])}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport const Button = forwardRef<HTMLButtonElement, HeadlessButtonProps>(\n  ({ \n    className,\n    variant,\n    size,\n    loading = false,\n    fullWidth = false,\n    icon,\n    suffixIcon,\n    disabled,\n    children,\n    render,\n    ...props \n  }, ref) => {\n    const isDisabled = disabled || loading;\n\n    return (\n      <HeadlessButton\n        as={render || 'button'}\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          fullWidth && 'w-full'\n        )}\n        ref={ref}\n        disabled={isDisabled}\n        {...props}\n      >\n        {loading && <LoadingSpinner size={size} />}\n        {!loading && icon && <span className=\"shrink-0\">{icon}</span>}\n        {children && (\n          <span className={loading ? 'opacity-70' : ''}>\n            {children}\n          </span>\n        )}\n        {!loading && suffixIcon && <span className=\"shrink-0\">{suffixIcon}</span>}\n      </HeadlessButton>\n    );\n  }\n);\n\nButton.displayName = 'HeadlessButton';\n\n// =============================================================================\n// ENHANCED HEADLESS UI VARIANTS\n// =============================================================================\n\n/**\n * Button Group using Headless UI patterns\n */\nexport const ButtonGroup = ({ \n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div \n      className={cn(\n        'inline-flex rounded-md shadow-sm',\n        '[&>*:not(:first-child)]:ml-px',\n        '[&>*:first-child]:rounded-r-none',\n        '[&>*:last-child]:rounded-l-none',\n        '[&>*:not(:first-child):not(:last-child)]:rounded-none',\n        className\n      )}\n      role=\"group\"\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n/**\n * Toggle Button using Headless UI state management\n */\nexport const ToggleButton = forwardRef<HTMLButtonElement, HeadlessButtonProps & {\n  pressed?: boolean;\n  onPressedChange?: (pressed: boolean) => void;\n}>(({ pressed = false, onPressedChange, children, className, ...props }, ref) => {\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        pressed && 'bg-accent text-accent-foreground',\n        className\n      )}\n      aria-pressed={pressed}\n      onClick={(e) => {\n        onPressedChange?.(!pressed);\n        props.onClick?.(e);\n      }}\n      {...props}\n    >\n      {children}\n    </Button>\n  );\n});\n\nToggleButton.displayName = 'ToggleButton';\n\n/**\n * Menu Button (can be used with Headless UI Menu)\n */\nexport const MenuButton = forwardRef<HTMLButtonElement, HeadlessButtonProps>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          'data-[open]:bg-accent data-[open]:text-accent-foreground',\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <svg\n          className=\"ml-2 h-4 w-4 shrink-0\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 20 20\"\n          fill=\"currentColor\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      </Button>\n    );\n  }\n);\n\nMenuButton.displayName = 'MenuButton';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const HeadlessButtonMeta = {\n  id: 'headless-button',\n  name: 'HeadlessButton',\n  platform: 'headless-ui',\n  category: 'atom',\n  description: 'Enhanced button component built with Headless UI patterns',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Built-in focus management via Headless UI',\n      'Screen reader support with proper ARIA',\n      'Keyboard navigation patterns',\n      'State management with data attributes',\n      'Composable with other Headless UI components'\n    ]\n  },\n  \n  bundle: {\n    size: '3.2kb',\n    dependencies: ['@headlessui/react', 'class-variance-authority'],\n    treeshakable: true\n  },\n  \n  features: {\n    dataAttributes: 'Uses data-[state] attributes for styling',\n    stateManagement: 'Built-in state management patterns',\n    composition: 'Compose with Menu, Dialog, Popover',\n    polymorphic: 'Polymorphic component support via \"as\" prop',\n    enhanced: 'Enhanced with Headless UI accessibility patterns'\n  },\n  \n  usage: {\n    basic: '<Button>Click me</Button>',\n    polymorphic: '<Button render=\"a\" href=\"/home\">Home</Button>',\n    toggle: '<ToggleButton pressed={isPressed} onPressedChange={setPressed}>Toggle</ToggleButton>',\n    menuButton: '<MenuButton>Options</MenuButton>',\n    buttonGroup: `\n      <ButtonGroup>\n        <Button>Left</Button>\n        <Button>Center</Button>\n        <Button>Right</Button>\n      </ButtonGroup>\n    `\n  }\n} as const;\n\nexport default Button;"
      }
    ],
    "radix": [
      {
        "path": "platforms/radix/button.tsx",
        "type": "registry:component",
        "content": "/**\n * Radix UI Button Implementation\n * Enhanced React implementation using Radix UI primitives\n * Generated from universal ButtonSpec\n */\n\nimport React, { forwardRef } from 'react';\nimport * as Slot from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\nimport { UniversalTokens } from '../../core/universal-tokens';\n\n// =============================================================================\n// VARIANT DEFINITIONS\n// =============================================================================\n\nconst buttonVariants = cva(\n  [\n    'inline-flex items-center justify-center gap-2',\n    'rounded-md text-sm font-medium transition-colors',\n    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',\n    'disabled:pointer-events-none disabled:opacity-50',\n    'select-none'\n  ],\n  {\n    variants: {\n      variant: {\n        primary: [\n          'bg-primary text-primary-foreground',\n          'hover:bg-primary/90',\n          'focus-visible:ring-primary'\n        ],\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80',\n          'focus-visible:ring-secondary'\n        ],\n        outline: [\n          'border border-input bg-background',\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary'\n        ],\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-primary'\n        ],\n        destructive: [\n          'bg-destructive text-destructive-foreground',\n          'hover:bg-destructive/90',\n          'focus-visible:ring-destructive'\n        ]\n      },\n      size: {\n        xs: 'h-8 px-3 text-xs',\n        sm: 'h-10 px-4 text-sm',\n        md: 'h-12 px-6 text-base',\n        lg: 'h-14 px-8 text-lg',\n        xl: 'h-16 px-10 text-xl'\n      }\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\nexport interface RadixButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  /**\n   * Render as a different element or component\n   */\n  readonly asChild?: boolean;\n  \n  /**\n   * Show loading state with spinner\n   */\n  readonly loading?: boolean;\n  \n  /**\n   * Make button full width\n   */\n  readonly fullWidth?: boolean;\n  \n  /**\n   * Prefix icon element\n   */\n  readonly icon?: React.ReactNode;\n  \n  /**\n   * Suffix icon element\n   */\n  readonly suffixIcon?: React.ReactNode;\n}\n\n// =============================================================================\n// LOADING SPINNER COMPONENT\n// =============================================================================\n\nconst LoadingSpinner = ({ size = 'md' }: { size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' }) => {\n  const sizeClasses = {\n    xs: 'h-3 w-3',\n    sm: 'h-3 w-3', \n    md: 'h-4 w-4',\n    lg: 'h-4 w-4',\n    xl: 'h-5 w-5'\n  };\n\n  return (\n    <svg\n      className={cn('animate-spin', sizeClasses[size])}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport const Button = forwardRef<HTMLButtonElement, RadixButtonProps>(\n  ({ \n    className,\n    variant,\n    size,\n    asChild = false,\n    loading = false,\n    fullWidth = false,\n    icon,\n    suffixIcon,\n    disabled,\n    children,\n    ...props \n  }, ref) => {\n    const Comp = asChild ? Slot.Slot : 'button';\n    const isDisabled = disabled || loading;\n\n    return (\n      <Comp\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          fullWidth && 'w-full'\n        )}\n        ref={ref}\n        disabled={isDisabled}\n        {...props}\n      >\n        {loading && <LoadingSpinner size={size} />}\n        {!loading && icon && <span className=\"shrink-0\">{icon}</span>}\n        {children && (\n          <span className={loading ? 'opacity-70' : ''}>\n            {children}\n          </span>\n        )}\n        {!loading && suffixIcon && <span className=\"shrink-0\">{suffixIcon}</span>}\n      </Comp>\n    );\n  }\n);\n\nButton.displayName = 'RadixButton';\n\n// =============================================================================\n// ENHANCED RADIX VARIANTS\n// =============================================================================\n\n/**\n * Enhanced button with Radix Tooltip integration\n */\nexport const TooltipButton = forwardRef<HTMLButtonElement, RadixButtonProps & {\n  tooltip?: string;\n  tooltipSide?: 'top' | 'right' | 'bottom' | 'left';\n}>(({ tooltip, tooltipSide = 'top', ...props }, ref) => {\n  if (!tooltip) {\n    return <Button ref={ref} {...props} />;\n  }\n\n  // In a real implementation, you'd use @radix-ui/react-tooltip\n  return (\n    <div title={tooltip}>\n      <Button ref={ref} {...props} />\n    </div>\n  );\n});\n\nTooltipButton.displayName = 'TooltipButton';\n\n/**\n * Button with Radix Dialog trigger integration\n */\nexport const DialogTriggerButton = forwardRef<HTMLButtonElement, RadixButtonProps>(\n  (props, ref) => {\n    // In a real implementation, you'd use @radix-ui/react-dialog\n    return <Button asChild ref={ref} {...props} />;\n  }\n);\n\nDialogTriggerButton.displayName = 'DialogTriggerButton';\n\n// =============================================================================\n// COMPONENT METADATA\n// =============================================================================\n\nexport const RadixButtonMeta = {\n  id: 'radix-button',\n  name: 'RadixButton',\n  platform: 'radix',\n  category: 'atom',\n  description: 'Enhanced button component built with Radix UI primitives',\n  \n  accessibility: {\n    wcagLevel: 'AAA' as const,\n    features: [\n      'Keyboard navigation via Radix primitives',\n      'Screen reader support with ARIA',\n      'Focus management',\n      'Composable with other Radix components',\n      'asChild pattern for semantic flexibility'\n    ]\n  },\n  \n  bundle: {\n    size: '2.8kb',\n    dependencies: ['@radix-ui/react-slot', 'class-variance-authority'],\n    treeshakable: true\n  },\n  \n  features: {\n    asChild: 'Render as different element using Radix Slot',\n    composition: 'Compose with Tooltip, Dialog, DropdownMenu',\n    polymorphic: 'Polymorphic component support',\n    enhanced: 'Enhanced with Radix UI accessibility'\n  },\n  \n  usage: {\n    basic: '<Button>Click me</Button>',\n    asChild: '<Button asChild><Link to=\"/home\">Home</Link></Button>',\n    withTooltip: '<TooltipButton tooltip=\"Save changes\">Save</TooltipButton>',\n    dialogTrigger: '<DialogTriggerButton>Open Modal</DialogTriggerButton>'\n  }\n} as const;\n\nexport default Button;"
      }
    ]
  },
  "platform": "vue"
}