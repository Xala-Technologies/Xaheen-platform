{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "progress",
  "type": "registry:component",
  "title": "Progress",
  "description": "Progress indicators with accessibility",
  "category": "components",
  "categories": [
    "components",
    "feedback",
    "display"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-progress"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/progress/progress.tsx",
      "type": "registry:component",
      "content": "/**\n * Progress Component - Professional Progress Indicators\n * CLAUDE.md Compliant: Professional styling and accessibility\n * WCAG AAA: Full keyboard navigation and screen reader support\n * CVA: Class Variance Authority for consistent styling\n */\n\nimport React, { useState, useMemo, useCallback, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\n\n// =============================================================================\n// PROGRESS VARIANTS\n// =============================================================================\n\nconst progressVariants = cva(\n  [\n    'relative overflow-hidden rounded-full bg-secondary',\n    'transition-all duration-300 ease-in-out'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-secondary',\n        destructive: 'bg-destructive/20',\n        warning: 'bg-yellow-200 dark:bg-yellow-900/30',\n        success: 'bg-green-200 dark:bg-green-900/30',\n        info: 'bg-blue-200 dark:bg-blue-900/30'\n      },\n      size: {\n        sm: 'h-2',\n        md: 'h-3',\n        lg: 'h-4',\n        xl: 'h-6'\n      },\n      animated: {\n        true: '',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      animated: false\n    }\n  }\n);\n\nconst progressIndicatorVariants = cva(\n  [\n    'h-full w-full flex-1 transition-all duration-500 ease-out',\n    'rounded-full'\n  ],\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary',\n        destructive: 'bg-destructive',\n        warning: 'bg-yellow-500',\n        success: 'bg-green-500',\n        info: 'bg-blue-500'\n      },\n      animated: {\n        true: 'bg-gradient-to-r animate-pulse',\n        false: ''\n      },\n      striped: {\n        true: 'bg-gradient-to-r from-transparent via-white/20 to-transparent bg-[length:40px_100%] animate-[shimmer_2s_infinite]',\n        false: ''\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      animated: false,\n      striped: false\n    }\n  }\n);\n\nconst circularProgressVariants = cva(\n  [\n    'relative inline-flex items-center justify-center'\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'w-16 h-16',\n        md: 'w-20 h-20',\n        lg: 'w-24 h-24',\n        xl: 'w-32 h-32'\n      }\n    },\n    defaultVariants: {\n      size: 'md'\n    }\n  }\n);\n\nconst stepperVariants = cva([\n  'flex items-center justify-between relative'\n]);\n\nconst stepVariants = cva(\n  [\n    'flex items-center justify-center relative z-10',\n    'rounded-full border-2 transition-all duration-300',\n    'font-medium text-sm'\n  ],\n  {\n    variants: {\n      status: {\n        pending: 'bg-secondary border-border text-muted-foreground',\n        active: 'bg-primary border-primary text-primary-foreground',\n        completed: 'bg-green-500 border-green-500 text-white',\n        error: 'bg-destructive border-destructive text-destructive-foreground'\n      },\n      size: {\n        sm: 'w-8 h-8 text-xs',\n        md: 'w-10 h-10 text-sm',\n        lg: 'w-12 h-12 text-base'\n      }\n    },\n    defaultVariants: {\n      status: 'pending',\n      size: 'md'\n    }\n  }\n);\n\n// =============================================================================\n// TYPE DEFINITIONS\n// =============================================================================\n\nexport interface ProgressProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof progressVariants> {\n  readonly value?: number | null;\n  readonly max?: number;\n  readonly showLabel?: boolean;\n  readonly label?: string;\n  readonly striped?: boolean;\n  readonly indeterminate?: boolean;\n  readonly ariaLabel?: string;\n  readonly ariaValueText?: string;\n}\n\nexport interface CircularProgressProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof circularProgressVariants> {\n  readonly value?: number | null;\n  readonly max?: number;\n  readonly showLabel?: boolean;\n  readonly label?: string;\n  readonly strokeWidth?: number;\n  readonly variant?: 'default' | 'destructive' | 'warning' | 'success' | 'info';\n  readonly indeterminate?: boolean;\n  readonly ariaLabel?: string;\n  readonly ariaValueText?: string;\n}\n\nexport interface StepperProps extends \n  React.HTMLAttributes<HTMLDivElement> {\n  readonly steps: readonly StepData[];\n  readonly currentStep: number;\n  readonly variant?: 'default' | 'numbered' | 'dots';\n  readonly size?: 'sm' | 'md' | 'lg';\n  readonly orientation?: 'horizontal' | 'vertical';\n  readonly showLabels?: boolean;\n  readonly onStepClick?: (stepIndex: number) => void;\n  readonly ariaLabel?: string;\n}\n\nexport interface StepData {\n  readonly id: string;\n  readonly label: string;\n  readonly description?: string;\n  readonly status?: 'pending' | 'active' | 'completed' | 'error';\n  readonly optional?: boolean;\n  readonly disabled?: boolean;\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\nconst clampValue = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(max, value));\n};\n\nconst formatProgress = (value: number, max = 100): string => {\n  const percentage = Math.round((value / max) * 100);\n  return `${percentage}%`;\n};\n\nconst getStepStatus = (stepIndex: number, currentStep: number, steps: readonly StepData[]): StepData['status'] => {\n  const step = steps[stepIndex];\n  if (step?.status) return step.status;\n  \n  if (stepIndex < currentStep) return 'completed';\n  if (stepIndex === currentStep) return 'active';\n  return 'pending';\n};\n\n// =============================================================================\n// PROGRESS COMPONENTS\n// =============================================================================\n\nexport const Progress = React.forwardRef<HTMLDivElement, ProgressProps>(({\n  className,\n  variant,\n  size,\n  animated,\n  value,\n  max = 100,\n  showLabel = false,\n  label,\n  striped = false,\n  indeterminate = false,\n  ariaLabel,\n  ariaValueText,\n  ...props\n}, ref) => {\n  const progressValue = value ?? 0;\n  const clampedValue = clampValue(progressValue, 0, max);\n  const percentage = (clampedValue / max) * 100;\n  \n  return (\n    <div\n      ref={ref}\n      className={cn(progressVariants({ variant, size, animated }), className)}\n      role=\"progressbar\"\n      aria-label={ariaLabel || 'Progress'}\n      aria-valuenow={indeterminate ? undefined : clampedValue}\n      aria-valuemin={0}\n      aria-valuemax={max}\n      aria-valuetext={ariaValueText || (indeterminate ? 'Loading...' : formatProgress(clampedValue, max))}\n      {...props}\n    >\n      <div\n        className={cn(\n          progressIndicatorVariants({ \n            variant, \n            animated: animated || indeterminate, \n            striped \n          }),\n          indeterminate && 'animate-[indeterminateProgress_2s_linear_infinite]'\n        )}\n        style={{\n          transform: indeterminate ? 'translateX(-100%)' : `translateX(-${100 - percentage}%)`\n        }}\n      />\n      \n      {showLabel && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-foreground mix-blend-difference\">\n            {label || formatProgress(clampedValue, max)}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport const CircularProgress = React.forwardRef<HTMLDivElement, CircularProgressProps>(({\n  className,\n  size,\n  value,\n  max = 100,\n  showLabel = false,\n  label,\n  strokeWidth = 8,\n  variant = 'default',\n  indeterminate = false,\n  ariaLabel,\n  ariaValueText,\n  ...props\n}, ref) => {\n  const progressValue = value ?? 0;\n  const clampedValue = clampValue(progressValue, 0, max);\n  const percentage = (clampedValue / max) * 100;\n  \n  const sizeMap = {\n    sm: { size: 64, radius: 24 },\n    md: { size: 80, radius: 32 },\n    lg: { size: 96, radius: 40 },\n    xl: { size: 128, radius: 56 }\n  };\n  \n  const { size: svgSize, radius } = sizeMap[size || 'md'];\n  const center = svgSize / 2;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = indeterminate ? 0 : circumference - (percentage / 100) * circumference;\n  \n  const getVariantColor = () => {\n    switch (variant) {\n      case 'destructive': return 'stroke-destructive';\n      case 'warning': return 'stroke-yellow-500';\n      case 'success': return 'stroke-green-500';\n      case 'info': return 'stroke-blue-500';\n      default: return 'stroke-primary';\n    }\n  };\n\n  return (\n    <div\n      ref={ref}\n      className={cn(circularProgressVariants({ size }), className)}\n      role=\"progressbar\"\n      aria-label={ariaLabel || 'Circular progress'}\n      aria-valuenow={indeterminate ? undefined : clampedValue}\n      aria-valuemin={0}\n      aria-valuemax={max}\n      aria-valuetext={ariaValueText || (indeterminate ? 'Loading...' : formatProgress(clampedValue, max))}\n      {...props}\n    >\n      <svg\n        width={svgSize}\n        height={svgSize}\n        viewBox={`0 0 ${svgSize} ${svgSize}`}\n        className=\"transform -rotate-90\"\n      >\n        {/* Background circle */}\n        <circle\n          cx={center}\n          cy={center}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          className=\"text-secondary opacity-20\"\n        />\n        \n        {/* Progress circle */}\n        <circle\n          cx={center}\n          cy={center}\n          r={radius}\n          fill=\"none\"\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          strokeDasharray={strokeDasharray}\n          strokeDashoffset={strokeDashoffset}\n          className={cn(\n            'transition-all duration-500 ease-out',\n            getVariantColor(),\n            indeterminate && 'animate-[circularProgress_2s_ease-in-out_infinite]'\n          )}\n          style={{\n            transformOrigin: `${center}px ${center}px`\n          }}\n        />\n      </svg>\n      \n      {showLabel && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <span className=\"text-sm font-medium text-foreground\">\n            {label || formatProgress(clampedValue, max)}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport const Stepper = React.forwardRef<HTMLDivElement, StepperProps>(({\n  className,\n  steps,\n  currentStep,\n  variant = 'default',\n  size = 'md',\n  orientation = 'horizontal',\n  showLabels = true,\n  onStepClick,\n  ariaLabel,\n  ...props\n}, ref) => {\n  const handleStepClick = useCallback((stepIndex: number) => {\n    if (onStepClick && !steps[stepIndex]?.disabled) {\n      onStepClick(stepIndex);\n    }\n  }, [onStepClick, steps]);\n\n  const handleKeyDown = useCallback((event: React.KeyboardEvent, stepIndex: number) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleStepClick(stepIndex);\n    }\n  }, [handleStepClick]);\n\n  if (orientation === 'vertical') {\n    return (\n      <div\n        ref={ref}\n        className={cn('space-y-4', className)}\n        role=\"group\"\n        aria-label={ariaLabel || 'Stepper'}\n        {...props}\n      >\n        {steps.map((step, index) => {\n          const status = getStepStatus(index, currentStep, steps);\n          const isClickable = onStepClick && !step.disabled;\n          \n          return (\n            <div key={step.id} className=\"flex items-start gap-4\">\n              <div className=\"flex flex-col items-center\">\n                <button\n                  className={cn(\n                    stepVariants({ status, size }),\n                    isClickable && 'hover:scale-110 focus:ring-2 focus:ring-primary/20 focus:ring-offset-2',\n                    !isClickable && 'cursor-default'\n                  )}\n                  onClick={() => handleStepClick(index)}\n                  onKeyDown={(e) => handleKeyDown(e, index)}\n                  disabled={!isClickable}\n                  aria-current={status === 'active' ? 'step' : undefined}\n                  aria-label={`Step ${index + 1}: ${step.label}`}\n                  type=\"button\"\n                >\n                  {variant === 'numbered' && (\n                    <span className=\"text-inherit\">\n                      {status === 'completed' ? (\n                        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                          <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n                        </svg>\n                      ) : (\n                        index + 1\n                      )}\n                    </span>\n                  )}\n                  \n                  {variant === 'dots' && <div className=\"w-2 h-2 rounded-full bg-current\" />}\n                  \n                  {variant === 'default' && (\n                    status === 'completed' ? (\n                      <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n                      </svg>\n                    ) : status === 'error' ? (\n                      <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n                      </svg>\n                    ) : (\n                      <span className=\"text-inherit\">{index + 1}</span>\n                    )\n                  )}\n                </button>\n                \n                {/* Connector line */}\n                {index < steps.length - 1 && (\n                  <div\n                    className={cn(\n                      'w-0.5 h-8 mt-2 transition-colors duration-300',\n                      index < currentStep ? 'bg-primary' : 'bg-border'\n                    )}\n                  />\n                )}\n              </div>\n              \n              {showLabels && (\n                <div className=\"flex-1 pb-8\">\n                  <div className=\"text-sm font-medium text-foreground\">\n                    {step.label}\n                    {step.optional && (\n                      <span className=\"text-xs text-muted-foreground ml-2\">(optional)</span>\n                    )}\n                  </div>\n                  {step.description && (\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {step.description}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  // Horizontal stepper\n  return (\n    <div\n      ref={ref}\n      className={cn(stepperVariants(), className)}\n      role=\"group\"\n      aria-label={ariaLabel || 'Stepper'}\n      {...props}\n    >\n      {steps.map((step, index) => {\n        const status = getStepStatus(index, currentStep, steps);\n        const isClickable = onStepClick && !step.disabled;\n        \n        return (\n          <div key={step.id} className=\"flex items-center flex-1\">\n            <div className=\"flex flex-col items-center\">\n              <button\n                className={cn(\n                  stepVariants({ status, size }),\n                  isClickable && 'hover:scale-110 focus:ring-2 focus:ring-primary/20 focus:ring-offset-2',\n                  !isClickable && 'cursor-default'\n                )}\n                onClick={() => handleStepClick(index)}\n                onKeyDown={(e) => handleKeyDown(e, index)}\n                disabled={!isClickable}\n                aria-current={status === 'active' ? 'step' : undefined}\n                aria-label={`Step ${index + 1}: ${step.label}`}\n                type=\"button\"\n              >\n                {variant === 'numbered' && (\n                  <span className=\"text-inherit\">\n                    {status === 'completed' ? (\n                      <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n                      </svg>\n                    ) : (\n                      index + 1\n                    )}\n                  </span>\n                )}\n                \n                {variant === 'dots' && <div className=\"w-2 h-2 rounded-full bg-current\" />}\n                \n                {variant === 'default' && (\n                  status === 'completed' ? (\n                    <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                      <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n                    </svg>\n                  ) : status === 'error' ? (\n                    <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                      <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n                    </svg>\n                  ) : (\n                    <span className=\"text-inherit\">{index + 1}</span>\n                  )\n                )}\n              </button>\n              \n              {showLabels && (\n                <div className=\"text-center mt-2\">\n                  <div className=\"text-xs font-medium text-foreground\">\n                    {step.label}\n                  </div>\n                  {step.optional && (\n                    <div className=\"text-xs text-muted-foreground\">(optional)</div>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            {/* Connector line */}\n            {index < steps.length - 1 && (\n              <div\n                className={cn(\n                  'flex-1 h-0.5 mx-4 transition-colors duration-300',\n                  index < currentStep ? 'bg-primary' : 'bg-border'\n                )}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n\n// Display names for React DevTools\nProgress.displayName = 'Progress';\nCircularProgress.displayName = 'CircularProgress';\nStepper.displayName = 'Stepper';\n\n// Export types and variants\nexport type { VariantProps, StepData };\nexport { progressVariants, progressIndicatorVariants, circularProgressVariants, stepperVariants, stepVariants };"
    }
  ]
}