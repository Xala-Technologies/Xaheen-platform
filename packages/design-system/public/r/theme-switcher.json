{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "theme-switcher",
  "type": "registry:component",
  "title": "Theme Switcher",
  "description": "Theme switching component with system preference detection",
  "category": "theme-components",
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "registryDependencies": [
    "utils",
    "button"
  ],
  "files": [
    {
      "path": "components/theme-switcher/theme-switcher.tsx",
      "type": "registry:component",
      "content": "/**\n * Theme Switcher Component - System theme detection and switching\n * WCAG AAA: Proper focus management and keyboard navigation\n * Norwegian language support with localized labels\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '../button/button';\nimport { cn } from '../../lib/utils';\n\n// Icon components (replace with your icon library)\nconst SunIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n    <path d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm0 13a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zm7-5a1 1 0 110 2h-1a1 1 0 110-2h1zM4 10a1 1 0 110 2H3a1 1 0 110-2h1zm11.536-5.536a1 1 0 011.414 0l.707.707a1 1 0 01-1.414 1.414l-.707-.707a1 1 0 010-1.414zm-12.02 9.9a1 1 0 011.414 0l.707.707a1 1 0 01-1.414 1.414l-.707-.707a1 1 0 010-1.414zm12.02 1.414a1 1 0 010-1.414l.707-.707a1 1 0 111.414 1.414l-.707.707a1 1 0 01-1.414 0zM4.464 4.464a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 0zM10 7a3 3 0 100 6 3 3 0 000-6zm0 2a1 1 0 100 2 1 1 0 000-2z\" />\n  </svg>\n);\n\nconst MoonIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n    <path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\" />\n  </svg>\n);\n\nconst SystemIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n    <path fillRule=\"evenodd\" d=\"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z\" clipRule=\"evenodd\" />\n  </svg>\n);\n\nexport type Theme = 'light' | 'dark' | 'system';\n\nexport interface ThemeSwitcherProps {\n  readonly defaultTheme?: Theme;\n  readonly storageKey?: string;\n  readonly className?: string;\n  readonly norwegianLabels?: boolean;\n  readonly showLabel?: boolean;\n  readonly variant?: 'dropdown' | 'toggle' | 'buttons';\n}\n\nexport const ThemeSwitcher: React.FC<ThemeSwitcherProps> = ({\n  defaultTheme = 'system',\n  storageKey = 'xaheen-theme',\n  className,\n  norwegianLabels = true,\n  showLabel = false,\n  variant = 'dropdown'\n}) => {\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\n  const [mounted, setMounted] = useState(false);\n\n  // Labels in Norwegian and English\n  const labels = {\n    light: norwegianLabels ? 'Lys' : 'Light',\n    dark: norwegianLabels ? 'Mørk' : 'Dark',\n    system: norwegianLabels ? 'System' : 'System',\n    switchTheme: norwegianLabels ? 'Bytt tema' : 'Switch theme',\n    currentTheme: norwegianLabels ? 'Nåværende tema' : 'Current theme'\n  };\n\n  // Apply theme on mount and changes\n  useEffect(() => {\n    setMounted(true);\n    \n    // Get stored theme or use default\n    const storedTheme = localStorage.getItem(storageKey) as Theme | null;\n    if (storedTheme) {\n      setTheme(storedTheme);\n    }\n  }, [storageKey]);\n\n  useEffect(() => {\n    if (!mounted) return;\n\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n\n    let effectiveTheme = theme;\n    if (theme === 'system') {\n      effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    }\n\n    root.classList.add(effectiveTheme);\n    localStorage.setItem(storageKey, theme);\n  }, [theme, storageKey, mounted]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    if (!mounted || theme !== 'system') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      const root = window.document.documentElement;\n      root.classList.remove('light', 'dark');\n      root.classList.add(mediaQuery.matches ? 'dark' : 'light');\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme, mounted]);\n\n  // Prevent hydration mismatch\n  if (!mounted) {\n    return null;\n  }\n\n  // Toggle variant (simple light/dark toggle)\n  if (variant === 'toggle') {\n    const isDark = theme === 'dark' || (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);\n    \n    return (\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={() => setTheme(isDark ? 'light' : 'dark')}\n        aria-label={`${labels.switchTheme}: ${isDark ? labels.light : labels.dark}`}\n        className={className}\n      >\n        {isDark ? <SunIcon /> : <MoonIcon />}\n      </Button>\n    );\n  }\n\n  // Buttons variant (three separate buttons)\n  if (variant === 'buttons') {\n    return (\n      <div className={cn('flex gap-2', className)} role=\"group\" aria-label={labels.switchTheme}>\n        <Button\n          variant={theme === 'light' ? 'primary' : 'outline'}\n          size={showLabel ? 'md' : 'icon'}\n          onClick={() => setTheme('light')}\n          aria-pressed={theme === 'light'}\n          aria-label={showLabel ? undefined : labels.light}\n        >\n          <SunIcon />\n          {showLabel && <span className=\"ml-2\">{labels.light}</span>}\n        </Button>\n        <Button\n          variant={theme === 'dark' ? 'primary' : 'outline'}\n          size={showLabel ? 'md' : 'icon'}\n          onClick={() => setTheme('dark')}\n          aria-pressed={theme === 'dark'}\n          aria-label={showLabel ? undefined : labels.dark}\n        >\n          <MoonIcon />\n          {showLabel && <span className=\"ml-2\">{labels.dark}</span>}\n        </Button>\n        <Button\n          variant={theme === 'system' ? 'primary' : 'outline'}\n          size={showLabel ? 'md' : 'icon'}\n          onClick={() => setTheme('system')}\n          aria-pressed={theme === 'system'}\n          aria-label={showLabel ? undefined : labels.system}\n        >\n          <SystemIcon />\n          {showLabel && <span className=\"ml-2\">{labels.system}</span>}\n        </Button>\n      </div>\n    );\n  }\n\n  // Dropdown variant (default)\n  const currentIcon = theme === 'light' ? <SunIcon /> : theme === 'dark' ? <MoonIcon /> : <SystemIcon />;\n  \n  return (\n    <div className={cn('relative', className)}>\n      <Button\n        variant=\"outline\"\n        size={showLabel ? 'md' : 'icon'}\n        aria-label={`${labels.currentTheme}: ${labels[theme]}`}\n        aria-haspopup=\"menu\"\n        aria-expanded=\"false\"\n        className=\"peer\"\n      >\n        {currentIcon}\n        {showLabel && <span className=\"ml-2\">{labels[theme]}</span>}\n      </Button>\n      \n      {/* Dropdown menu (simplified for this example) */}\n      <div \n        className=\"absolute right-0 mt-2 w-48 rounded-lg border bg-popover p-1 shadow-lg opacity-0 invisible peer-focus:opacity-100 peer-focus:visible hover:opacity-100 hover:visible transition-all\"\n        role=\"menu\"\n        aria-label={labels.switchTheme}\n      >\n        {(['light', 'dark', 'system'] as Theme[]).map((t) => (\n          <button\n            key={t}\n            onClick={() => setTheme(t)}\n            className={cn(\n              'flex w-full items-center gap-2 rounded-md px-3 py-2 text-sm font-medium transition-colors',\n              'hover:bg-accent hover:text-accent-foreground',\n              'focus:bg-accent focus:text-accent-foreground focus:outline-none',\n              theme === t && 'bg-accent text-accent-foreground'\n            )}\n            role=\"menuitem\"\n            aria-current={theme === t ? 'true' : undefined}\n          >\n            {t === 'light' && <SunIcon />}\n            {t === 'dark' && <MoonIcon />}\n            {t === 'system' && <SystemIcon />}\n            <span>{labels[t]}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nThemeSwitcher.displayName = 'ThemeSwitcher';\n\n// Export theme type\nexport type { Theme as ThemeType };"
    }
  ]
}