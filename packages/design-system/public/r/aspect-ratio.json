{
  "$schema": "https://xaheen.io/schemas/registry-item.schema.json",
  "name": "aspect-ratio",
  "type": "registry:component",
  "title": "Aspect Ratio",
  "description": "Maintain aspect ratio for content",
  "category": "components",
  "categories": [
    "components",
    "layout"
  ],
  "nsm": {
    "classification": "OPEN",
    "wcagLevel": "AAA",
    "norwegianOptimized": true
  },
  "platforms": [
    "react",
    "nextjs",
    "vue",
    "angular",
    "svelte",
    "react-native",
    "electron",
    "ionic",
    "vanilla",
    "headless-ui",
    "radix"
  ],
  "dependencies": [
    "@radix-ui/react-aspect-ratio"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "components/aspect-ratio/aspect-ratio.tsx",
      "type": "registry:component",
      "content": "import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { tokens } from '../../core/universal-tokens';\n\nconst aspectRatioVariants = cva(\n  'relative w-full overflow-hidden',\n  {\n    variants: {\n      ratio: {\n        square: 'aspect-square',\n        video: 'aspect-video',\n        '4/3': 'aspect-[4/3]',\n        '3/2': 'aspect-[3/2]',\n        '16/10': 'aspect-[16/10]',\n        '21/9': 'aspect-[21/9]',\n        '1/2': 'aspect-[1/2]',\n        '2/3': 'aspect-[2/3]',\n        '3/4': 'aspect-[3/4]',\n        '9/16': 'aspect-[9/16]',\n        portrait: 'aspect-[3/4]',\n        landscape: 'aspect-[4/3]',\n        ultrawide: 'aspect-[21/9]',\n        golden: 'aspect-[1.618/1]',\n      },\n      rounded: {\n        none: '',\n        sm: 'rounded-sm',\n        md: 'rounded-md',\n        lg: 'rounded-lg',\n        xl: 'rounded-xl',\n        '2xl': 'rounded-2xl',\n        '3xl': 'rounded-3xl',\n        full: 'rounded-full',\n      },\n      border: {\n        none: '',\n        thin: 'border border-gray-200',\n        medium: 'border-2 border-gray-200',\n        thick: 'border-4 border-gray-200',\n        accent: 'border-2 border-blue-200',\n      },\n      shadow: {\n        none: '',\n        sm: 'shadow-sm',\n        md: 'shadow-md',\n        lg: 'shadow-lg',\n        xl: 'shadow-xl',\n      },\n    },\n    defaultVariants: {\n      ratio: 'square',\n      rounded: 'md',\n      border: 'none',\n      shadow: 'none',\n    },\n  }\n);\n\ninterface AspectRatioProps extends VariantProps<typeof aspectRatioVariants> {\n  readonly children: React.ReactNode;\n  readonly customRatio?: number;\n  readonly className?: string;\n  readonly style?: React.CSSProperties;\n  readonly onResize?: (dimensions: { width: number; height: number }) => void;\n  readonly maintainObjectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';\n}\n\nexport const AspectRatio = ({\n  children,\n  ratio,\n  customRatio,\n  rounded,\n  border,\n  shadow,\n  className,\n  style,\n  onResize,\n  maintainObjectFit,\n}: AspectRatioProps): JSX.Element => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  const updateDimensions = useCallback(() => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      const newDimensions = {\n        width: rect.width,\n        height: rect.height,\n      };\n      setDimensions(newDimensions);\n      onResize?.(newDimensions);\n    }\n  }, [onResize]);\n\n  useEffect(() => {\n    updateDimensions();\n\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [updateDimensions]);\n\n  const containerStyle: React.CSSProperties = {\n    ...style,\n    ...(customRatio && {\n      aspectRatio: `${customRatio}`,\n    }),\n  };\n\n  const childStyle: React.CSSProperties = maintainObjectFit\n    ? {\n        width: '100%',\n        height: '100%',\n        objectFit: maintainObjectFit,\n      }\n    : {};\n\n  return (\n    <div\n      ref={containerRef}\n      className={aspectRatioVariants({\n        ratio: customRatio ? undefined : ratio,\n        rounded,\n        border,\n        shadow,\n        className,\n      })}\n      style={containerStyle}\n    >\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        {React.Children.map(children, (child) => {\n          if (React.isValidElement(child)) {\n            // Apply object-fit styles to img, video, iframe elements\n            if (\n              maintainObjectFit &&\n              (child.type === 'img' || child.type === 'video' || child.type === 'iframe')\n            ) {\n              return React.cloneElement(child, {\n                style: { ...child.props.style, ...childStyle },\n              });\n            }\n          }\n          return child;\n        })}\n      </div>\n    </div>\n  );\n};\n\ninterface ResponsiveAspectRatioProps {\n  readonly children: React.ReactNode;\n  readonly ratios: {\n    readonly sm?: AspectRatioProps['ratio'] | number;\n    readonly md?: AspectRatioProps['ratio'] | number;\n    readonly lg?: AspectRatioProps['ratio'] | number;\n    readonly xl?: AspectRatioProps['ratio'] | number;\n  };\n  readonly className?: string;\n  readonly style?: React.CSSProperties;\n}\n\nexport const ResponsiveAspectRatio = ({\n  children,\n  ratios,\n  className,\n  style,\n}: ResponsiveAspectRatioProps): JSX.Element => {\n  const [currentBreakpoint, setCurrentBreakpoint] = useState<'sm' | 'md' | 'lg' | 'xl'>('md');\n\n  useEffect(() => {\n    const updateBreakpoint = () => {\n      const width = window.innerWidth;\n      if (width >= 1280 && ratios.xl) {\n        setCurrentBreakpoint('xl');\n      } else if (width >= 1024 && ratios.lg) {\n        setCurrentBreakpoint('lg');\n      } else if (width >= 768 && ratios.md) {\n        setCurrentBreakpoint('md');\n      } else if (ratios.sm) {\n        setCurrentBreakpoint('sm');\n      } else {\n        setCurrentBreakpoint('md');\n      }\n    };\n\n    updateBreakpoint();\n    window.addEventListener('resize', updateBreakpoint);\n\n    return () => {\n      window.removeEventListener('resize', updateBreakpoint);\n    };\n  }, [ratios]);\n\n  const currentRatio = ratios[currentBreakpoint];\n  const isCustomRatio = typeof currentRatio === 'number';\n\n  return (\n    <AspectRatio\n      ratio={isCustomRatio ? undefined : (currentRatio as AspectRatioProps['ratio'])}\n      customRatio={isCustomRatio ? (currentRatio as number) : undefined}\n      className={className}\n      style={style}\n    >\n      {children}\n    </AspectRatio>\n  );\n};\n\ninterface MediaAspectRatioProps extends Omit<AspectRatioProps, 'children'> {\n  readonly src: string;\n  readonly alt?: string;\n  readonly type?: 'image' | 'video';\n  readonly poster?: string;\n  readonly controls?: boolean;\n  readonly autoPlay?: boolean;\n  readonly loop?: boolean;\n  readonly muted?: boolean;\n  readonly loading?: 'lazy' | 'eager';\n  readonly placeholder?: React.ReactNode;\n  readonly fallback?: React.ReactNode;\n  readonly onLoad?: () => void;\n  readonly onError?: (error: Event) => void;\n}\n\nexport const MediaAspectRatio = ({\n  src,\n  alt,\n  type = 'image',\n  poster,\n  controls = true,\n  autoPlay = false,\n  loop = false,\n  muted = false,\n  loading = 'lazy',\n  placeholder,\n  fallback,\n  onLoad,\n  onError,\n  maintainObjectFit = 'cover',\n  ...aspectRatioProps\n}: MediaAspectRatioProps): JSX.Element => {\n  const [mediaLoaded, setMediaLoaded] = useState(false);\n  const [mediaError, setMediaError] = useState(false);\n\n  const handleLoad = useCallback(() => {\n    setMediaLoaded(true);\n    onLoad?.();\n  }, [onLoad]);\n\n  const handleError = useCallback((error: React.SyntheticEvent<HTMLImageElement | HTMLVideoElement>) => {\n    setMediaError(true);\n    onError?.(error.nativeEvent);\n  }, [onError]);\n\n  const renderMedia = (): React.ReactNode => {\n    if (mediaError && fallback) {\n      return fallback;\n    }\n\n    if (type === 'video') {\n      return (\n        <video\n          src={src}\n          poster={poster}\n          controls={controls}\n          autoPlay={autoPlay}\n          loop={loop}\n          muted={muted}\n          onLoadedData={handleLoad}\n          onError={handleError}\n          className=\"w-full h-full\"\n          style={{\n            objectFit: maintainObjectFit,\n          }}\n        >\n          Your browser does not support the video tag.\n        </video>\n      );\n    }\n\n    return (\n      <img\n        src={src}\n        alt={alt || ''}\n        loading={loading}\n        onLoad={handleLoad}\n        onError={handleError}\n        className=\"w-full h-full\"\n        style={{\n          objectFit: maintainObjectFit,\n        }}\n      />\n    );\n  };\n\n  return (\n    <AspectRatio {...aspectRatioProps} maintainObjectFit={undefined}>\n      {!mediaLoaded && !mediaError && placeholder && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100\">\n          {placeholder}\n        </div>\n      )}\n      {renderMedia()}\n    </AspectRatio>\n  );\n};\n\ninterface PlaceholderAspectRatioProps extends AspectRatioProps {\n  readonly icon?: React.ReactNode;\n  readonly text?: string;\n  readonly backgroundColor?: string;\n  readonly textColor?: string;\n}\n\nexport const PlaceholderAspectRatio = ({\n  icon,\n  text = 'Content placeholder',\n  backgroundColor = 'bg-gray-100',\n  textColor = 'text-gray-500',\n  children,\n  ...aspectRatioProps\n}: PlaceholderAspectRatioProps): JSX.Element => {\n  const defaultIcon = (\n    <svg\n      className=\"h-12 w-12 mx-auto text-gray-400\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1}\n        d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n      />\n    </svg>\n  );\n\n  return (\n    <AspectRatio {...aspectRatioProps}>\n      <div className={`flex flex-col items-center justify-center h-full ${backgroundColor}`}>\n        {icon || defaultIcon}\n        {text && (\n          <p className={`mt-2 text-sm text-center ${textColor}`}>\n            {text}\n          </p>\n        )}\n        {children}\n      </div>\n    </AspectRatio>\n  );\n};\n\n// Common aspect ratio presets\nexport const AspectRatioPresets = {\n  Square: (props: Omit<AspectRatioProps, 'ratio'>) => (\n    <AspectRatio {...props} ratio=\"square\" />\n  ),\n  Video: (props: Omit<AspectRatioProps, 'ratio'>) => (\n    <AspectRatio {...props} ratio=\"video\" />\n  ),\n  Portrait: (props: Omit<AspectRatioProps, 'ratio'>) => (\n    <AspectRatio {...props} ratio=\"portrait\" />\n  ),\n  Landscape: (props: Omit<AspectRatioProps, 'ratio'>) => (\n    <AspectRatio {...props} ratio=\"landscape\" />\n  ),\n  Golden: (props: Omit<AspectRatioProps, 'ratio'>) => (\n    <AspectRatio {...props} ratio=\"golden\" />\n  ),\n  Ultrawide: (props: Omit<AspectRatioProps, 'ratio'>) => (\n    <AspectRatio {...props} ratio=\"ultrawide\" />\n  ),\n};\n\n// Utility function to calculate aspect ratio from dimensions\nexport const calculateAspectRatio = (width: number, height: number): number => {\n  return width / height;\n};\n\n// Utility function to get dimensions from aspect ratio and width\nexport const getDimensionsFromRatio = (\n  ratio: number,\n  width: number\n): { width: number; height: number } => {\n  return {\n    width,\n    height: width / ratio,\n  };\n};\n\n// Utility function to get common aspect ratios\nexport const getCommonRatios = () => ({\n  square: 1,\n  video: 16 / 9,\n  portrait: 3 / 4,\n  landscape: 4 / 3,\n  ultrawide: 21 / 9,\n  golden: 1.618,\n  '4:3': 4 / 3,\n  '3:2': 3 / 2,\n  '16:10': 16 / 10,\n  '21:9': 21 / 9,\n  '1:2': 1 / 2,\n  '2:3': 2 / 3,\n  '9:16': 9 / 16,\n});"
    }
  ]
}