import type OpenAI from 'openai';

export interface ChatCompletionOptions {
  model?: string;
  temperature?: number;
  maxTokens?: number;
  systemPrompt?: string;
}

export interface EmbeddingOptions {
  model?: 'text-embedding-3-small' | 'text-embedding-3-large' | 'text-embedding-ada-002';
  dimensions?: number;
}

export interface ImageGenerationOptions {
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  quality?: 'standard' | 'hd';
  n?: number;
  style?: 'natural' | 'vivid';
}

export interface StreamingOptions extends ChatCompletionOptions {
  onChunk?: (chunk: string) => void;
  onComplete?: (fullText: string) => void;
  onError?: (error: Error) => void;
}

export interface OpenAIConfig {
  apiKey: string;
  organization?: string;
  baseURL?: string;
  defaultModel?: string;
  timeout?: number;
}

export type ChatMessage = OpenAI.Chat.ChatCompletionMessageParam;

export interface FunctionCall {
  name: string;
  description: string;
  parameters: {
    type: 'object';
    properties: Record<string, {
      type: string;
      description: string;
      enum?: string[];
    }>;
    required?: string[];
  };
}

export interface ChatCompletionWithFunctions extends ChatCompletionOptions {
  functions?: FunctionCall[];
  function_call?: 'auto' | 'none' | { name: string };
}

export interface OpenAIUsage {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
}

export interface OpenAIResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  usage?: OpenAIUsage;
  choices: Array<{
    message?: OpenAI.Chat.ChatCompletionMessage;
    delta?: OpenAI.Chat.ChatCompletionChunk.Choice.Delta;
    finish_reason: string | null;
    index: number;
  }>;
}