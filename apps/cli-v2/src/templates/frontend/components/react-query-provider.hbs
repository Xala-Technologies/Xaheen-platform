'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { useState } from 'react';

interface ReactQueryProviderProps {
  children: React.ReactNode;
}

export function ReactQueryProvider({ children }: ReactQueryProviderProps) {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            // With SSR, we usually want to set some default staleTime
            // above 0 to avoid refetching immediately on the client
            staleTime: 60 * 1000, // 1 minute
            gcTime: 10 * 60 * 1000, // 10 minutes
            {{#if enableRetry}}
            retry: (failureCount, error) => {
              // Don't retry on 4xx errors
              if (error instanceof Error && 'status' in error) {
                const status = (error as any).status;
                if (status >= 400 && status < 500) {
                  return false;
                }
              }
              return failureCount < 3;
            },
            {{/if}}
            {{#if enableRefetchOnWindowFocus}}
            refetchOnWindowFocus: false,
            {{/if}}
          },
          mutations: {
            {{#if enableMutationRetry}}
            retry: 1,
            {{/if}}
          },
        },
      }),
  );

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      {{#if enableDevtools}}
      <ReactQueryDevtools 
        initialIsOpen={false} 
        position="bottom-right"
        {{#if devtoolsOptions}}
        buttonPosition="{{devtoolsOptions.buttonPosition}}"
        {{/if}}
      />
      {{/if}}
    </QueryClientProvider>
  );
}