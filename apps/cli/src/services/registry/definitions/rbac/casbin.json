{
  "id": "rbac-casbin-2025-01-03",
  "name": "casbin",
  "displayName": "Casbin RBAC Authorization",
  "description": "Authorization library that supports access control models like ACL, RBAC, ABAC for multi-tenant applications with complex permission requirements.",
  "type": "rbac",
  "provider": "casbin",
  "version": "1.0.0",
  "author": "Casbin",
  "license": "Apache-2.0",
  "homepage": "https://casbin.org",
  "repository": "https://github.com/casbin/node-casbin",
  "keywords": ["rbac", "authorization", "access-control", "permissions", "multi-tenant"],
  "tags": ["enterprise", "saas", "security", "authorization"],
  
  "frameworks": [
    {
      "name": "next",
      "versions": ["13.x", "14.x", "15.x"],
      "priority": 100
    },
    {
      "name": "node",
      "versions": ["18.x", "20.x", "22.x"],
      "priority": 100
    },
    {
      "name": "express",
      "versions": ["4.x"],
      "priority": 90
    }
  ],
  
  "platforms": [
    {
      "name": "web",
      "architecture": ["x86_64", "arm64"],
      "os": ["linux", "darwin", "windows"]
    },
    {
      "name": "serverless",
      "cloud": {
        "providers": ["vercel", "netlify", "aws"],
        "services": ["functions", "edge-runtime", "lambda"]
      }
    }
  ],
  
  "databases": ["postgresql", "mysql", "mongodb", "redis"],
  "runtimes": ["node", "bun"],
  
  "injectionPoints": [
    {
      "path": "lib/casbin.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 100,
      "templatePath": "rbac/casbin/core/casbin.ts.hbs"
    },
    {
      "path": "lib/rbac.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 95,
      "templatePath": "rbac/casbin/rbac-service.ts.hbs"
    },
    {
      "path": "config/rbac_model.conf",
      "type": "file",
      "strategy": "replace",
      "priority": 90,
      "templatePath": "rbac/casbin/config/rbac_model.conf.hbs"
    },
    {
      "path": "config/rbac_policy.csv",
      "type": "file",
      "strategy": "replace",
      "priority": 85,
      "templatePath": "rbac/casbin/config/rbac_policy.csv.hbs"
    },
    {
      "path": "middleware/rbac-middleware.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 80,
      "templatePath": "rbac/casbin/middleware/rbac-middleware.ts.hbs"
    },
    {
      "path": "app/api/rbac/check/route.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 75,
      "condition": "eq framework 'next'",
      "templatePath": "rbac/casbin/next/rbac-check-route.ts.hbs"
    },
    {
      "path": "app/api/rbac/manage/route.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 70,
      "condition": "and (eq framework 'next') config.enableManagementApi",
      "templatePath": "rbac/casbin/next/rbac-manage-route.ts.hbs"
    },
    {
      "path": "components/rbac/permission-guard.tsx",
      "type": "file",
      "strategy": "replace",
      "priority": 65,
      "condition": "includes frameworks 'next' 'react'",
      "templatePath": "rbac/casbin/components/permission-guard.tsx.hbs"
    },
    {
      "path": "hooks/use-permissions.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 60,
      "condition": "includes frameworks 'next' 'react'",
      "templatePath": "rbac/casbin/hooks/use-permissions.ts.hbs"
    },
    {
      "path": ".env.local.example",
      "type": "env-file",
      "strategy": "append",
      "priority": 10,
      "templatePath": "rbac/casbin/env.hbs"
    }
  ],
  
  "envVariables": [
    {
      "name": "RBAC_MODEL_PATH",
      "description": "Path to Casbin RBAC model file",
      "required": false,
      "defaultValue": "./config/rbac_model.conf",
      "type": "string"
    },
    {
      "name": "RBAC_POLICY_PATH",
      "description": "Path to Casbin policy file (for file adapter)",
      "required": false,
      "defaultValue": "./config/rbac_policy.csv",
      "type": "string"
    },
    {
      "name": "RBAC_ADAPTER_TYPE",
      "description": "Type of Casbin adapter to use",
      "required": false,
      "defaultValue": "file",
      "type": "string"
    }
  ],
  
  "dependencies": [
    {
      "name": "casbin",
      "version": "^5.26.2",
      "type": "runtime",
      "reason": "Core Casbin authorization library"
    },
    {
      "name": "typeorm-adapter",
      "version": "^2.0.3",
      "type": "runtime",
      "condition": "includes databases 'postgresql' 'mysql'",
      "reason": "TypeORM adapter for Casbin policy storage"
    },
    {
      "name": "mongoose-adapter",
      "version": "^1.0.0",
      "type": "runtime",
      "condition": "eq database 'mongodb'",
      "reason": "Mongoose adapter for Casbin policy storage"
    },
    {
      "name": "redis-adapter",
      "version": "^3.0.0",
      "type": "runtime",
      "condition": "config.enableRedisAdapter",
      "reason": "Redis adapter for Casbin policy storage"
    },
    {
      "name": "@types/casbin",
      "version": "^5.26.0",
      "type": "dev",
      "reason": "TypeScript types for Casbin"
    }
  ],
  
  "postInjectionSteps": [
    {
      "name": "install-dependencies",
      "command": "npm install",
      "description": "Install Casbin RBAC dependencies",
      "timeout": 120000
    },
    {
      "name": "create-rbac-tables",
      "command": "node -e \"console.log('Create casbin_rule table in your database for policy storage')\"",
      "description": "Create database tables for policy storage",
      "condition": "includes databases 'postgresql' 'mysql'"
    },
    {
      "name": "verify-casbin-setup",
      "command": "node -e \"const { newEnforcer } = require('casbin'); newEnforcer('./config/rbac_model.conf', './config/rbac_policy.csv').then(e => { console.log('Casbin enforcer created successfully'); }).catch(err => { console.error('Casbin setup failed:', err.message); process.exit(1); })\"",
      "description": "Verify Casbin configuration",
      "timeout": 30000
    }
  ],
  
  "requirements": {
    "node": {
      "min": "16.0.0",
      "lts": true
    },
    "memory": {
      "min": "128MB",
      "recommended": "256MB"
    }
  },
  
  "multiTenant": true,
  "compliance": ["gdpr", "hipaa", "soc2", "iso27001"],
  
  "scalingRequirements": {
    "horizontal": true,
    "vertical": true,
    "stateless": true
  },
  
  "category": "rbac",
  "subcategory": "authorization",
  "maturity": "stable",
  "supportLevel": "community",
  
  "configSchema": {
    "type": "object",
    "properties": {
      "model": {
        "type": "string",
        "default": "rbac_with_domains",
        "enum": ["rbac", "rbac_with_domains", "abac", "acl"],
        "description": "Access control model to use"
      },
      "enableManagementApi": {
        "type": "boolean",
        "default": false,
        "description": "Enable REST API for policy management"
      },
      "enableRedisAdapter": {
        "type": "boolean",
        "default": false,
        "description": "Use Redis adapter for policy storage"
      },
      "enableWatcher": {
        "type": "boolean",
        "default": false,
        "description": "Enable policy watcher for real-time updates"
      },
      "defaultRoles": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {"type": "string"},
            "permissions": {"type": "array", "items": {"type": "string"}},
            "domain": {"type": "string"}
          }
        },
        "default": [
          {
            "name": "admin",
            "permissions": ["read", "write", "delete"],
            "domain": "default"
          },
          {
            "name": "user",
            "permissions": ["read"],
            "domain": "default"
          }
        ],
        "description": "Default roles to create"
      },
      "enableTenantIsolation": {
        "type": "boolean",
        "default": true,
        "description": "Enable tenant-based domain isolation"
      },
      "enableHierarchicalRoles": {
        "type": "boolean",
        "default": false,
        "description": "Enable hierarchical role inheritance"
      },
      "enableAttributeBasedAccess": {
        "type": "boolean",
        "default": false,
        "description": "Enable attribute-based access control (ABAC)"
      }
    }
  },
  
  "defaultConfig": {
    "model": "rbac_with_domains",
    "enableManagementApi": false,
    "enableRedisAdapter": false,
    "enableWatcher": false,
    "defaultRoles": [
      {
        "name": "admin",
        "permissions": ["read", "write", "delete"],
        "domain": "default"
      },
      {
        "name": "user",
        "permissions": ["read"],
        "domain": "default"
      }
    ],
    "enableTenantIsolation": true,
    "enableHierarchicalRoles": false,
    "enableAttributeBasedAccess": false
  },
  
  "examples": [
    {
      "name": "basic-rbac",
      "description": "Basic RBAC with roles and permissions",
      "config": {
        "model": "rbac",
        "enableTenantIsolation": false
      }
    },
    {
      "name": "multi-tenant-rbac",
      "description": "Multi-tenant RBAC with domain isolation",
      "config": {
        "model": "rbac_with_domains",
        "enableTenantIsolation": true,
        "enableManagementApi": true
      }
    },
    {
      "name": "advanced-authorization",
      "description": "Advanced authorization with ABAC and hierarchical roles",
      "config": {
        "model": "abac",
        "enableAttributeBasedAccess": true,
        "enableHierarchicalRoles": true,
        "enableWatcher": true
      }
    }
  ],
  
  "testing": {
    "unit": {
      "framework": "jest",
      "testPaths": ["__tests__/rbac"]
    },
    "integration": {
      "framework": "jest",
      "services": ["database"]
    }
  },
  
  "security": {
    "vulnerabilityScanning": {
      "enabled": true,
      "tools": ["npm-audit"]
    }
  },
  
  "compliance": {
    "standards": ["gdpr", "hipaa", "soc2", "iso27001"],
    "dataHandling": {
      "personalData": true,
      "encryption": false,
      "audit": true
    }
  },
  
  "createdAt": "2025-01-03T00:00:00.000Z",
  "updatedAt": "2025-01-03T00:00:00.000Z",
  "createdBy": "backend-expert-agent"
}