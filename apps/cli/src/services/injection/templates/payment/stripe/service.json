{
  "name": "stripe-payments",
  "type": "payment",
  "provider": "stripe",
  "version": "1.0.0",
  "description": "Stripe payment processing with subscription and one-time payment support",
  "injectionPoints": [
    {
      "path": "lib/stripe.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 100,
      "template": "// Stripe Configuration\n// Generated by Xaheen CLI\n\nimport Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY is required\");\n}\n\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2024-06-20\",\n  typescript: true,\n});\n\nexport const STRIPE_CONFIG = {\n  currency: \"{{config.currency}}\",\n  successUrl: process.env.NEXT_PUBLIC_APP_URL + \"/payment/success\",\n  cancelUrl: process.env.NEXT_PUBLIC_APP_URL + \"/payment/cancel\",\n  {{#if config.enableSubscriptions}}\n  subscriptions: {\n    enabled: true,\n    priceIds: {\n      {{#each config.subscriptionPlans}}\n      {{name}}: \"{{priceId}}\",\n      {{/each}}\n    }\n  },\n  {{/if}}\n  {{#if config.enableWebhooks}}\n  webhooks: {\n    endpoint: \"/api/webhooks/stripe\",\n    secret: process.env.STRIPE_WEBHOOK_SECRET\n  }\n  {{/if}}\n};"
    },
    {
      "path": "lib/stripe-client.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 90,
      "template": "// Stripe Client Configuration\n// Generated by Xaheen CLI\n\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nif (!process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY) {\n  throw new Error(\"NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY is required\");\n}\n\nexport const stripePromise = loadStripe(\n  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY\n);\n\nexport const STRIPE_PUBLIC_CONFIG = {\n  currency: \"{{config.currency}}\",\n  appearance: {\n    theme: \"{{config.theme}}\",\n    variables: {\n      colorPrimary: \"{{config.primaryColor}}\",\n    },\n  },\n};"
    },
    {
      "path": "app/api/stripe/checkout/route.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 80,
      "condition": "eq config.framework 'next'",
      "template": "// Stripe Checkout API Route\n// Generated by Xaheen CLI\n\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { stripe, STRIPE_CONFIG } from \"@/lib/stripe\";\nimport { auth } from \"@/lib/auth\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth.api.getSession({\n      headers: request.headers\n    });\n\n    if (!session?.user) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const { priceId, mode = \"payment\", quantity = 1 } = await request.json();\n\n    if (!priceId) {\n      return NextResponse.json(\n        { error: \"Price ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const checkoutSession = await stripe.checkout.sessions.create({\n      mode: mode as \"payment\" | \"subscription\",\n      customer_email: session.user.email,\n      line_items: [\n        {\n          price: priceId,\n          quantity,\n        },\n      ],\n      success_url: STRIPE_CONFIG.successUrl + \"?session_id={CHECKOUT_SESSION_ID}\",\n      cancel_url: STRIPE_CONFIG.cancelUrl,\n      metadata: {\n        userId: session.user.id,\n        priceId,\n        mode,\n      },\n      {{#if config.enableSubscriptions}}\n      subscription_data: mode === \"subscription\" ? {\n        metadata: {\n          userId: session.user.id,\n        },\n      } : undefined,\n      {{/if}}\n    });\n\n    return NextResponse.json({ \n      sessionId: checkoutSession.id,\n      url: checkoutSession.url \n    });\n  } catch (error) {\n    console.error(\"Stripe checkout error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": "app/api/webhooks/stripe/route.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 70,
      "condition": "and (eq config.framework 'next') config.enableWebhooks",
      "template": "// Stripe Webhooks API Route\n// Generated by Xaheen CLI\n\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { stripe, STRIPE_CONFIG } from \"@/lib/stripe\";\nimport Stripe from \"stripe\";\n\nexport async function POST(request: NextRequest) {\n  const body = await request.text();\n  const signature = request.headers.get(\"stripe-signature\");\n\n  if (!signature || !STRIPE_CONFIG.webhooks.secret) {\n    return NextResponse.json(\n      { error: \"Missing stripe signature or webhook secret\" },\n      { status: 400 }\n    );\n  }\n\n  let event: Stripe.Event;\n\n  try {\n    event = stripe.webhooks.constructEvent(\n      body,\n      signature,\n      STRIPE_CONFIG.webhooks.secret\n    );\n  } catch (error) {\n    console.error(\"Webhook signature verification failed:\", error);\n    return NextResponse.json(\n      { error: \"Webhook signature verification failed\" },\n      { status: 400 }\n    );\n  }\n\n  try {\n    switch (event.type) {\n      case \"checkout.session.completed\": {\n        const session = event.data.object as Stripe.Checkout.Session;\n        console.log(\"Payment successful:\", session.id);\n        \n        // Handle successful payment\n        // You can update your database here\n        \n        break;\n      }\n      \n      {{#if config.enableSubscriptions}}\n      case \"customer.subscription.created\":\n      case \"customer.subscription.updated\":\n      case \"customer.subscription.deleted\": {\n        const subscription = event.data.object as Stripe.Subscription;\n        console.log(`Subscription ${event.type}:`, subscription.id);\n        \n        // Handle subscription changes\n        // You can update your database here\n        \n        break;\n      }\n      \n      case \"invoice.payment_succeeded\":\n      case \"invoice.payment_failed\": {\n        const invoice = event.data.object as Stripe.Invoice;\n        console.log(`Invoice ${event.type}:`, invoice.id);\n        \n        // Handle invoice events\n        // You can update your database here\n        \n        break;\n      }\n      {{/if}}\n      \n      default:\n        console.log(`Unhandled event type: ${event.type}`);\n    }\n\n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error(\"Webhook handler error:\", error);\n    return NextResponse.json(\n      { error: \"Webhook handler failed\" },\n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": ".env.local.example",
      "type": "file",
      "strategy": "append",
      "priority": 10,
      "template": "\n# Stripe Configuration\nSTRIPE_SECRET_KEY=sk_test_your_stripe_secret_key\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key\n{{#if config.enableWebhooks}}STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n{{/if}}"
    }
  ],
  "envVariables": [
    {
      "name": "STRIPE_SECRET_KEY",
      "description": "Stripe secret key for server-side operations",
      "required": true,
      "type": "secret"
    },
    {
      "name": "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY",
      "description": "Stripe publishable key for client-side operations",
      "required": true,
      "type": "string"
    },
    {
      "name": "STRIPE_WEBHOOK_SECRET",
      "description": "Stripe webhook secret for verifying webhook signatures",
      "required": false,
      "type": "secret"
    }
  ],
  "dependencies": [
    {
      "name": "stripe",
      "version": "^14.0.0",
      "type": "runtime"
    },
    {
      "name": "@stripe/stripe-js",
      "version": "^2.0.0",
      "type": "runtime"
    },
    {
      "name": "@stripe/react-stripe-js",
      "version": "^2.0.0",
      "type": "runtime",
      "condition": "eq config.framework 'next'"
    }
  ],
  "postInjectionSteps": [
    {
      "name": "install-dependencies",
      "command": "npm install",
      "description": "Install Stripe dependencies"
    },
    {
      "name": "setup-webhook-endpoint",
      "command": "echo 'Configure webhook endpoint: {{config.webhookUrl}}/api/webhooks/stripe'",
      "description": "Configure Stripe webhook endpoint",
      "condition": "config.enableWebhooks"
    }
  ]
}