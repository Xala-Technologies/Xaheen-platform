{
  "name": "better-auth",
  "type": "auth",
  "provider": "better-auth",
  "version": "1.0.0",
  "description": "Better Auth authentication service with comprehensive auth features",
  "injectionPoints": [
    {
      "path": "lib/auth.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 100,
      "template": "// Better Auth Configuration\n// Generated by Xaheen CLI\n\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { prisma } from \"./db\";\n\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, {\n    provider: \"{{config.database}}\"\n  }),\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: {{config.requireEmailVerification}}\n  },\n  {{#if config.enableOAuth}}\n  socialProviders: {\n    {{#if config.googleOAuth}}\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!\n    },\n    {{/if}}\n    {{#if config.githubOAuth}}\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!\n    }\n    {{/if}}\n  },\n  {{/if}}\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24 // 24 hours\n  },\n  {{#if config.enableMFA}}\n  twoFactor: {\n    enabled: true\n  },\n  {{/if}}\n  trustedOrigins: [{{#each config.trustedOrigins}}\"{{this}}\"{{#unless @last}},{{/unless}}{{/each}}]\n});\n\nexport type Session = typeof auth.$Infer.Session;\nexport type User = typeof auth.$Infer.User;"
    },
    {
      "path": "lib/auth-client.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 90,
      "template": "// Better Auth Client\n// Generated by Xaheen CLI\n\nimport { createAuthClient } from \"better-auth/react\";\n\nexport const authClient = createAuthClient({\n  baseURL: process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\"\n});\n\nexport const { signIn, signUp, signOut, useSession } = authClient;"
    },
    {
      "path": "app/api/auth/[...auth]/route.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 80,
      "condition": "eq config.framework 'next'",
      "template": "// Better Auth API Route\n// Generated by Xaheen CLI\n\nimport { auth } from \"@/lib/auth\";\n\nexport const { GET, POST } = auth.handler;"
    },
    {
      "path": "middleware.ts",
      "type": "file",
      "strategy": "replace",
      "priority": 70,
      "condition": "eq config.framework 'next'",
      "template": "// Authentication Middleware\n// Generated by Xaheen CLI\n\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"@/lib/auth\";\n\nconst protectedPaths = [\"/dashboard\", \"/profile\", \"/settings\"];\nconst publicPaths = [\"/\", \"/auth/signin\", \"/auth/signup\"];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  // Skip middleware for API routes and static files\n  if (\n    pathname.startsWith(\"/api/\") ||\n    pathname.startsWith(\"/_next/\") ||\n    pathname.includes(\".\")\n  ) {\n    return NextResponse.next();\n  }\n\n  // Check if path requires authentication\n  const isProtectedPath = protectedPaths.some(path => pathname.startsWith(path));\n  const isPublicPath = publicPaths.includes(pathname);\n\n  if (isProtectedPath) {\n    const session = await auth.api.getSession({\n      headers: request.headers\n    });\n\n    if (!session) {\n      return NextResponse.redirect(new URL(\"/auth/signin\", request.url));\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    \"/((?!api|_next/static|_next/image|favicon.ico).*)\",\n  ],\n};"
    },
    {
      "path": ".env.local.example",
      "type": "file",
      "strategy": "append",
      "priority": 10,
      "template": "\n# Better Auth Configuration\nAUTH_SECRET=your-auth-secret-here\nAUTH_TRUST_HOST=true\n\n{{#if config.enableOAuth}}# OAuth Configuration\n{{#if config.googleOAuth}}GOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n{{/if}}{{#if config.githubOAuth}}GITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n{{/if}}{{/if}}\n\n{{#if config.enableMFA}}# Two-Factor Authentication\nTWOFA_SECRET=your-2fa-secret\n{{/if}}"
    }
  ],
  "envVariables": [
    {
      "name": "AUTH_SECRET",
      "description": "Secret key for signing auth tokens",
      "required": true,
      "type": "secret"
    },
    {
      "name": "AUTH_TRUST_HOST",
      "description": "Trust the host header",
      "required": false,
      "defaultValue": "true",
      "type": "boolean"
    },
    {
      "name": "GOOGLE_CLIENT_ID",
      "description": "Google OAuth client ID",
      "required": false,
      "type": "string"
    },
    {
      "name": "GOOGLE_CLIENT_SECRET",
      "description": "Google OAuth client secret",
      "required": false,
      "type": "secret"
    },
    {
      "name": "GITHUB_CLIENT_ID",
      "description": "GitHub OAuth client ID",
      "required": false,
      "type": "string"
    },
    {
      "name": "GITHUB_CLIENT_SECRET",
      "description": "GitHub OAuth client secret",
      "required": false,
      "type": "secret"
    }
  ],
  "dependencies": [
    {
      "name": "better-auth",
      "version": "^1.0.0",
      "type": "runtime"
    },
    {
      "name": "@better-auth/react",
      "version": "^1.0.0",
      "type": "runtime",
      "condition": "eq config.framework 'next'"
    },
    {
      "name": "better-auth",
      "version": "^1.0.0",
      "type": "runtime"
    }
  ],
  "postInjectionSteps": [
    {
      "name": "install-dependencies",
      "command": "npm install",
      "description": "Install Better Auth dependencies"
    },
    {
      "name": "setup-database-tables",
      "command": "npx prisma db push",
      "description": "Create authentication tables in database",
      "condition": "eq config.database 'prisma'"
    }
  ]
}