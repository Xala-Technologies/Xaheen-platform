/**
 * Sign In Form Component
 * Generated with Xaheen CLI - Fragment: {{fragment.name}}
 * 
 * {{fragment.description}}
 */

import { useState } from "react";
import { signIn } from "better-auth/client";
import { Button, Card, Stack, Text, Input, Form } from "@xala-technologies/ui-system";
import { useRouter } from "{{#if (eq framework "next")}}next/navigation{{else}}react-router-dom{{/if}}";

interface SignInFormProps {
  readonly onSuccess?: () => void;
  readonly redirectTo?: string;
}

export const SignInForm = ({ onSuccess, redirectTo = "/dashboard" }: SignInFormProps): JSX.Element => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    setIsLoading(true);
    setError("");

    try {
      const result = await signIn.email({
        email,
        password,
      });

      if (result.error) {
        setError(result.error.message || "Sign in failed");
        return;
      }

      onSuccess?.();
      router.push(redirectTo);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An unexpected error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  const handleOAuthSignIn = async (provider: string): Promise<void> => {
    setIsLoading(true);
    setError("");

    try {
      await signIn.social({
        provider: provider as any,
        callbackURL: redirectTo,
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : "OAuth sign in failed");
      setIsLoading(false);
    }
  };

  return (
    <Card variant="elevated" spacing="8">
      <Stack spacing="6">
        <Text variant="heading" size="2xl" align="center">
          {{#if variables.brandName}}{{variables.brandName}} - {{/if}}Sign In
        </Text>

        {error && (
          <Card variant="error" spacing="4">
            <Text variant="body" size="sm" color="error">
              {error}
            </Text>
          </Card>
        )}

        <Form onSubmit={handleSubmit}>
          <Stack spacing="4">
            <Input
              type="email"
              label="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              disabled={isLoading}
              aria-describedby="email-error"
            />

            <Input
              type="password"
              label="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              disabled={isLoading}
              aria-describedby="password-error"
            />

            <Button
              type="submit"
              variant="primary"
              size="lg"
              loading={isLoading}
              disabled={!email || !password}
              aria-label="Sign in to your account"
            >
              {isLoading ? "Signing in..." : "Sign In"}
            </Button>
          </Stack>
        </Form>

        {{#if variables.supportsOAuth}}
        <Stack spacing="3">
          <Text variant="body" size="sm" align="center" color="muted">
            Or continue with
          </Text>

          <Stack direction="row" spacing="3">
            <Button
              variant="outline"
              size="md"
              onClick={() => handleOAuthSignIn("google")}
              disabled={isLoading}
              aria-label="Sign in with Google"
            >
              Google
            </Button>
            
            <Button
              variant="outline"
              size="md"
              onClick={() => handleOAuthSignIn("github")}
              disabled={isLoading}
              aria-label="Sign in with GitHub"
            >
              GitHub
            </Button>
          </Stack>
        </Stack>
        {{/if}}

        <Text variant="body" size="sm" align="center">
          Don't have an account?{" "}
          <Button variant="link" size="sm" href="/auth/signup">
            Sign up
          </Button>
        </Text>
      </Stack>
    </Card>
  );
};