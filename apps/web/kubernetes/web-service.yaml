# Xaheen CLI Ecosystem Web Application Service
apiVersion: v1
kind: Service
metadata:
  name: xaheen-web-service
  namespace: xaheen-prod
  labels:
    app: xaheen-web
    component: frontend
    environment: production
    service-type: web
    app.kubernetes.io/name: xaheen-web
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: xaheen-cli-ecosystem
    app.kubernetes.io/version: "6.2.0"
  annotations:
    description: "Service for Xaheen CLI Ecosystem web application"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/api/metrics"
    # Load balancer annotations (for cloud providers)
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    # Health check annotations
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/api/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "3000"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval-seconds: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout-seconds: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold-count: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold-count: "3"
spec:
  type: ClusterIP
  selector:
    app: xaheen-web
    component: frontend
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: None
  # IP family configuration for dual-stack
  ipFamilyPolicy: PreferDualStack
  ipFamilies:
  - IPv4
  - IPv6
---
# Headless Service for StatefulSet-like behavior (if needed)
apiVersion: v1
kind: Service
metadata:
  name: xaheen-web-headless
  namespace: xaheen-prod
  labels:
    app: xaheen-web
    component: frontend
    environment: production
    service-type: headless
  annotations:
    description: "Headless service for Xaheen web application internal communication"
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: xaheen-web
    component: frontend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  publishNotReadyAddresses: false
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: xaheen-web-ingress
  namespace: xaheen-prod
  labels:
    app: xaheen-web
    component: frontend
    environment: production
  annotations:
    # Ingress controller specific annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # SSL/TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA,ECDHE-RSA-AES256-SHA,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "DENY" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()" always;
    
    # Performance optimizations
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rps: "100"
    nginx.ingress.kubernetes.io/rate-limit-connections: "50"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-brotli: "true"
    nginx.ingress.kubernetes.io/brotli-level: "6"
    nginx.ingress.kubernetes.io/brotli-types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://xaheen.no,https://www.xaheen.no"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Custom configuration for Norwegian compliance
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-GDPR-Compliant "true" always;
      add_header X-NSM-Classification "OPEN" always;
      add_header X-Data-Protection "GDPR-2018" always;
      add_header X-WCAG-Level "AAA" always;
      
      # Norwegian locale detection
      if ($http_accept_language ~* "no|nb") {
        add_header X-Detected-Locale "nb-NO" always;
      }
      
      # Security monitoring
      access_log /var/log/nginx/xaheen-security.log combined;
      
      # Block common attack patterns
      if ($request_uri ~* "(\<|%3C).*script.*(\>|%3E)") {
        return 403;
      }
      if ($query_string ~* "[;'\<\>].*") {
        return 403;
      }
spec:
  tls:
  - hosts:
    - xaheen.no
    - www.xaheen.no
    - api.xaheen.no
    secretName: xaheen-tls-secret
  rules:
  - host: xaheen.no
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: xaheen-web-service
            port:
              number: 80
  - host: www.xaheen.no
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: xaheen-web-service
            port:
              number: 80
---
# Additional Ingress for API routes (if separate routing needed)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: xaheen-api-ingress
  namespace: xaheen-prod
  labels:
    app: xaheen-web
    component: api
    environment: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # API-specific configurations
    nginx.ingress.kubernetes.io/rate-limit-rps: "200"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # API versioning
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-API-Version "v1" always;
      add_header X-Rate-Limit-Limit "200" always;
      add_header X-Rate-Limit-Remaining "$limit_req_status" always;
    
    # CORS for API
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key"
spec:
  tls:
  - hosts:
    - api.xaheen.no
    secretName: xaheen-api-tls-secret
  rules:
  - host: api.xaheen.no
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: xaheen-web-service
            port:
              number: 80
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: xaheen-web-service
            port:
              number: 80
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: xaheen-web-service
            port:
              number: 9090
---
# Service Monitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: xaheen-web-monitor
  namespace: xaheen-prod
  labels:
    app: xaheen-web
    component: frontend
    environment: production
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: xaheen-web
      component: frontend
  endpoints:
  - port: metrics
    path: /api/metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_name]
      targetLabel: pod
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      targetLabel: node
    - sourceLabels: [__meta_kubernetes_namespace]
      targetLabel: namespace
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'go_.*'
      action: drop
    - sourceLabels: [__name__]
      regex: 'process_.*'
      action: drop